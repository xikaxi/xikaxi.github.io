<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>hexo fluid美化页面效果</title>
    <link href="/2021/03/13/hexo%E7%BE%8E%E5%8C%96%E9%A1%B5%E9%9D%A2/"/>
    <url>/2021/03/13/hexo%E7%BE%8E%E5%8C%96%E9%A1%B5%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Hexo-Fluid美化页面"><a href="#Hexo-Fluid美化页面" class="headerlink" title="Hexo Fluid美化页面"></a><font color="#027cd8">Hexo Fluid美化页面</font></h2><p><code>前情提要</code></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 页面添加站点运行时间</span><br><span class="hljs-comment"># 美化鼠标</span><br><span class="hljs-comment"># 动态线条</span><br></code></pre></div></td></tr></table></figure><h2 id="1-主题-config-yml文件中修改custom-js与custom-css"><a href="#1-主题-config-yml文件中修改custom-js与custom-css" class="headerlink" title="1. 主题_config.yml文件中修改custom_js与custom_css"></a><font color="#027cd8">1. 主题_config.yml文件中修改custom_js与custom_css</font></h2><h4 id="custom-js-修改前-修改后"><a href="#custom-js-修改前-修改后" class="headerlink" title="custom_js 修改前 / 修改后"></a><font color="#4fb8fe">custom_js 修改前 / 修改后</font></h4><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-comment"># 修改前</span><br><span class="hljs-attr">custom_js:</span><br><span class="hljs-comment"># 指定自定义 .css 文件路径，用法和 custom_js 相同</span><br><span class="hljs-comment"># The usage is the same as custom_js</span><br><br><span class="hljs-comment"># 修改后</span><br><span class="hljs-attr">custom_js:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">//cdn.jsdelivr.net/gh/bynotes/texiao/source/js/caidai.js</span> <span class="hljs-comment"># 动态彩带</span><br>  <span class="hljs-comment"># - //cdn.jsdelivr.net/gh/bynotes/texiao/source/js/jingtaisidai.js # 静态彩带</span><br>  <span class="hljs-comment"># - //cdn.jsdelivr.net/gh/bynotes/texiao/source/js/xiantiao.js # 动态黑色线条</span><br>  <span class="hljs-comment"># - //cdn.jsdelivr.net/gh/bynotes/texiao/source/js/daxuehua.js # 大雪花飘落</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">//cdn.jsdelivr.net/gh/bynotes/texiao/source/js/xiaoxingxing.js</span> <span class="hljs-comment"># 鼠标跟随小星星</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">//cdn.jsdelivr.net/gh/bynotes/texiao/source/js/timeDate.js</span> <span class="hljs-comment"># 运行时间</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">//cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js</span>  <span class="hljs-comment">#/APlayer#/APlayer依赖</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">//cdn.jsdelivr.net/gh/metowolf/Metingjs@1.2/dist/Meting.min.js</span>  <span class="hljs-comment">#/APlayer依赖</span><br><br><span class="hljs-comment"># 指定自定义 .css 文件路径，用法和 custom_js 相同</span><br><span class="hljs-comment"># The usage is the same as custom_js</span><br></code></pre></div></td></tr></table></figure><h4 id="custom-css-修改前-修改后"><a href="#custom-css-修改前-修改后" class="headerlink" title="custom_css 修改前 / 修改后"></a><font color="#4fb8fe">custom_css 修改前 / 修改后</font></h4><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-comment"># 修改前</span><br><span class="hljs-attr">custom_css:</span><br><br><span class="hljs-comment"># 修改后</span><br><span class="hljs-attr">custom_css:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">//cdn.jsdelivr.net/gh/bynotes/texiao/source/css/shubiao.css</span> <span class="hljs-comment">#鼠标指针</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">//cdn.jsdelivr.net/gh/bynotes/texiao/source/css/gundongtiao.css</span> <span class="hljs-comment"># 滚动条颜色</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">//cdn.jsdelivr.net/gh/bynotes/texiao/source/css/toubudaziji.css</span> <span class="hljs-comment"># 头部打字机颜色效果渐变</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">//cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css</span>   <span class="hljs-comment">#/APlayer依赖</span><br></code></pre></div></td></tr></table></figure><h2 id="2-在网站页脚处-插入运行时间-找到footer-ejs"><a href="#2-在网站页脚处-插入运行时间-找到footer-ejs" class="headerlink" title="2. 在网站页脚处 插入运行时间 找到footer.ejs"></a><font color="#027cd8">2. 在网站页脚处 插入运行时间 找到footer.ejs</font></h2><h4 id="路径-主题文件下-layout-partial-footer-ejs"><a href="#路径-主题文件下-layout-partial-footer-ejs" class="headerlink" title="路径 主题文件下/layout/_partial/footer.ejs"></a><font color="#4fb8fe">路径 主题文件下/layout/_partial/footer.ejs</font></h4><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&lt;footer <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;text-center mt-5 py-3&quot;</span>&gt;<br>  &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;footer-content&quot;</span>&gt;<br>    &lt;%- theme.footer.content %&gt;<br>  &lt;/div&gt;<br>  &lt;%- partial(<span class="hljs-string">&#x27;_partial/statistics.ejs&#x27;</span>) %&gt;<br>    &lt;%- partial(<span class="hljs-string">&#x27;_partial/beian.ejs&#x27;</span>) %&gt;<br>      &lt;% <span class="hljs-keyword">if</span>(theme.web_analytics.cnzz) &#123; %&gt;<br>        &lt;!-- cnzz Analytics Icon --&gt;<br>        &lt;span id=<span class="hljs-string">&quot;cnzz_stat_icon_&lt;%- theme.web_analytics.cnzz %&gt;&quot;</span> style=<span class="hljs-string">&quot;display: none&quot;</span>&gt;&lt;/span&gt;<br>        &lt;% &#125; %&gt;<br>&lt;/footer&gt;<br><br>&lt;!-- SCRIPTS --&gt;<br>&lt;%- partial(<span class="hljs-string">&#x27;_partial/scripts.ejs&#x27;</span>) %&gt;<br>  &lt;center&gt;<br>    &lt;span id=<span class="hljs-string">&quot;timeDate&quot;</span>&gt;载入天数...&lt;<span class="hljs-regexp">/span&gt;&lt;span id=&quot;times&quot;&gt;载入时分秒...&lt;/</span>span&gt;<br>    &lt;script&gt;<br>      <span class="hljs-comment">//运行时间bynote.cn</span><br>      <span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createtime</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> grt = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">&quot;8/15/2020 17:38:00&quot;</span>);<span class="hljs-comment">//在此处修改你的建站时间，格式：月/日/年 时:分:秒</span><br>        now.setTime(now.getTime() + <span class="hljs-number">250</span>);<br>        days = (now - grt) / <span class="hljs-number">1000</span> / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> / <span class="hljs-number">24</span>; dnum = <span class="hljs-built_in">Math</span>.floor(days);<br>        hours = (now - grt) / <span class="hljs-number">1000</span> / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> - (<span class="hljs-number">24</span> * dnum); hnum = <span class="hljs-built_in">Math</span>.floor(hours);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">String</span>(hnum).length == <span class="hljs-number">1</span>) &#123; hnum = <span class="hljs-string">&quot;0&quot;</span> + hnum; &#125; minutes = (now - grt) / <span class="hljs-number">1000</span> / <span class="hljs-number">60</span> - (<span class="hljs-number">24</span> * <span class="hljs-number">60</span> * dnum) - (<span class="hljs-number">60</span> * hnum);<br>        mnum = <span class="hljs-built_in">Math</span>.floor(minutes); <span class="hljs-keyword">if</span> (<span class="hljs-built_in">String</span>(mnum).length == <span class="hljs-number">1</span>) &#123; mnum = <span class="hljs-string">&quot;0&quot;</span> + mnum; &#125;<br>        seconds = (now - grt) / <span class="hljs-number">1000</span> - (<span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * dnum) - (<span class="hljs-number">60</span> * <span class="hljs-number">60</span> * hnum) - (<span class="hljs-number">60</span> * mnum);<br>        snum = <span class="hljs-built_in">Math</span>.round(seconds); <span class="hljs-keyword">if</span> (<span class="hljs-built_in">String</span>(snum).length == <span class="hljs-number">1</span>) &#123; snum = <span class="hljs-string">&quot;0&quot;</span> + snum; &#125;<br>        <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;timeDate&quot;</span>).innerHTML = <span class="hljs-string">&quot;本站已运行 &quot;</span> + dnum + <span class="hljs-string">&quot; 天 &quot;</span>;<br>        <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;times&quot;</span>).innerHTML = hnum + <span class="hljs-string">&quot; 小时 &quot;</span> + mnum + <span class="hljs-string">&quot; 分 &quot;</span> + snum + <span class="hljs-string">&quot; 秒&quot;</span>;<br>      &#125;<br>      <span class="hljs-built_in">setInterval</span>(<span class="hljs-string">&quot;createtime()&quot;</span>, <span class="hljs-number">250</span>);<br>    &lt;/script&gt;<br>  &lt;/center&gt;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
      <category>Themes</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>hexo Github里面Pages配置域名</title>
    <link href="/2021/03/12/pages%E9%85%8D%E7%BD%AE%E5%9F%9F%E5%90%8D/"/>
    <url>/2021/03/12/pages%E9%85%8D%E7%BD%AE%E5%9F%9F%E5%90%8D/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Github里面Pages配置域名"><a href="#Github里面Pages配置域名" class="headerlink" title="Github里面Pages配置域名"></a><font color="#027cd8">Github里面Pages配置域名</font></h2><p><code>前情提要</code></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">使用hexo搭建的个人博客 将其部署到 GitHub Pages上<br>使用xxx.github.io即可访问到<br>现更改 绑定域名<br>源域名: papyboy.github.io<br>现域名: bree.vip<br>注意: 码云的绑定域名需要付费啊 所以选择更改为GitHub(访问太慢)<br></code></pre></div></td></tr></table></figure><h2 id="1-在GitHub上创建一个仓库"><a href="#1-在GitHub上创建一个仓库" class="headerlink" title="1. 在GitHub上创建一个仓库"></a><font color="#027cd8">1. 在GitHub上创建一个仓库</font></h2><p>右上角 new repository 点击后如下图</p><p><img src="https://ps.ssl.qhmsg.com/t023f7556d0434efc92.jpg" alt="new repository"></p><p>创建好后 如下图 复制仓库地址</p><p><img src="https://ps.ssl.qhmsg.com/t024e56b25facdf0e07.jpg" alt="获取地址"></p><h2 id="2-域名解析-CNAME"><a href="#2-域名解析-CNAME" class="headerlink" title="2. 域名解析 CNAME"></a><font color="#027cd8">2. 域名解析 CNAME</font></h2><blockquote><p>这里使用腾讯云做示例 记录类型需要选择为 CNAME</p></blockquote><h5 id="找到云解析-注意-域名需要备案"><a href="#找到云解析-注意-域名需要备案" class="headerlink" title="找到云解析 注意:域名需要备案"></a>找到云解析 注意:域名需要备案</h5><p><img src="https://ps.ssl.qhmsg.com/t02a91b0679e0044520.jpg" alt="云解析"></p><h5 id="点击解析"><a href="#点击解析" class="headerlink" title="点击解析"></a>点击解析</h5><p><img src="https://ae01.alicdn.com/kf/U2e5a22fe9c28412f89be694155dbb44eX.jpg" alt="解析"></p><h5 id="点击添加记录"><a href="#点击添加记录" class="headerlink" title="点击添加记录"></a>点击添加记录</h5><p><img src="https://ae01.alicdn.com/kf/U0e06dac75f05475fa719195b3bb54e91r.jpg" alt="添加记录"></p><h5 id="注意-当前为将域名指向另一个域名-所以记录类型要选择CNAME"><a href="#注意-当前为将域名指向另一个域名-所以记录类型要选择CNAME" class="headerlink" title="注意 当前为将域名指向另一个域名 所以记录类型要选择CNAME"></a>注意 当前为将域名指向另一个域名 所以记录类型要选择CNAME</h5><p><img src="https://ae01.alicdn.com/kf/U0fa317dc25da45f2a26098052f5ce07fj.jpg" alt="CNAME"></p><blockquote><p>记录值为xxx.github.io 解析需要等待10-15分钟左右</p></blockquote><h2 id="3-仓库里面添加文件CNAME"><a href="#3-仓库里面添加文件CNAME" class="headerlink" title="3. 仓库里面添加文件CNAME"></a><font color="#027cd8">3. 仓库里面添加文件CNAME</font></h2><h5 id="在setting里面-找到GitHub-Pages-配置域名这样会自动生成-CNAME文件"><a href="#在setting里面-找到GitHub-Pages-配置域名这样会自动生成-CNAME文件" class="headerlink" title="在setting里面 找到GitHub Pages 配置域名这样会自动生成 CNAME文件"></a>在setting里面 找到GitHub Pages 配置域名这样会自动生成 CNAME文件</h5><p><img src="https://ae01.alicdn.com/kf/Uc9a7cb9745354b83a7860873588ded36X.jpg" alt="配置CNAME文件"></p><h2 id="4-hexo静态博客提交"><a href="#4-hexo静态博客提交" class="headerlink" title="4. hexo静态博客提交"></a><font color="#027cd8">4. hexo静态博客提交</font></h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 替换仓库地址后 依次执行命令</span><br>hexo g<br>hexo d<br><span class="hljs-meta">#</span><span class="bash"> 后打开域名 就能访问啦</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
      <category>Themes</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL数据库保存emoji表情</title>
    <link href="/2021/03/11/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BF%9D%E5%AD%98emoji%E8%A1%A8%E6%83%85/"/>
    <url>/2021/03/11/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BF%9D%E5%AD%98emoji%E8%A1%A8%E6%83%85/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="MySQL数据库保存emoji表情"><a href="#MySQL数据库保存emoji表情" class="headerlink" title="MySQL数据库保存emoji表情"></a><font color="#008080">MySQL数据库保存emoji表情</font></h2><p><code>前情提要</code></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx">微信登录的用户 获取用户名/有些用户的名称会带有emoji表情<br>此时MySQL数据库就会报错 所以需要修改 让数据库能够保存emoji<br></code></pre></div></td></tr></table></figure><p><code>报错信息:</code></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">django.db.utils.OperationalError: (<span class="hljs-number">1366</span>, <span class="hljs-string">&quot;Incorrect string value: &#x27;\\xE5\\xA4\\xAB\\xE4\\xBA\\xBA&#x27; f</span><br></code></pre></div></td></tr></table></figure><h2 id="在django中settings-py添加设置"><a href="#在django中settings-py添加设置" class="headerlink" title="在django中settings.py添加设置"></a><font color="#008080">在django中settings.py添加设置</font></h2><p><code>添加:</code></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-string">&#x27;charset&#x27;</span>: <span class="hljs-string">&#x27;utf8mb4&#x27;</span>,<br></code></pre></div></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">DATABASES = &#123;<br>    <span class="hljs-string">&#x27;default&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;ENGINE&#x27;</span>: <span class="hljs-string">&#x27;django.db.backends.mysql&#x27;</span>,  <span class="hljs-comment"># 数据库引擎</span><br>        <span class="hljs-string">&#x27;HOST&#x27;</span>: <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,  <span class="hljs-comment"># 数据库主机</span><br>        <span class="hljs-string">&#x27;PORT&#x27;</span>: <span class="hljs-number">3365</span>,  <span class="hljs-comment"># 数据库端口</span><br>        <span class="hljs-string">&#x27;USER&#x27;</span>: <span class="hljs-string">&#x27;edrfe&#x27;</span>,  <span class="hljs-comment"># 数据库用户名</span><br>        <span class="hljs-string">&#x27;PASSWORD&#x27;</span>: <span class="hljs-string">&#x27;rtyfghvbn&#x27;</span>,  <span class="hljs-comment"># 服务器数据库用户密码</span><br>        <span class="hljs-string">&#x27;NAME&#x27;</span>: <span class="hljs-string">&#x27;qaw&#x27;</span>,  <span class="hljs-comment"># 数据库名字</span><br>        <span class="hljs-string">&#x27;OPTIONS&#x27;</span>: &#123;<br>            <span class="hljs-string">&quot;init_command&quot;</span>: <span class="hljs-string">&quot;SET foreign_key_checks = 0;&quot;</span>,<br>            <span class="hljs-string">&#x27;charset&#x27;</span>: <span class="hljs-string">&#x27;utf8mb4&#x27;</span>,<br>        &#125;<br>    &#125;,<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="在MySQL中修改数据库的字符集"><a href="#在MySQL中修改数据库的字符集" class="headerlink" title="在MySQL中修改数据库的字符集"></a><font color="#008080">在MySQL中修改数据库的字符集</font></h2><p><code>1. 进入MySQL:</code></p><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx">root@iZbp1faknmuby6hc0tazirZ:~/# mysql -uedrfe -p 密码<br><br></code></pre></div></td></tr></table></figure><p><code>2. 修改指定的数据库的字符集</code></p><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">ALTER</span> DATABASE 数据库名 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci;<br></code></pre></div></td></tr></table></figure><p><code>3. 指定数据库 进行修改表的字符集</code></p><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-comment"># 指定数据库</span><br><span class="hljs-attribute">use</span> 数据库名;<br><br><span class="hljs-comment"># 修改字符集</span><br><span class="hljs-attribute">ALTER</span> TABLE 表名 CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;<br></code></pre></div></td></tr></table></figure><p><code>4. 修改column字符集</code></p><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">ALTER</span> TABLE 表名 CHANGE 字段名 字段名 该字段原来的数据类型 CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>前端请求登录 获取token存取</title>
    <link href="/2021/03/11/%E5%89%8D%E7%AB%AF%E4%BF%9D%E5%AD%98token/"/>
    <url>/2021/03/11/%E5%89%8D%E7%AB%AF%E4%BF%9D%E5%AD%98token/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="关于前端获取存放token"><a href="#关于前端获取存放token" class="headerlink" title="关于前端获取存放token"></a><font color="#BBFF00">关于前端获取存放token</font></h2><p><img src="https://ae01.alicdn.com/kf/U2bebf28b35e246579dd1da32dfc16d0co.jpg" alt="流程图"></p><p><code>前情提要</code></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx">用户请求登录接口的时候 后端获取数据 认证 返回认证数据到前端<br>前端拿到认证数据后 缓存<br>通过ajax获取认证数据 用于验证用户<br></code></pre></div></td></tr></table></figure><h2 id="登录SUCCESS时候-通过请求获取认证数据"><a href="#登录SUCCESS时候-通过请求获取认证数据" class="headerlink" title="登录SUCCESS时候,通过请求获取认证数据"></a><font color="#BBFF00">登录SUCCESS时候,通过请求获取认证数据</font></h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">$ajax(&#123;<br>    <span class="hljs-comment">// 测试接口</span><br>    url:<span class="hljs-string">&quot;pro/user/login&quot;</span>,<br>    data: &#123;<br>        <span class="hljs-string">&quot;uName&quot;</span>: <span class="hljs-string">&quot;wsbg&quot;</span>,<br>        <span class="hljs-string">&quot;pPwd&quot;</span>: <span class="hljs-string">&quot;wdtazbn9527&quot;</span><br>    &#125;,<br>    type: <span class="hljs-string">&quot;post&quot;</span>,<br>    dataType: <span class="hljs-string">&quot;json&quot;</span>,<br>    success: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) </span>&#123;<br>        <span class="hljs-comment">// 返回成功的时候</span><br>        <span class="hljs-keyword">var</span> uToken = data.uToken;<br>        <span class="hljs-comment">//存放uToken</span><br>        <span class="hljs-built_in">window</span>.localStorage.setItem(<span class="hljs-string">&#x27;uToken&#x27;</span>,uToken);<br>        <br>        &#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure><h2 id="请求主页或者其他接口的时候-携带token"><a href="#请求主页或者其他接口的时候-携带token" class="headerlink" title="请求主页或者其他接口的时候 携带token"></a><font color="#BBFF00">请求主页或者其他接口的时候 携带token</font></h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 提取认证信息</span><br><span class="hljs-keyword">var</span>  uToken = <span class="hljs-built_in">window</span>.localStorage.getItem(<span class="hljs-string">&quot;uToken&quot;</span>);<br>$.ajax(&#123;<br>    headers: &#123;<br>        <span class="hljs-string">&quot;token&quot;</span>: uToken <span class="hljs-comment">//缓存的token 用于验证用户</span><br>    &#125;,<br>    url: <span class="hljs-string">&quot;pro/index/INFO/&quot;</span>, <span class="hljs-comment">//请求接口</span><br>    type: <span class="hljs-string">&quot;post&quot;</span>,<br>    dataType: <span class="hljs-string">&#x27;json&#x27;</span>,<br>    data: &#123;<br>    &#125;,<br>    success: <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">//请求成功的时候</span><br>    &#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure><h2 id="前端的sessionStorage-与-localStorage"><a href="#前端的sessionStorage-与-localStorage" class="headerlink" title="前端的sessionStorage 与 localStorage"></a><font color="#BBFF00">前端的sessionStorage 与 localStorage</font></h2><p>sessionStorage 只在当前的窗口有效 浏览器关闭 则清除缓存</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//设置</span><br><span class="hljs-built_in">window</span>.seesionStorage.setItem(<span class="hljs-string">&#x27;token&#x27;</span>,uToken)<br><br><span class="hljs-comment">//获取</span><br><span class="hljs-built_in">window</span>.sessionStorage.getItem(<span class="hljs-string">&#x27;token&#x27;</span>);<br><br><span class="hljs-comment">//清除</span><br><span class="hljs-built_in">window</span>.sessionStorage.clear();<br><span class="hljs-comment">//删除数据</span><br><span class="hljs-built_in">window</span>.sessionStorage.removeItem(<span class="hljs-string">&#x27;token&#x27;</span>)<br></code></pre></div></td></tr></table></figure><p>localStorage 在关闭浏览器后依然有效</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//设置</span><br><span class="hljs-built_in">window</span>.localStorage.setItem(<span class="hljs-string">&#x27;token&#x27;</span>, token);<br><br><span class="hljs-comment">//获取</span><br><span class="hljs-built_in">window</span>.localStorage.getItem(<span class="hljs-string">&quot;token&quot;</span>)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>技术杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信支付-会员升级</title>
    <link href="/2021/03/09/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98-4/"/>
    <url>/2021/03/09/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98-4/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="会员升级–补差价"><a href="#会员升级–补差价" class="headerlink" title="会员升级–补差价"></a><font color="#008080">会员升级–补差价</font></h2><p><code>前情提要</code></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx">根据微信支付来实现的会员升级 (低配版)<br>用户购买年会员/不够用 但是使用的时间才三个月<br>可是重新购买一个的话 就浪费了 所以需要升级会员<br>本章使用: Python3.6 django MySQL<br></code></pre></div></td></tr></table></figure><p><code>流程图&lt;--&gt;逻辑</code></p><p><img src="https://p.pstatp.com/origin/137790001afcaaf439a79" alt="流程"></p><h2 id="升级代码-获取用户的等级与价格"><a href="#升级代码-获取用户的等级与价格" class="headerlink" title="升级代码/获取用户的等级与价格"></a><font color="#008080">升级代码/获取用户的等级与价格</font></h2><table><thead><tr><th>参数</th><th>值</th><th>备注</th><th>请求方式</th></tr></thead><tbody><tr><td>参考路由</td><td><a href="http://127.0.0.1:8000/memberupgrade/">http://127.0.0.1:8000/memberupgrade/</a></td><td>会员升级/需获取当前用户的级别</td><td>POST</td></tr><tr><td>body</td><td>xxx微信支付</td><td>商品描述</td><td></td></tr><tr><td>total_fee</td><td>2980</td><td>现价格</td><td></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 认证用户的jwt_token</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MemberUpgradeView</span>(<span class="hljs-params">APIView</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;MemberUpgradeView 该类--&gt;会员升级&quot;&quot;&quot;</span><br>    authentication_classes = [MyBaseAuthentication, ]  <span class="hljs-comment"># 认证用户/登录/过期/单点登录</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">post</span>(<span class="hljs-params">self, request</span>):</span><br>        body = request.POST.get(<span class="hljs-string">&#x27;body&#x27;</span>).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)  <span class="hljs-comment"># 商品描述</span><br>        total_fee = <span class="hljs-built_in">int</span>(request.POST.get(<span class="hljs-string">&#x27;total_fee&#x27;</span>))  <span class="hljs-comment"># 现价格</span><br>        user = request.user  <span class="hljs-comment"># 获取登录的用户/会员</span><br>        create_vip_time = user.create_vip_time  <span class="hljs-comment"># 创建会员的日期</span><br>        nowdays = datetime.datetime.now()  <span class="hljs-comment"># 今天的日期</span><br>        days = (nowdays - create_vip_time).days  <span class="hljs-comment"># 用掉的天数</span><br>        <span class="hljs-keyword">if</span> days &lt;= <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> Response(&#123;<span class="hljs-string">&#x27;code&#x27;</span>: RET.DBERR, <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;会员使用不足7天&#x27;</span>&#125;)<br>        <span class="hljs-string">&quot;&quot;&quot;这一块的校验 自己添加&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> user.user_type == <span class="hljs-number">1</span>:  <span class="hljs-comment"># 根据用户的等级 确认升级的会员</span><br>            <span class="hljs-keyword">return</span> Response(&#123;<span class="hljs-string">&#x27;code&#x27;</span>: RET.DBERR, <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;您不是会员,可先购买后升级会员&#x27;</span>&#125;)<br>        <span class="hljs-keyword">elif</span> user.user_type == <span class="hljs-number">2</span>:<br>            day_price = <span class="hljs-number">1980</span> / <span class="hljs-number">12</span> / <span class="hljs-number">30</span>  <span class="hljs-comment"># 日价格</span><br>            price_difference = total_fee - (<span class="hljs-number">1980</span> - day_price * days)  <span class="hljs-comment"># 差价计算</span><br>        out_trade_no = create_orderId(<span class="hljs-number">5</span>)<br>        body = body.decode()<br>        price_difference = price_difference * <span class="hljs-number">100</span><br>        data_dict = wxpay(body, <span class="hljs-built_in">int</span>(price_difference), out_trade_no)  <span class="hljs-comment"># 得到字典数据</span><br>        user = request.user<br>        <span class="hljs-keyword">if</span> data_dict.get(<span class="hljs-string">&#x27;return_code&#x27;</span>) == <span class="hljs-string">&#x27;SUCCESS&#x27;</span>:<br>            code_url = get_code_url(data_dict)  <span class="hljs-comment"># 获取二维码字符串</span><br>            img = create_image(code_url)  <span class="hljs-comment"># 创建支付 二维码</span><br>            qrcode_name = out_trade_no + <span class="hljs-string">&#x27;.png&#x27;</span><br>            img.save(<span class="hljs-string">r&#x27;static&#x27;</span> + <span class="hljs-string">&#x27;/&#x27;</span> + qrcode_name)<br>            img_url = <span class="hljs-string">&#x27;/static/&#x27;</span> + qrcode_name<br>            <span class="hljs-comment"># 订单写入 关联个人</span><br>            OrderInfo.objects.create(order_id=out_trade_no, user=user, total_amout=total_fee, status=<span class="hljs-string">&#x27;&#x27;</span>)<br>            <span class="hljs-keyword">return</span> Response(<br>                &#123;<span class="hljs-string">&#x27;code&#x27;</span>: RET.OK, <span class="hljs-string">&#x27;img_url&#x27;</span>: img_url, <span class="hljs-string">&#x27;order_id&#x27;</span>: out_trade_no, <span class="hljs-string">&#x27;total_fee&#x27;</span>: price_difference&#125;)<br>        <span class="hljs-keyword">return</span> Response(&#123;<span class="hljs-string">&#x27;code&#x27;</span>: RET.DBERR, <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;获取微信code_url失败&#x27;</span>&#125;)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>WeChat</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Nginx部署SSL证书</title>
    <link href="/2021/03/09/nginx%E9%85%8D%E7%BD%AEhttps%E8%AF%81%E4%B9%A6/"/>
    <url>/2021/03/09/nginx%E9%85%8D%E7%BD%AEhttps%E8%AF%81%E4%B9%A6/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="根据前文-将SSL证书部署至Nginx"><a href="#根据前文-将SSL证书部署至Nginx" class="headerlink" title="根据前文 将SSL证书部署至Nginx"></a><font color="#008080">根据前文 将SSL证书部署至Nginx</font></h2><p><code>前情提要</code></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx">本章使用的SSL证书为 腾讯云(但其实基本都一样 就是后缀不同)<br>在使用我这个部署教程的基础上部署SSL证书，总是遇到不少坑。我在这补充一下配置SSL证书的方法，供大家参考。<br></code></pre></div></td></tr></table></figure><h3 id="在-etc-nginx-文件夹下-新建一个储存SSL证书的文件夹"><a href="#在-etc-nginx-文件夹下-新建一个储存SSL证书的文件夹" class="headerlink" title="在 /etc/nginx/ 文件夹下 新建一个储存SSL证书的文件夹"></a>在 /etc/nginx/ 文件夹下 新建一个储存SSL证书的文件夹</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">uuu@u:/etc/nginx$ mkdir ssl<br><span class="hljs-meta">&gt;</span><span class="bash"> 注意权限 sudo mkdir ssl</span><br></code></pre></div></td></tr></table></figure><h3 id="将腾讯云上下载的证书-找到nginx的-上传到ssl文件夹里面-如果权限不够-就放在-home-下-然后剪切过去就行了"><a href="#将腾讯云上下载的证书-找到nginx的-上传到ssl文件夹里面-如果权限不够-就放在-home-下-然后剪切过去就行了" class="headerlink" title="将腾讯云上下载的证书 找到nginx的 上传到ssl文件夹里面 如果权限不够 就放在/home/下 然后剪切过去就行了"></a>将腾讯云上下载的证书 找到nginx的 上传到ssl文件夹里面 如果权限不够 就放在/home/下 然后剪切过去就行了</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">uuu@u:/etc/nginx$ sudo mv ./xxx.key xxx.crt 后面跟ssl文件夹路径 例如 /etc/nginx/ssl/<br></code></pre></div></td></tr></table></figure><h3 id="上述步骤完成后-就可以重新构造你的nginx-conf文件了-先展示一下之前的nginx配置文件"><a href="#上述步骤完成后-就可以重新构造你的nginx-conf文件了-先展示一下之前的nginx配置文件" class="headerlink" title="上述步骤完成后 就可以重新构造你的nginx.conf文件了 先展示一下之前的nginx配置文件"></a>上述步骤完成后 就可以重新构造你的nginx.conf文件了 先展示一下之前的nginx配置文件</h3><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx">uuu@u:/etc/nginx$ sudo vim nginx.conf<br><br><br><span class="hljs-comment"># 之前的nginx配置</span><br><span class="hljs-attribute">user</span> root;<br><span class="hljs-section">events</span> &#123;<br><span class="hljs-attribute">worker_connections</span>  <span class="hljs-number">1024</span>;<br>&#125;<br><span class="hljs-section">http</span> &#123;<br>    <span class="hljs-attribute">include</span>       mime.types;<br>    <span class="hljs-attribute">default_type</span>  application/octet-stream;<br>    <span class="hljs-attribute">sendfile</span>        <span class="hljs-literal">on</span>;<br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>        <span class="hljs-attribute">server_name</span>  域名/ip;<br>        <span class="hljs-attribute">charset</span> utf-<span class="hljs-number">8</span>;<br>        <span class="hljs-attribute">location</span> / &#123;<br>           <span class="hljs-attribute">include</span> uwsgi_params;<br>           <span class="hljs-attribute">uwsgi_pass</span> <span class="hljs-number">127.0.0.1:8080</span>;<br>           <span class="hljs-attribute">uwsgi_param</span> UWSGI_SCRIPT 项目名称.wsgi;<br>           <span class="hljs-attribute">uwsgi_param</span> UWSGI_CHDIR /home/ubuntu/xxx/xxx/; <span class="hljs-comment">#项目路径</span><br>        <span class="hljs-attribute">location</span> /static/ &#123;<br>            <span class="hljs-attribute">alias</span> /home/ubuntu/xxx/xxx/static/; <span class="hljs-comment">#静态资源路径</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="开始改造文件"><a href="#开始改造文件" class="headerlink" title="开始改造文件"></a>开始改造文件</h3><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">user</span> root; <span class="hljs-comment">#加上该句 防止403</span><br><span class="hljs-section">events</span> &#123;<br><span class="hljs-attribute">worker_connections</span>  <span class="hljs-number">1024</span>;<br>&#125;<br><span class="hljs-section">http</span> &#123;<br>    <span class="hljs-attribute">include</span>       mime.types;<br>    <span class="hljs-attribute">default_type</span>  application/octet-stream;<br>    <span class="hljs-attribute">sendfile</span>        <span class="hljs-literal">on</span>;<br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>        <span class="hljs-attribute">server_name</span>  域名/ip;<br>        <span class="hljs-attribute">charset</span> utf-<span class="hljs-number">8</span>;<br>        <span class="hljs-attribute">location</span> / &#123;<br>           <span class="hljs-attribute">include</span> uwsgi_params;<br>           <span class="hljs-attribute">uwsgi_pass</span> <span class="hljs-number">127.0.0.1:8080</span>;<br>           <span class="hljs-attribute">uwsgi_param</span> UWSGI_SCRIPT xxx.wsgi;<br>           <span class="hljs-attribute">uwsgi_param</span> UWSGI_CHDIR /home/ubuntu/xxx/xxx/; <span class="hljs-comment">#项目路径</span><br>           <span class="hljs-attribute">location</span> /static/ &#123;<br>               <span class="hljs-attribute">alias</span> /home/ubuntu/xxx/xxx/static/; <span class="hljs-comment">#静态资源路径</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^(.*)$</span>  https://$host<span class="hljs-variable">$1</span> <span class="hljs-literal">permanent</span>; <span class="hljs-comment">#此处为新增的 意味着获取到http的请求 转发给https</span><br>    &#125;<br><span class="hljs-comment">#以下为新增的server 主要为443 获取SSL证书</span><br>    <span class="hljs-section">server</span> &#123;<br>      <span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> ssl;<br>      <span class="hljs-attribute">server_name</span> 域名/ip;<br>      <span class="hljs-attribute">ssl</span> <span class="hljs-literal">on</span>;<br>      <span class="hljs-attribute">ssl_certificate</span> /etc/nginx/ssl/xxx.crt; <span class="hljs-comment">#这里是ssl crt(key)文件存放的绝对路径 不同服务商获取的后缀不同</span><br>      <span class="hljs-attribute">ssl_certificate_key</span> /etc/nginx/ssl/xxx.key; <span class="hljs-comment">#这里是ssl key(pem)文件存放的绝对路径 不同服务商获取的后缀不同</span><br>      <span class="hljs-attribute">ssl_session_cache</span> shared:SSL:<span class="hljs-number">1m</span>;<br>      <span class="hljs-attribute">ssl_session_timeout</span> <span class="hljs-number">5m</span>;<br>      <span class="hljs-attribute">ssl_ciphers</span> HIGH:!aNULL:!MD5;<br>      <span class="hljs-attribute">ssl_prefer_server_ciphers</span> <span class="hljs-literal">on</span>;<br>      <span class="hljs-comment">#以下 这一段location也是要加的 不加的话 重定向到nginx的 welcome页面去了</span><br>      <span class="hljs-attribute">location</span> / &#123;<br>             <span class="hljs-attribute">include</span> uwsgi_params;<br>             <span class="hljs-attribute">uwsgi_pass</span> <span class="hljs-number">127.0.0.1:8080</span>;<br>             <span class="hljs-attribute">uwsgi_param</span> UWSGI_SCRIPT xxx.wsgi;<br>             <span class="hljs-attribute">uwsgi_param</span> UWSGI_CHDIR /home/ubuntu/xxx/xxx/; <span class="hljs-comment">#项目路径</span><br>             <span class="hljs-attribute">location</span> /static/ &#123;<br>                 <span class="hljs-attribute">alias</span> /home/ubuntu/xxx/xxx/static/; <span class="hljs-comment">#静态资源路径</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="需要注意的地方"><a href="#需要注意的地方" class="headerlink" title="需要注意的地方"></a>需要注意的地方</h3><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx">使用https 需要端口443开放才能访问的 如果未开启 则需要在服务器提供商后台安全组里面 将443服务端口开放出来<br></code></pre></div></td></tr></table></figure><h4 id="关于SSL证书的申请-其实很简单-如不会获取-可联系博主☞-点击跳转-或在下方留言"><a href="#关于SSL证书的申请-其实很简单-如不会获取-可联系博主☞-点击跳转-或在下方留言" class="headerlink" title="关于SSL证书的申请 其实很简单 如不会获取 可联系博主☞ 点击跳转 或在下方留言"></a>关于SSL证书的申请 其实很简单 如不会获取 可联系博主<a href="https://bree.vip/about/">☞ 点击跳转</a> 或在下方留言</h4>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Python SPAPI-Order</title>
    <link href="/2021/03/09/SPAPI-OAUTH/"/>
    <url>/2021/03/09/SPAPI-OAUTH/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Python-AWS-OAuth✍"><a href="#Python-AWS-OAuth✍" class="headerlink" title="Python-AWS-OAuth✍"></a><font color="#008080">Python-AWS-OAuth✍</font></h2><h2 id="使用Python编写一个请求认证☟"><a href="#使用Python编写一个请求认证☟" class="headerlink" title="使用Python编写一个请求认证☟"></a><font color="#008080">使用Python编写一个请求认证☟</font></h2><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx">前面已经使用PostMan测试接口<br>接下来使用Python3.6 Windows-10 以及Python中的模块 requests json urllib实现认证类方法<br></code></pre></div></td></tr></table></figure><h2 id="根据接口文档的提示-请求头须是x-www-form-urlencoded-charset-UTF-8☟"><a href="#根据接口文档的提示-请求头须是x-www-form-urlencoded-charset-UTF-8☟" class="headerlink" title="根据接口文档的提示 请求头须是x-www-form-urlencoded;charset=UTF-8☟"></a><font color="#008080">根据接口文档的提示 请求头须是x-www-form-urlencoded;charset=UTF-8☟</font></h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">######### Alex #########</span><br><span class="hljs-comment">######### 2020-12-28 ###</span><br><span class="hljs-comment">######### Python3.6 ####</span><br><br><span class="hljs-comment"># Import package</span><br><span class="hljs-keyword">import</span> requests  <span class="hljs-comment"># pip install requests</span><br><span class="hljs-keyword">import</span> json  <span class="hljs-comment"># pip install json</span><br><span class="hljs-keyword">from</span> urllib <span class="hljs-keyword">import</span> parse  <span class="hljs-comment"># pip install urllib</span><br><br><span class="hljs-comment"># Creation class method</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AWSOauthToToken</span>:</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Get access_token</span><br><span class="hljs-string">    * Create a class property and call it directly with the class name</span><br><span class="hljs-string">    * headers Custom request header information</span><br><span class="hljs-string">    * host Must be api.amazon.com</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    headers = &#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded;charset=UTF-8&#x27;</span>,<br>               <span class="hljs-string">&#x27;host&#x27;</span>: <span class="hljs-string">&#x27;api.amazon.com&#x27;</span>,<br>               <span class="hljs-string">&#x27;Connection&#x27;</span>: <span class="hljs-string">&#x27;keep-alive&#x27;</span>,<br>               <span class="hljs-string">&#x27;Accept-Encoding&#x27;</span>: <span class="hljs-string">&#x27;gzip, deflate, br&#x27;</span>,<br>               <span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-string">&#x27;*/*&#x27;</span>&#125;<br>    form_data = &#123;<br>        <span class="hljs-string">&#x27;grant_type&#x27;</span>: <span class="hljs-string">&#x27;refresh_token&#x27;</span>,<br>        <span class="hljs-string">&#x27;refresh_token&#x27;</span>: <span class="hljs-string">&#x27;Atzr|IwEBIFNEIiJG5i3qh6b_xxxxx&#x27;</span>,<br>        <span class="hljs-string">&#x27;client_id&#x27;</span>: <span class="hljs-string">&#x27;amzn1.application-oa2-client.XXXXXXXX&#x27;</span>,<br>        <span class="hljs-string">&#x27;client_secret&#x27;</span>: <span class="hljs-string">&#x27;3eXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX0&#x27;</span><br>    &#125;<br>    url = <span class="hljs-string">&#x27;https://api.amazon.com/auth/o2/token&#x27;</span><br><br></code></pre></div></td></tr></table></figure><h2 id="定义获取数据的方法函数☟"><a href="#定义获取数据的方法函数☟" class="headerlink" title="定义获取数据的方法函数☟"></a><font color="#008080">定义获取数据的方法函数☟</font></h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_content</span>(<span class="hljs-params">self</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    GET DATA</span><br><span class="hljs-string">    :return:&#123;</span><br><span class="hljs-string">        &#x27;access_token&#x27;:&#x27;Atza|IwEBIP9cKbepuWrnuFpI2jo3hWFRWy....&#x27;,</span><br><span class="hljs-string">        &#x27;refresh_token&#x27;: &#x27;Atzr|IwEBIFNEIiJG5i3qh6b_JqJRmg5e....&#x27;,</span><br><span class="hljs-string">        &#x27;token_type&#x27;: &#x27;bearer&#x27;,</span><br><span class="hljs-string">        &#x27;expires_in&#x27;: 3600</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    token_type Must be bearer</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    data = parse.urlencode(AWSOauthToToken.form_data)<br>    content = requests.post(url=AWSOauthToToken.url, headers=AWSOauthToToken.headers, data=data).text<br>    content = json.loads(content)<br>    <span class="hljs-keyword">return</span> content<br></code></pre></div></td></tr></table></figure><h2 id="调用并打印☟"><a href="#调用并打印☟" class="headerlink" title="调用并打印☟"></a><font color="#008080">调用并打印☟</font></h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">aws_info = AWSOauthToToken().get_content()<br>print(aws_info)<br><br>---&gt;&gt;&gt;Print<br>&#123;<span class="hljs-string">&#x27;access_token&#x27;</span>: <span class="hljs-string">&#x27;Atza|IwEBIP9cKbepuWrnuFpI2j&#x27;</span>, <br><span class="hljs-string">&#x27;refresh_token&#x27;</span>: <span class="hljs-string">&#x27;Atzr|IwEBIFNEIiJG5i3qh6b_Jq&#x27;</span>, <br><span class="hljs-string">&#x27;token_type&#x27;</span>: <span class="hljs-string">&#x27;bearer&#x27;</span>, <br><span class="hljs-string">&#x27;expires_in&#x27;</span>: <span class="hljs-number">3600</span>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>SPAPI</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Python SPAPI-Order</title>
    <link href="/2021/03/09/SPAPI-Order/"/>
    <url>/2021/03/09/SPAPI-Order/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Oauth-URL✍"><a href="#Oauth-URL✍" class="headerlink" title="Oauth URL✍"></a><font color="#008080">Oauth URL✍</font></h2><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx">请求“使用亚马逊账户登录”访问令牌<br>“使用亚马逊账户登录”(LWA) 访问令牌授权您的应用程序代表卖家执行某些操作。LWA 访问令牌在发出后一小时过期，并且必须包含在销售伙伴 API 的每个请求中。<br>要请求 LWA 访问令牌，请使用以下参数向 LWA 身份验证服务器 (https://api.amazon.com/auth/o2/token) 创建一个安全的 HTTP POST：<br>当前使用的postman测试接口<br>postman里面的 Authorization --&gt; 选择 AWS Signature --&gt; 输入 ARN用户的密钥<br></code></pre></div></td></tr></table></figure><p><strong>Request:☟</strong></p><table><thead><tr><th>URL</th><th><a href="https://api.amazon.com/auth/o2/token">https://api.amazon.com/auth/o2/token</a></th></tr></thead><tbody><tr><td><strong>Message</strong></td><td>LWA 访问令牌 授权您的销售伙伴API的请求</td></tr><tr><td><strong>Request</strong></td><td><strong>POST</strong></td></tr><tr><td><strong>URI</strong></td><td><strong>/api.amazon.com/auth/o2/token</strong></td></tr></tbody></table><p><strong>Parameters:☟</strong></p><table><thead><tr><th>KEY</th><th align="left">VALUE</th></tr></thead><tbody><tr><td>grant_type</td><td align="left">refresh_token</td></tr><tr><td>refresh_token</td><td align="left">Atzr|IwEBIFNEIiJG5i3qh6b_J</td></tr><tr><td>client_id</td><td align="left">amzn1.application-oa2-xxxxxxxxxxxxxx</td></tr><tr><td>client_secret</td><td align="left">3e43xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxa0</td></tr></tbody></table><p><strong>Information to be added to the header:☟</strong></p><table><thead><tr><th>KEY</th><th>VALUE</th></tr></thead><tbody><tr><td>Host</td><td>api.amazon.com</td></tr><tr><td>Content-Type</td><td>application/x-www-form-urlencoded;charset=UTF-8</td></tr></tbody></table><p><strong>Example of operating vendor authorization:☟</strong></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">POST /auth/o2/token HTTP/l.l<br>Host: api.amazon.com<br>Content-Type: application/x-www-form-urlencoded;charset=UTF-8<br>grant_type=refresh_token<br>&amp;refresh_token=Aztr|...<br>&amp;client_id=foodevxxxxxxx<br>&amp;client_secret=Y76SDl2Fxxxxx<br></code></pre></div></td></tr></table></figure><p><strong>Return:☟</strong></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;access_token&quot;</span>: <span class="hljs-string">&quot;Atza|IwEBIBHQIw0KdZGloxE8u&quot;</span>,<br>    <span class="hljs-attr">&quot;refresh_token&quot;</span>: <span class="hljs-string">&quot;Atzr|IwEBIFNEIiJG5i3qh6b_&quot;</span>,<br>    <span class="hljs-attr">&quot;token_type&quot;</span>: <span class="hljs-string">&quot;bearer&quot;</span>,<br>    <span class="hljs-attr">&quot;expires_in&quot;</span>: <span class="hljs-number">3600</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="构造销售伙伴api-URL常用区域✍"><a href="#构造销售伙伴api-URL常用区域✍" class="headerlink" title="构造销售伙伴api URL常用区域✍"></a><font color="#008080">构造销售伙伴api URL常用区域✍</font></h2><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx">销售伙伴 API 端点与特定 AWS 区域相关联。AWS 区域非常重要，因为它是凭证范围的一部分，是在调用销售伙伴 API 时计算签名所必需的。有关更多信息，<br></code></pre></div></td></tr></table></figure><table><thead><tr><th><strong>销售区域</strong></th><th><strong>端点</strong></th><th><strong>AWS 区域</strong></th></tr></thead><tbody><tr><td>北美（加拿大、美国、墨西哥和巴西商城）</td><td><a href="https://sellingpartnerapi-na.amazon.com/">https://sellingpartnerapi-na.amazon.com</a></td><td>us-east-1</td></tr><tr><td>欧洲（西班牙、英国、法国、荷兰、德国、意大利、土耳其、阿联酋和印度商城）</td><td><a href="https://sellingpartnerapi-eu.amazon.com/">https://sellingpartnerapi-eu.amazon.com</a></td><td>eu-west-1</td></tr><tr><td>远东（新加坡、澳大利亚和日本商城）</td><td><a href="https://sellingpartnerapi-fe.amazon.com/">https://sellingpartnerapi-fe.amazon.com</a></td><td>us-west-2</td></tr></tbody></table><p><strong>marketplaceId 标识了请求的地域。☟</strong></p><p><strong>North America(北美)☟</strong></p><table><thead><tr><th><strong>国家/地区</strong></th><th><strong>marketplaceId</strong></th><th><strong>国家/地区代码</strong></th></tr></thead><tbody><tr><td>加拿大(Canada)</td><td>A2EUQ1WTGCTBG2</td><td>CA</td></tr><tr><td>美国(United States of America)</td><td>ATVPDKIKX0DER</td><td>US</td></tr><tr><td>墨西哥(Mexico)</td><td>A1AM78C64UM0Y8</td><td>MX</td></tr><tr><td>巴西(Brazil)</td><td>A2Q3Y263D00KWC</td><td>BR</td></tr></tbody></table><p><strong>Europe(欧洲)☟</strong></p><table><thead><tr><th><strong>国家/地区</strong></th><th><strong>marketplaceId</strong></th><th><strong>国家/地区代码</strong></th></tr></thead><tbody><tr><td>西班牙(Spain)</td><td>A1RKKUPIHCS9HS</td><td>ES</td></tr><tr><td>英国(United Kingdom)</td><td>A1F83G8C2ARO7P</td><td>GB</td></tr><tr><td>法国(France)</td><td>A13V1IB3VIYZZH</td><td>FR</td></tr><tr><td>荷兰(Netherlands)</td><td>A1805IZSGTT6HS</td><td>NL</td></tr><tr><td>德国(Germany)</td><td>A1PA6795UKMFR9</td><td>DE</td></tr><tr><td>意大利(Italy)</td><td>APJ6JRA9NG5V4</td><td>IT</td></tr><tr><td>土耳其(Turkey)</td><td>A33AVAJ2PDY3EV</td><td>TR</td></tr><tr><td>阿拉伯联合酋长国(United Arab Emirates)</td><td>A2VIGQ35RCS4UG</td><td>AE</td></tr><tr><td>印度(India)</td><td>A21TJRUUN4KGV</td><td>IN</td></tr></tbody></table><p><strong>Far East(远东)☟</strong></p><table><thead><tr><th><strong>国家/地区</strong></th><th><strong>marketplaceId</strong></th><th><strong>国家/地区代码</strong></th></tr></thead><tbody><tr><td>新加坡(Singapore)</td><td>A19VAU5U5O7RUS</td><td>SG</td></tr><tr><td>澳大利亚(Australia)</td><td>A39IBJ37TRP1C6</td><td>AU</td></tr><tr><td>日本(Japan)</td><td>A1VC38T7YXB528</td><td>JP</td></tr></tbody></table><p><strong>Build the HTTP header contained in the request in the sales partner API URI(构造请求)☟</strong></p><table><thead><tr><th><strong>name</strong></th><th><strong>describe</strong></th></tr></thead><tbody><tr><td>host</td><td>商城端点 例如: sellingpartnerapi-na.amazon.com</td></tr><tr><td>x-amz-access-token</td><td>Atza|IwEBIET96fwHjZPkFq8BrGjIKNN9UuqxCluun…..</td></tr><tr><td>x-amz-date</td><td>请求的日期和时间。</td></tr><tr><td>user-agent</td><td>My Selling Tool/2.0 (Language=Java/1.8.0.221;Platform=Windows/10)</td></tr></tbody></table><p><strong>Example of sales partner API request data(请求示例)☟</strong></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">host: sellingpartnerapi-na.amazon.com<br>user-agent： My Selling Tool/2.0 (Language=Java/1.8.0.221;Platform=Windows/10)<br>x-amz-access-token=Atza|IQEBLjAsAhRmHjNgHpi0U-Dme37rR6CuUpSREXAMPLE<br>x-amz-date: 20201225T123600Z<br></code></pre></div></td></tr></table></figure><h2 id="示例请求-Order-URL✍"><a href="#示例请求-Order-URL✍" class="headerlink" title="示例请求 Order URL✍"></a><font color="#008080">示例请求 Order URL✍</font></h2><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx">返回在指定参数指示的时间范围内创建或更新的订单。您还可以应用一系列过滤条件来缩小返回的订单列表。如果存在NextToken，它将用于检索订单而不是其他条件。<br></code></pre></div></td></tr></table></figure><p><strong>Request:☟</strong></p><table><thead><tr><th>URL</th><th><a href="https://sellingpartnerapi-na.amazon.com/orders/v0/orders?MarketplaceIds=ATVPDKIKX0DER&amp;CreatedAfter=2020-06-06">https://sellingpartnerapi-na.amazon.com/orders/v0/orders?MarketplaceIds=ATVPDKIKX0DER&amp;CreatedAfter=2020-06-06</a></th></tr></thead><tbody><tr><td><strong>Message</strong></td><td>返回某时间段开始之后 或者之前的订单</td></tr><tr><td><strong>Request</strong></td><td><strong>GET</strong></td></tr><tr><td><strong>URI</strong></td><td><strong>/orders/v0/orders</strong></td></tr></tbody></table><p><strong>Parameter:☟</strong></p><table><thead><tr><th>key</th><th>value</th><th>备注</th></tr></thead><tbody><tr><td>MarketplaceIds</td><td>ATVPDKIKX0DER</td><td>市场编号 MarketplaceId值的列表。用于选择放置在指定市场中的订单。</td></tr></tbody></table><p><strong>Optional parameters:☟</strong></p><table><thead><tr><th>key</th><th align="center">value</th><th>备注</th></tr></thead><tbody><tr><td><strong>CreatedAfter</strong></td><td align="center">2020-12-25</td><td>用于选择在指定时间之后（或之后）创建的订单的日期。仅返回指定时间之后下的订单。需要CreatedAfter参数或LastUpdatedAfter参数。两者都不能为空。日期必须为ISO 8601格式。</td></tr><tr><td><strong>CreatedBefore</strong></td><td align="center">2020-12-25</td><td>用于选择在指定时间之前（或指定时间）创建的订单的日期。仅返回指定时间之前下的订单。日期必须为ISO 8601格式。</td></tr><tr><td><strong>LastUpdatedAfter</strong></td><td align="center">2020-12-25</td><td>用于选择在指定时间（或之后）最后更新的订单的日期。更新被定义为订单状态的任何更改，包括创建新订单。包括亚马逊和卖方所做的更新。日期必须为ISO 8601格式。</td></tr><tr><td><strong>LastUpdatedBefore</strong></td><td align="center">2020-12-25</td><td>用于选择在指定时间之前（或指定时间）最后更新的订单的日期。更新被定义为订单状态的任何更改，包括创建新订单。包括亚马逊和卖方所做的更新。日期必须为ISO 8601格式。</td></tr><tr><td><strong>OrderStatuses</strong></td><td align="center">Shipped(已发货)</td><td>用于过滤结果的OrderStatus值列表。可能的值：PendingAvailability（此状态仅适用于预购。已下达订单，未授权付款，并且该商品的发布日期在将来。）待处理（已下达订单，但未授权付款）；未发货（付款已被授权且订单已准备好发货，但订单中没有任何物品已发货）；部分发货（订单中的一个或多个（但不是全部）物品已发货）；已发货（订单中的所有物品均已发货）；未确认的发票（订单中的所有物品均已发货。卖方尚未向亚马逊确认已将发票已发货给买方。）；已取消（订单已被取消）；和无法实现（无法完成订单。</td></tr></tbody></table><p><strong>Information to be added to the header:☟</strong></p><table><thead><tr><th>key</th><th>value</th><th>备注</th></tr></thead><tbody><tr><td>x-amz-access-token</td><td>Atza|IwEBIET96fwHjZPkFq8BrGjIKNN</td><td>oauth认证后返回的access_token</td></tr><tr><td>Content-Type</td><td>application/json</td><td>json格式</td></tr><tr><td>host</td><td>sellingpartnerapi-na.amazon.com</td><td>端点 表示是在某地区的数据</td></tr><tr><td>user-agent</td><td>My Selling Tool/2.0 (Language=Java/1.8.0.221;Platform=Windows/10)</td><td>请求头信息</td></tr></tbody></table><p><strong>403 appears because the server rejected your request:☟</strong></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;errors&quot;</span>: [<br>    &#123;<br>      <span class="hljs-attr">&quot;message&quot;</span>: <span class="hljs-string">&quot;Access to requested resource is denied.&quot;</span>,<br>     <span class="hljs-attr">&quot;code&quot;</span>: <span class="hljs-string">&quot;MissingAuthenticationToken&quot;</span><br>    &#125;<br>  ]<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>Return:☟</strong></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;payload&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;NextToken&quot;</span>: <span class="hljs-string">&quot;w1/DnkAmSzGaJqJYLDm0ZAmQazDrhw3Cfm9r&quot;</span>,<br>        <span class="hljs-attr">&quot;CreatedBefore&quot;</span>: <span class="hljs-string">&quot;2020-12-25T08:54:39Z&quot;</span>,<br>        <span class="hljs-attr">&quot;Orders&quot;</span>: [<br>            &#123;<br>                <span class="hljs-attr">&quot;AmazonOrderId&quot;</span>: <span class="hljs-string">&quot;123-1234567-1234567&quot;</span>,<br>                <span class="hljs-attr">&quot;PurchaseDate&quot;</span>: <span class="hljs-string">&quot;2020-05-30T18:37:46Z&quot;</span>,<br>                <span class="hljs-attr">&quot;LastUpdateDate&quot;</span>: <span class="hljs-string">&quot;2020-06-04T14:58:04Z&quot;</span>,<br>                <span class="hljs-attr">&quot;OrderStatus&quot;</span>: <span class="hljs-string">&quot;Shipped&quot;</span>,<br>                <span class="hljs-attr">&quot;SellerOrderId&quot;</span>: <span class="hljs-string">&quot;123-1234567-1234567&quot;</span>,<br>                <span class="hljs-attr">&quot;FulfillmentChannel&quot;</span>: <span class="hljs-string">&quot;AFN&quot;</span>,<br>                <span class="hljs-attr">&quot;SalesChannel&quot;</span>: <span class="hljs-string">&quot;Amazon.com&quot;</span>,<br>                <span class="hljs-attr">&quot;ShipServiceLevel&quot;</span>: <span class="hljs-string">&quot;Expedited&quot;</span>,<br>                <span class="hljs-attr">&quot;OrderTotal&quot;</span>: &#123;<br>                    <span class="hljs-attr">&quot;CurrencyCode&quot;</span>: <span class="hljs-string">&quot;USD&quot;</span>,<br>                    <span class="hljs-attr">&quot;Amount&quot;</span>: <span class="hljs-string">&quot;7.41&quot;</span><br>                &#125;,<br>                <span class="hljs-attr">&quot;NumberOfItemsShipped&quot;</span>: <span class="hljs-number">1</span>,<br>                <span class="hljs-attr">&quot;NumberOfItemsUnshipped&quot;</span>: <span class="hljs-number">0</span>,<br>                <span class="hljs-attr">&quot;PaymentMethod&quot;</span>: <span class="hljs-string">&quot;Other&quot;</span>,<br>                <span class="hljs-attr">&quot;PaymentMethodDetails&quot;</span>: [<br>                    <span class="hljs-string">&quot;Standard&quot;</span><br>                ],<br>                <span class="hljs-attr">&quot;IsReplacementOrder&quot;</span>: <span class="hljs-string">&quot;false&quot;</span>,<br>                <span class="hljs-attr">&quot;MarketplaceId&quot;</span>: <span class="hljs-string">&quot;ATVPDKIKX0DER&quot;</span>,<br>                <span class="hljs-attr">&quot;ShipmentServiceLevelCategory&quot;</span>: <span class="hljs-string">&quot;Expedited&quot;</span>,<br>                <span class="hljs-attr">&quot;OrderType&quot;</span>: <span class="hljs-string">&quot;StandardOrder&quot;</span>,<br>                <span class="hljs-attr">&quot;EarliestShipDate&quot;</span>: <span class="hljs-string">&quot;2020-06-05T06:59:59Z&quot;</span>,<br>                <span class="hljs-attr">&quot;LatestShipDate&quot;</span>: <span class="hljs-string">&quot;2020-06-05T06:59:59Z&quot;</span>,<br>                <span class="hljs-attr">&quot;IsBusinessOrder&quot;</span>: <span class="hljs-literal">false</span>,<br>                <span class="hljs-attr">&quot;IsSoldByAB&quot;</span>: <span class="hljs-literal">false</span>,<br>                <span class="hljs-attr">&quot;IsPrime&quot;</span>: <span class="hljs-literal">false</span>,<br>                <span class="hljs-attr">&quot;IsGlobalExpressEnabled&quot;</span>: <span class="hljs-literal">false</span>,<br>                <span class="hljs-attr">&quot;IsPremiumOrder&quot;</span>: <span class="hljs-literal">false</span>,<br>                <span class="hljs-attr">&quot;IsISPU&quot;</span>: <span class="hljs-literal">false</span><br>            &#125;,<br>        ]<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="测试-获取某一个订单的路由✍"><a href="#测试-获取某一个订单的路由✍" class="headerlink" title="测试 获取某一个订单的路由✍"></a><font color="#008080">测试 获取某一个订单的路由✍</font></h2><p><strong>Request:☟</strong></p><table><thead><tr><th>URL</th><th><a href="https://sellingpartnerapi-na.amazon.com/orders/v0/orders/123-1234567-1234567">https://sellingpartnerapi-na.amazon.com/orders/v0/orders/123-1234567-1234567</a></th></tr></thead><tbody><tr><td><strong>Message</strong></td><td>返回指定订单ID指示的订单。</td></tr><tr><td><strong>Request</strong></td><td><strong>GET</strong></td></tr><tr><td><strong>URI</strong></td><td><strong>/orders/v0/orders/{orderId}</strong></td></tr></tbody></table><p><strong>Parameter:☟</strong></p><table><thead><tr><th>key</th><th>value</th><th>备注</th></tr></thead><tbody><tr><td><strong>orderId</strong></td><td>例如: 123-1234567-1234567</td><td>orderId是Amazon定义的订单标识符，格式为3-7-7。</td></tr></tbody></table><p><strong>403 appears because the server rejected your request:☟</strong></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;errors&quot;</span>: [<br>    &#123;<br>      <span class="hljs-attr">&quot;message&quot;</span>: <span class="hljs-string">&quot;Access to requested resource is denied.&quot;</span>,<br>     <span class="hljs-attr">&quot;code&quot;</span>: <span class="hljs-string">&quot;MissingAuthenticationToken&quot;</span><br>    &#125;<br>  ]<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>RETURN:☟</strong></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;payload&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;AmazonOrderId&quot;</span>: <span class="hljs-string">&quot;114-8958394-7225852&quot;</span>,<br>        <span class="hljs-attr">&quot;PurchaseDate&quot;</span>: <span class="hljs-string">&quot;2020-06-06T00:52:43Z&quot;</span>,<br>        <span class="hljs-attr">&quot;LastUpdateDate&quot;</span>: <span class="hljs-string">&quot;2020-06-08T15:29:12Z&quot;</span>,<br>        <span class="hljs-attr">&quot;OrderStatus&quot;</span>: <span class="hljs-string">&quot;Shipped&quot;</span>,<br>        <span class="hljs-attr">&quot;SellerOrderId&quot;</span>: <span class="hljs-string">&quot;114-8958394-7225852&quot;</span>,<br>        <span class="hljs-attr">&quot;FulfillmentChannel&quot;</span>: <span class="hljs-string">&quot;AFN&quot;</span>,<br>        <span class="hljs-attr">&quot;SalesChannel&quot;</span>: <span class="hljs-string">&quot;Amazon.com&quot;</span>,<br>        <span class="hljs-attr">&quot;ShipServiceLevel&quot;</span>: <span class="hljs-string">&quot;Expedited&quot;</span>,<br>        <span class="hljs-attr">&quot;OrderTotal&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;CurrencyCode&quot;</span>: <span class="hljs-string">&quot;USD&quot;</span>,<br>            <span class="hljs-attr">&quot;Amount&quot;</span>: <span class="hljs-string">&quot;7.45&quot;</span><br>        &#125;,<br>        <span class="hljs-attr">&quot;NumberOfItemsShipped&quot;</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">&quot;NumberOfItemsUnshipped&quot;</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-attr">&quot;PaymentMethod&quot;</span>: <span class="hljs-string">&quot;Other&quot;</span>,<br>        <span class="hljs-attr">&quot;PaymentMethodDetails&quot;</span>: [<br>            <span class="hljs-string">&quot;Standard&quot;</span><br>        ],<br>        <span class="hljs-attr">&quot;IsReplacementOrder&quot;</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">&quot;MarketplaceId&quot;</span>: <span class="hljs-string">&quot;ATVPDKIKX0DER&quot;</span>,<br>        <span class="hljs-attr">&quot;ShipmentServiceLevelCategory&quot;</span>: <span class="hljs-string">&quot;Expedited&quot;</span>,<br>        <span class="hljs-attr">&quot;OrderType&quot;</span>: <span class="hljs-string">&quot;StandardOrder&quot;</span>,<br>        <span class="hljs-attr">&quot;EarliestShipDate&quot;</span>: <span class="hljs-string">&quot;2020-06-09T06:59:59Z&quot;</span>,<br>        <span class="hljs-attr">&quot;LatestShipDate&quot;</span>: <span class="hljs-string">&quot;2020-06-09T06:59:59Z&quot;</span>,<br>        <span class="hljs-attr">&quot;IsBusinessOrder&quot;</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">&quot;IsPrime&quot;</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">&quot;IsGlobalExpressEnabled&quot;</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">&quot;IsPremiumOrder&quot;</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">&quot;IsSoldByAB&quot;</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">&quot;IsISPU&quot;</span>: <span class="hljs-literal">false</span><br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="测试-某一个订单的-买家信息✍"><a href="#测试-某一个订单的-买家信息✍" class="headerlink" title="测试 某一个订单的 买家信息✍"></a><font color="#008080">测试 某一个订单的 买家信息✍</font></h2><p><strong>Request:☟</strong></p><table><thead><tr><th>URL</th><th><a href="https://sellingpartnerapi-na.amazon.com/orders/v0/orders/123-1234567-1234567/buyerInfo">https://sellingpartnerapi-na.amazon.com/orders/v0/orders/123-1234567-1234567/buyerInfo</a></th></tr></thead><tbody><tr><td><strong>Message</strong></td><td>返回指定订单ID指示的订单的买家信息。</td></tr><tr><td><strong>Request</strong></td><td><strong>GET</strong></td></tr><tr><td><strong>URI</strong></td><td><strong>/orders/v0/orders/{orderId}/buyerInfo</strong></td></tr></tbody></table><p><strong>Parameter:☟</strong></p><table><thead><tr><th>key</th><th>value</th><th>备注</th></tr></thead><tbody><tr><td><strong>orderId</strong></td><td>例如: 123-1234567-1234567</td><td>orderId是Amazon定义的订单标识符，格式为3-7-7。</td></tr></tbody></table><p><strong>403 appears because the server rejected your request:☟</strong></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;errors&quot;</span>: [<br>    &#123;<br>      <span class="hljs-attr">&quot;message&quot;</span>: <span class="hljs-string">&quot;Access to requested resource is denied.&quot;</span>,<br>     <span class="hljs-attr">&quot;code&quot;</span>: <span class="hljs-string">&quot;MissingAuthenticationToken&quot;</span><br>    &#125;<br>  ]<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>RETURN:☟</strong></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;payload&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;AmazonOrderId&quot;</span>: <span class="hljs-string">&quot;123-1234567-1234567&quot;</span>,<br>        <span class="hljs-attr">&quot;BuyerEmail&quot;</span>: <span class="hljs-string">&quot;*********@marketplace.amazon.com&quot;</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="测试请求-某一个订单的送货地址✍"><a href="#测试请求-某一个订单的送货地址✍" class="headerlink" title="测试请求 某一个订单的送货地址✍"></a><font color="#008080">测试请求 某一个订单的送货地址✍</font></h2><p><strong>Request:☟</strong></p><table><thead><tr><th>URL</th><th><a href="https://sellingpartnerapi-na.amazon.com/orders/v0/orders/123-1234567-1234567/address">https://sellingpartnerapi-na.amazon.com/orders/v0/orders/123-1234567-1234567/address</a></th></tr></thead><tbody><tr><td><strong>Message</strong></td><td>返回指定订单ID指示的订单的送货地址。</td></tr><tr><td><strong>Request</strong></td><td><strong>GET</strong></td></tr><tr><td><strong>URI</strong></td><td><strong>/orders/v0/orders/{orderId}/address</strong></td></tr></tbody></table><p><strong>Parameter:☟</strong></p><table><thead><tr><th>key</th><th>value</th><th>备注</th></tr></thead><tbody><tr><td><strong>orderId</strong></td><td>例如: 123-1234567-1234567</td><td>orderId是Amazon定义的订单标识符，格式为3-7-7。</td></tr></tbody></table><p><strong>403 appears because the server rejected your request:☟</strong></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;errors&quot;</span>: [<br>    &#123;<br>      <span class="hljs-attr">&quot;message&quot;</span>: <span class="hljs-string">&quot;Access to requested resource is denied.&quot;</span>,<br>     <span class="hljs-attr">&quot;code&quot;</span>: <span class="hljs-string">&quot;MissingAuthenticationToken&quot;</span><br>    &#125;<br>  ]<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>RETURN:☟</strong></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;payload&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;AmazonOrderId&quot;</span>: <span class="hljs-string">&quot;123-1234567-1234567&quot;</span>,<br>        <span class="hljs-attr">&quot;ShippingAddress&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;StateOrRegion&quot;</span>: <span class="hljs-string">&quot;TX&quot;</span>,<br>            <span class="hljs-attr">&quot;PostalCode&quot;</span>: <span class="hljs-string">&quot;xxxx-xxx&quot;</span>,<br>            <span class="hljs-attr">&quot;City&quot;</span>: <span class="hljs-string">&quot;DALLAS&quot;</span>,<br>            <span class="hljs-attr">&quot;CountryCode&quot;</span>: <span class="hljs-string">&quot;US&quot;</span>,<br>            <span class="hljs-attr">&quot;Name&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="测试请求-某个订单的-商品信息✍"><a href="#测试请求-某个订单的-商品信息✍" class="headerlink" title="测试请求 某个订单的 商品信息✍"></a><font color="#008080">测试请求 某个订单的 商品信息✍</font></h2><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx">注意：当订单处于待处理状态（已下达订单但未授权付款）时，getOrderItems操作不会返回有关订单中订单项的价格，税金，运费，礼品状态或促销的信息。订单离开待处理状态（授权付款后会发生）并进入未发货，部分发货或已发货状态后，getOrderItems操作将返回有关以下商品的价格，税金，运费，礼品状态和促销的信息命令。<br></code></pre></div></td></tr></table></figure><p><strong>Request:☟</strong></p><table><thead><tr><th>URL</th><th><a href="https://sellingpartnerapi-na.amazon.com/orders/v0/orders/123-1234567-1234567/orderItems">https://sellingpartnerapi-na.amazon.com/orders/v0/orders/123-1234567-1234567/orderItems</a></th></tr></thead><tbody><tr><td><strong>Message</strong></td><td>返回指定订单ID指示的订单的详细订单商品信息。如果提供了NextToken，则用于检索订单项的下一页。</td></tr><tr><td><strong>Request</strong></td><td><strong>GET</strong></td></tr><tr><td><strong>URI</strong></td><td><strong>/ orders / v0 / orders / {orderId} / orderItems</strong></td></tr></tbody></table><p><strong>Parameter:☟</strong></p><table><thead><tr><th>Type</th><th>Name</th><th>Description</th><th>Schema</th></tr></thead><tbody><tr><td><strong>Path</strong></td><td><strong>orderId</strong> <em>required</em></td><td>Amazon定义的订单标识符，格式为3-7-7。例如: 123-1234567-1234567</td><td>string</td></tr><tr><td><strong>Query</strong></td><td><strong>NextToken</strong> <em>optional</em></td><td>您先前请求的响应中返回的字符串令牌。</td><td>string</td></tr></tbody></table><p><strong>403 appears because the server rejected your request:☟</strong></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;errors&quot;</span>: [<br>    &#123;<br>      <span class="hljs-attr">&quot;message&quot;</span>: <span class="hljs-string">&quot;Access to requested resource is denied.&quot;</span>,<br>     <span class="hljs-attr">&quot;code&quot;</span>: <span class="hljs-string">&quot;MissingAuthenticationToken&quot;</span><br>    &#125;<br>  ]<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>RETURN:☟</strong></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;payload&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;AmazonOrderId&quot;</span>: <span class="hljs-string">&quot;113-*******-*******&quot;</span>,<br>        <span class="hljs-attr">&quot;OrderItems&quot;</span>: [<br>            &#123;<br>                <span class="hljs-attr">&quot;ASIN&quot;</span>: <span class="hljs-string">&quot;B088KFYF3X&quot;</span>,<br>                <span class="hljs-attr">&quot;OrderItemId&quot;</span>: <span class="hljs-string">&quot;32********&quot;</span>,<br>                <span class="hljs-attr">&quot;SellerSKU&quot;</span>: <span class="hljs-string">&quot;KFK-3&quot;</span>,<br>                <span class="hljs-attr">&quot;Title&quot;</span>: <span class="hljs-string">&quot;Ldealpro message&quot;</span>,<br>                <span class="hljs-attr">&quot;QuantityOrdered&quot;</span>: <span class="hljs-number">1</span>,<br>                <span class="hljs-attr">&quot;QuantityShipped&quot;</span>: <span class="hljs-number">1</span>,<br>                <span class="hljs-attr">&quot;ProductInfo&quot;</span>: &#123;<br>                    <span class="hljs-attr">&quot;NumberOfItems&quot;</span>: <span class="hljs-string">&quot;1&quot;</span><br>                &#125;,<br>                <span class="hljs-attr">&quot;ItemPrice&quot;</span>: &#123;<br>                    <span class="hljs-attr">&quot;CurrencyCode&quot;</span>: <span class="hljs-string">&quot;USD&quot;</span>,<br>                    <span class="hljs-attr">&quot;Amount&quot;</span>: <span class="hljs-string">&quot;6.99&quot;</span><br>                &#125;,<br>                <span class="hljs-attr">&quot;TaxCollection&quot;</span>: &#123;<br>                    <span class="hljs-attr">&quot;Model&quot;</span>: <span class="hljs-string">&quot;MarketplaceFacilitator&quot;</span>,<br>                    <span class="hljs-attr">&quot;ResponsibleParty&quot;</span>: <span class="hljs-string">&quot;Amazon Services, Inc.&quot;</span><br>                &#125;,<br>                <span class="hljs-attr">&quot;ItemTax&quot;</span>: &#123;<br>                    <span class="hljs-attr">&quot;CurrencyCode&quot;</span>: <span class="hljs-string">&quot;USD&quot;</span>,<br>                    <span class="hljs-attr">&quot;Amount&quot;</span>: <span class="hljs-string">&quot;0.58&quot;</span><br>                &#125;,<br>                <span class="hljs-attr">&quot;PromotionDiscount&quot;</span>: &#123;<br>                    <span class="hljs-attr">&quot;CurrencyCode&quot;</span>: <span class="hljs-string">&quot;USD&quot;</span>,<br>                    <span class="hljs-attr">&quot;Amount&quot;</span>: <span class="hljs-string">&quot;0.00&quot;</span><br>                &#125;,<br>                <span class="hljs-attr">&quot;PromotionDiscountTax&quot;</span>: &#123;<br>                    <span class="hljs-attr">&quot;CurrencyCode&quot;</span>: <span class="hljs-string">&quot;USD&quot;</span>,<br>                    <span class="hljs-attr">&quot;Amount&quot;</span>: <span class="hljs-string">&quot;0.00&quot;</span><br>                &#125;,<br>                <span class="hljs-attr">&quot;IsGift&quot;</span>: <span class="hljs-string">&quot;false&quot;</span>,<br>                <span class="hljs-attr">&quot;IsTransparency&quot;</span>: <span class="hljs-literal">false</span>,<br>                <span class="hljs-attr">&quot;SerialNumberRequired&quot;</span>: <span class="hljs-literal">false</span><br>            &#125;<br>        ]<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="测试请求某个订单的订单项中的买家信息✍"><a href="#测试请求某个订单的订单项中的买家信息✍" class="headerlink" title="测试请求某个订单的订单项中的买家信息✍"></a><font color="#008080">测试请求某个订单的订单项中的买家信息✍</font></h2><p><strong>Request:☟</strong></p><table><thead><tr><th>URL</th><th><a href="https://sellingpartnerapi-na.amazon.com/orders/v0/orders/113-1234567-1234567/orderItems/buyerInfo">https://sellingpartnerapi-na.amazon.com/orders/v0/orders/113-1234567-1234567/orderItems/buyerInfo</a></th></tr></thead><tbody><tr><td><strong>Message</strong></td><td>返回指定订单ID指示的订单的订单项中的买家信息。</td></tr><tr><td><strong>Request</strong></td><td><strong>GET</strong></td></tr><tr><td><strong>URI</strong></td><td><strong>/orders/v0/orders/{orderId}/orderItems/buyerInfo</strong></td></tr></tbody></table><p><strong>Parameter:☟</strong></p><table><thead><tr><th>Type</th><th>Name</th><th>Description</th><th>Schema</th></tr></thead><tbody><tr><td><strong>Path</strong></td><td><strong>orderId</strong> <em>required</em></td><td>Amazon定义的订单标识符，格式为3-7-7。例如: 123-1234567-1234567</td><td>string</td></tr><tr><td><strong>Query</strong></td><td><strong>NextToken</strong> <em>optional</em></td><td>您先前请求的响应中返回的字符串令牌。</td><td>string</td></tr></tbody></table><p><strong>403 appears because the server rejected your request:☟</strong></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;errors&quot;</span>: [<br>    &#123;<br>      <span class="hljs-attr">&quot;message&quot;</span>: <span class="hljs-string">&quot;Access to requested resource is denied.&quot;</span>,<br>     <span class="hljs-attr">&quot;code&quot;</span>: <span class="hljs-string">&quot;MissingAuthenticationToken&quot;</span><br>    &#125;<br>  ]<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>RETURN:☟</strong></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;payload&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;OrderItems&quot;</span>: [<br>            &#123;<br>                <span class="hljs-attr">&quot;OrderItemId&quot;</span>: <span class="hljs-string">&quot;3277********&quot;</span><br>            &#125;<br>        ],<br>        <span class="hljs-attr">&quot;AmazonOrderId&quot;</span>: <span class="hljs-string">&quot;113-*******-*******&quot;</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>SPAPI</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Django Uwsgi Nginx Https 多站点部署项目</title>
    <link href="/2021/03/09/%E5%A4%9A%E7%AB%99%E7%82%B9%E9%83%A8%E7%BD%B2/"/>
    <url>/2021/03/09/%E5%A4%9A%E7%AB%99%E7%82%B9%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="同服务器内-多站点-多项目-部署✍"><a href="#同服务器内-多站点-多项目-部署✍" class="headerlink" title="同服务器内 多站点(多项目)部署✍"></a><font color="#008080">同服务器内 多站点(多项目)部署✍</font></h2><p><code>前情提要</code></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">本章使用的SSL证书为 腾讯云(但其实基本都一样 就是后缀不同)<br>同一个服务器下 多个站点(项目)部署<br></code></pre></div></td></tr></table></figure><h2 id="进入-etc-nginx-改造文件nginx-conf✍"><a href="#进入-etc-nginx-改造文件nginx-conf✍" class="headerlink" title="进入/etc/nginx/ 改造文件nginx.conf✍"></a><font color="#008080">进入/etc/nginx/ 改造文件nginx.conf✍</font></h2><p><code>新项目的uwsgi</code></p><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx">[uwsgi]<br><span class="hljs-comment">#配置和nginx连接的socket连接</span><br>socket=127.0.0.1:8888<br><span class="hljs-comment">#配置项目路径，项目的所在目录</span><br>chdir=/home/ubuntu/xxx<br><span class="hljs-comment">#配置wsgi接口模块文件路径,也就是wsgi.py这个文件所在的目录名</span><br>wsgi-file=xxx/wsgi.py<br><span class="hljs-comment">#配置启动的进程数</span><br>processes=4<br><span class="hljs-comment">#配置每个进程的线程数</span><br>threads=2<br><span class="hljs-comment">#配置启动管理主进程</span><br>master=True<br><span class="hljs-comment"># 不记录request日志，只记录错误日志</span><br>disable-logging=true<br><span class="hljs-comment"># 优雅重启</span><br>lazy-apps=true<br><span class="hljs-comment">#配置存放主进程的进程号文件</span><br>pidfile=uwsgi.pid<br><span class="hljs-comment">#配置dump日志记录</span><br>daemonize=uwsgi.log<br><br></code></pre></div></td></tr></table></figure><h2 id="进入-etc-nginx-改造文件nginx-conf✍-1"><a href="#进入-etc-nginx-改造文件nginx-conf✍-1" class="headerlink" title="进入/etc/nginx/ 改造文件nginx.conf✍"></a><font color="#008080">进入/etc/nginx/ 改造文件nginx.conf✍</font></h2><table><thead><tr><th>添加</th><th>VALUE</th><th>备注</th><th>是/否</th></tr></thead><tbody><tr><td><strong>include</strong></td><td><strong>/etc/nginx/conf.d/*.conf;</strong></td><td><strong>目的:把新建的配置文件包含进来</strong></td><td><strong>Y</strong></td></tr></tbody></table><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-comment">##### 原文件 nginx.conf 的样板</span><br><span class="hljs-comment">##### 注意需要修改的地方</span><br><span class="hljs-comment">#server_name</span><br><span class="hljs-comment">#uwsgi_param UWSGI_SCRIPT</span><br><span class="hljs-comment">#uwsgi_param UWSGI_CHDIR</span><br><span class="hljs-comment">#alias</span><br><span class="hljs-comment">#443</span><br><br><span class="hljs-attribute">user</span> root;<br><span class="hljs-section">events</span> &#123;<br><span class="hljs-attribute">worker_connections</span>  <span class="hljs-number">1024</span>;<br>&#125;<br><span class="hljs-section">http</span> &#123;<br>    <span class="hljs-attribute">include</span>       mime.types;<br>    <span class="hljs-attribute">include</span> /etc/nginx/conf.d/<span class="hljs-regexp">*.conf</span>; <span class="hljs-comment">#主要是这个地方，把新建的配置文件包含进来</span><br>    <span class="hljs-attribute">default_type</span>  application/octet-stream;<br>    <span class="hljs-attribute">sendfile</span>        <span class="hljs-literal">on</span>;<br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>        <span class="hljs-attribute">server_name</span>  域名;<br>        <span class="hljs-attribute">charset</span> utf-<span class="hljs-number">8</span>;<br>        <span class="hljs-attribute">location</span> / &#123;<br>           <span class="hljs-attribute">include</span> uwsgi_params;<br>           <span class="hljs-attribute">uwsgi_pass</span> <span class="hljs-number">127.0.0.1:8080</span>;<br>           <span class="hljs-attribute">uwsgi_param</span> UWSGI_SCRIPT xxx.wsgi;<br>           <span class="hljs-attribute">uwsgi_param</span> UWSGI_CHDIR /home/ubuntu/xxx/; <span class="hljs-comment">#项目路径</span><br>        <span class="hljs-attribute">location</span> /static/ &#123;<br>            <span class="hljs-attribute">alias</span> /home/ubuntu/xxx/static/; <span class="hljs-comment">#静态资源路径</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^(.*)$</span>  https://$host<span class="hljs-variable">$1</span> <span class="hljs-literal">permanent</span>;<br>    &#125;<br><br>    <span class="hljs-section">server</span> &#123;<br>      <span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> ssl;<br>      <span class="hljs-attribute">server_name</span> bree.vip;<br>      <span class="hljs-attribute">ssl</span> <span class="hljs-literal">on</span>;<br>      <span class="hljs-attribute">ssl_certificate</span> /etc/nginx/ssl/xxx.crt; <span class="hljs-comment">#这里是ssl key文件存放的绝对路径，根据自己的文件名称和路径来写</span><br>      <span class="hljs-attribute">ssl_certificate_key</span> /etc/nginx/ssl/xxx.key; <span class="hljs-comment">#这里是ssl pem文件存放的绝对路径，根据自己的文件名称和路径来写</span><br>      <span class="hljs-attribute">ssl_session_cache</span> shared:SSL:<span class="hljs-number">1m</span>;<br>      <span class="hljs-attribute">ssl_session_timeout</span> <span class="hljs-number">5m</span>;<br>      <span class="hljs-attribute">ssl_ciphers</span> HIGH:!aNULL:!MD5;<br>      <span class="hljs-attribute">ssl_prefer_server_ciphers</span> <span class="hljs-literal">on</span>;<br>      <span class="hljs-attribute">location</span> / &#123;<br>             <span class="hljs-attribute">include</span> uwsgi_params;<br>             <span class="hljs-attribute">uwsgi_pass</span> <span class="hljs-number">127.0.0.1:8080</span>;<br>             <span class="hljs-attribute">uwsgi_param</span> UWSGI_SCRIPT xxx.wsgi;<br>             <span class="hljs-attribute">uwsgi_param</span> UWSGI_CHDIR /home/ubuntu/xxx/; <span class="hljs-comment">#项目路径</span><br><br>             <span class="hljs-attribute">location</span> /static/ &#123;<br>                 <span class="hljs-attribute">alias</span> /home/ubuntu/xxx/static/; <span class="hljs-comment">#静态资源路径</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br></code></pre></div></td></tr></table></figure><h2 id="在-etc-nginx-下有个conf-d文件夹-可以在里面放多个-conf配置文件✍"><a href="#在-etc-nginx-下有个conf-d文件夹-可以在里面放多个-conf配置文件✍" class="headerlink" title="在/etc/nginx/下有个conf.d文件夹 可以在里面放多个*.conf配置文件✍"></a><font color="#008080">在/etc/nginx/下有个conf.d文件夹 可以在里面放多个*.conf配置文件✍</font></h2><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-comment">##### 注意 当前的配置 就是第二个站点(项目)的</span><br><span class="hljs-comment">##### 当前只需要 server&#123;&#125; 即可 因nginx.conf里面配置了include /etc/nginx/conf.d/*.conf</span><br><br><br><span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>        <span class="hljs-attribute">server_name</span>  第二个项目的域名;<br>        <span class="hljs-attribute">charset</span> utf-<span class="hljs-number">8</span>;<br>        <span class="hljs-attribute">location</span> / &#123;<br>           <span class="hljs-attribute">include</span> uwsgi_params;<br>           <span class="hljs-attribute">uwsgi_pass</span> <span class="hljs-number">127.0.0.1:8888</span>;<br>           <span class="hljs-attribute">uwsgi_param</span> UWSGI_SCRIPT xxx.wsgi;<br>           <span class="hljs-attribute">uwsgi_param</span> UWSGI_CHDIR /home/ubuntu/xxx/; <span class="hljs-comment">#项目路径</span><br>        <span class="hljs-attribute">location</span> /static/ &#123;<br>            <span class="hljs-attribute">alias</span> /home/ubuntu/xxx/static/; <span class="hljs-comment">#静态资源路径</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^(.*)$</span>  https://$host<span class="hljs-variable">$1</span> <span class="hljs-literal">permanent</span>;<br>    &#125;<br><br>    <span class="hljs-section">server</span> &#123;<br>      <span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> ssl;<br>      <span class="hljs-attribute">server_name</span> 第二个项目的域名;<br>      <span class="hljs-attribute">ssl</span> <span class="hljs-literal">on</span>;<br>      <span class="hljs-attribute">ssl_certificate</span> /etc/nginx/ssl/xxx.crt; <span class="hljs-comment">#这里是第二个项目的ssl证书crt</span><br>      <span class="hljs-attribute">ssl_certificate_key</span> /etc/nginx/ssl/xxx.key; <span class="hljs-comment">#这里是第二个项目的ssl证书key</span><br>      <span class="hljs-attribute">ssl_session_cache</span> shared:SSL:<span class="hljs-number">1m</span>;<br>      <span class="hljs-attribute">ssl_session_timeout</span> <span class="hljs-number">5m</span>;<br>      <span class="hljs-attribute">ssl_ciphers</span> HIGH:!aNULL:!MD5;<br>      <span class="hljs-attribute">ssl_prefer_server_ciphers</span> <span class="hljs-literal">on</span>;<br>      <span class="hljs-attribute">location</span> / &#123;<br>             <span class="hljs-attribute">include</span> uwsgi_params;<br>             <span class="hljs-attribute">uwsgi_pass</span> <span class="hljs-number">127.0.0.1:8888</span>;<br>             <span class="hljs-attribute">uwsgi_param</span> UWSGI_SCRIPT xxx.wsgi;<br>             <span class="hljs-attribute">uwsgi_param</span> UWSGI_CHDIR /home/ubuntu/xxx/; <span class="hljs-comment">#项目路径</span><br><br>             <span class="hljs-attribute">location</span> /static/ &#123;<br>                 <span class="hljs-attribute">alias</span> /home/ubuntu/xxx/static/; <span class="hljs-comment">#静态资源路径</span><br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></div></td></tr></table></figure><h2 id="nginx-amp-uwsgi的开启✍"><a href="#nginx-amp-uwsgi的开启✍" class="headerlink" title="nginx&amp;uwsgi的开启✍"></a><font color="#008080">nginx&amp;uwsgi的开启✍</font></h2><p><code>检测nginx是否配置成功 命令:sudo nginx -t</code></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">注意权限</span><br>(django2) ubuntu@VM-8-16-ubuntu:/etc/nginx$ sudo nginx -t<br><br>nginx: the configuration file /etc/nginx/nginx.conf syntax is ok<br>nginx: configuration file /etc/nginx/nginx.conf test is successful<br></code></pre></div></td></tr></table></figure><p><strong><code>重启或者启动nginx 命令:sudo /etc/init.d/nginx restart</code></strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">如果之前开启着nginx</span><br>(django2) ubuntu@VM-8-16-ubuntu:/etc/nginx/conf.d$ sudo /etc/init.d/nginx restart<br><br>[ ok ] Restarting nginx (via systemctl): nginx.service.<br><br><span class="hljs-meta">#</span><span class="bash">开启 命令: sudo /etc/init.d/nginx start</span><br>(django2) ubuntu@VM-8-16-ubuntu:/etc/nginx/conf.d$ sudo /etc/init.d/nginx start<br></code></pre></div></td></tr></table></figure><h2 id="上传文件的大小限制-Nginx✍"><a href="#上传文件的大小限制-Nginx✍" class="headerlink" title="上传文件的大小限制-Nginx✍"></a><font color="#008080">上传文件的大小限制-Nginx✍</font></h2><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-comment">#在nginx.conf文件里面 新增配置</span><br><br>client_max_body_size 8M;(配置请求体缓存区大小, 不配的话) <br>client_body_buffer_size 128k;(设置客户端请求体最大值) <br><span class="hljs-attribute">fastcgi_intercept_errors</span> <span class="hljs-literal">on</span>;<br><br><span class="hljs-comment">#重启Nginx即可 sudo /etc/init.d/nginx start</span><br></code></pre></div></td></tr></table></figure><blockquote><p><code>注意开放端口 8888</code></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python SPAPI-OAUTH认证</title>
    <link href="/2021/03/09/spapi-OAUTH%E8%AE%A4%E8%AF%81/"/>
    <url>/2021/03/09/spapi-OAUTH%E8%AE%A4%E8%AF%81/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Oauth-认证Amazon-access-token☟"><a href="#Oauth-认证Amazon-access-token☟" class="headerlink" title="Oauth 认证Amazon access_token☟"></a><font color="#008080">Oauth 认证Amazon access_token☟</font></h2><p><code>前情提要</code></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx">销售伙伴 API 是一个基于 REST 的 API，亚马逊卖家可以使用这些接口，以编程方式访问他们有关商品、订单、付款、报告等的数据。使用销售伙伴 API 的应用程序可以提高销售效率，减少人力需求并缩短响应客户的时间，从而帮助卖家发展业务。销售伙伴 API 基于亚马逊商城网络服务（亚马逊 MWS）的功能构建，但提供了一些功能，帮助开发者及其卖家合作伙伴提高可用性和安全性。<br></code></pre></div></td></tr></table></figure><blockquote><p>本章 只作为一些记录</p></blockquote><h3 id="☛点击查看SP-API文档"><a href="#☛点击查看SP-API文档" class="headerlink" title="☛点击查看SP-API文档"></a><a href="https://github.com/amzn/selling-partner-api-docs/tree/main/guides/developer-guide">☛点击查看SP-API文档</a></h3><h3 id="☛点击获取postman"><a href="#☛点击获取postman" class="headerlink" title="☛点击获取postman"></a><a href="https://www.postman.com/downloads/">☛点击获取postman</a></h3><h2 id="获取Access-token"><a href="#获取Access-token" class="headerlink" title="获取Access_token"></a><font color="#008080">获取Access_token</font></h2><p><code>前情提要</code></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx">通过授权后 获取返回的值里面 会带有 access_token 参数的值<br>sp-api文档里面已经给出了一些需要的参数<br></code></pre></div></td></tr></table></figure><h2 id="请求“使用亚马逊账户登录”访问令牌"><a href="#请求“使用亚马逊账户登录”访问令牌" class="headerlink" title="请求“使用亚马逊账户登录”访问令牌"></a><font color="#008080">请求“使用亚马逊账户登录”访问令牌</font></h2><p><code>要请求 LWA 访问令牌，请使用以下参数向 LWA 身份验证服务器 创建一个安全的请求</code></p><table><thead><tr><th align="center"><strong>名称</strong></th><th align="center"><strong>描述</strong></th><th align="center"><strong>必须项</strong></th></tr></thead><tbody><tr><td align="center">URL</td><td align="center"><a href="https://api.amazon.com/auth/o2/token">https://api.amazon.com/auth/o2/token</a></td><td align="center">获取access_token的URL</td></tr><tr><td align="center"><strong>grant_type</strong></td><td align="center">请求的访问授权类型。值：<br /><em>refresh_token</em>。这用于调用需要卖家授权的操作。所有非<a href="https://github.com/amzn/selling-partner-api-docs/blob/main/guides/developer-guide/SellingPartnerApiDeveloperGuide(%E4%B8%AD%E6%96%87).md#grantless-operations-1">免授权操作</a>的操作都需要卖家授权。指定此值时，请包括 <em>refresh_token</em> 参数。 <em>client_credentials</em>。这用于调用<a href="https://github.com/amzn/selling-partner-api-docs/blob/main/guides/developer-guide/SellingPartnerApiDeveloperGuide(%E4%B8%AD%E6%96%87).md#grantless-operations-1">免授权操作</a>。指定此值时，请包括 <code>scope</code> 参数。</td><td align="center">是</td></tr><tr><td align="center"><strong>refresh_token</strong></td><td align="center">LWA 刷新令牌。当卖家授权您的应用程序时，可以获得该值。有关更多信息，请参阅<a href="https://github.com/amzn/selling-partner-api-docs/blob/main/guides/developer-guide/SellingPartnerApiDeveloperGuide(%E4%B8%AD%E6%96%87).md#authorizing-selling-partner-api-applications">授权销售伙伴 API 应用程序</a>。</td><td align="center">否。包括用于调用需要卖家授权的操作的 refresh_token。如果包含 refresh_token，请不要包含 scope。</td></tr><tr><td align="center"><strong>scope</strong></td><td align="center">LWA 授权范围。值：<br /><em>sellingpartnerapi::notifications</em>。对于通知 API。 <em>sellingpartnerapi::migration</em>。对于授权 API。</td><td align="center">否。包含 scope 以调用 <a href="https://github.com/amzn/selling-partner-api-docs/blob/main/guides/developer-guide/SellingPartnerApiDeveloperGuide(%E4%B8%AD%E6%96%87).md#grantless-operations-1">免授权</a><a href="https://github.com/amzn/selling-partner-api-docs/blob/main/guides/developer-guide/SellingPartnerApiDeveloperGuide(%E4%B8%AD%E6%96%87).md#grantless-operations-1">操作</a>。如果包含 scope，请不要包含 refresh_token。</td></tr><tr><td align="center"><strong>client_id</strong></td><td align="center">注册应用程序时获取该值。请参阅<a href="https://github.com/amzn/selling-partner-api-docs/blob/main/guides/developer-guide/SellingPartnerApiDeveloperGuide(%E4%B8%AD%E6%96%87).md#viewing-your-developer-information">查看您的开发者信息</a>。</td><td align="center">是</td></tr><tr><td align="center"><strong>client_secret</strong></td><td align="center">注册应用程序时获取该值。请参阅<a href="https://github.com/amzn/selling-partner-api-docs/blob/main/guides/developer-guide/SellingPartnerApiDeveloperGuide(%E4%B8%AD%E6%96%87).md#viewing-your-developer-information">查看您的开发者信息</a>。</td><td align="center">是</td></tr></tbody></table><p><code>调用授权的示例</code></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">POST /auth/o2/token HTTP/l.l<br>Host: api.amazon.com<br>Content-Type: application/x-www-form-urlencoded;charset=UTF-<span class="hljs-number">8</span><br>grant_type=refresh_token<br>&amp;refresh_token=Aztr|...<br>&amp;client_id=foodev<br>&amp;client_secret=Y76SDl2F<br></code></pre></div></td></tr></table></figure><p><code>成功的响应包括以下值。</code></p><table><thead><tr><th><strong>名称</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>access_token</strong></td><td>LWA 访问令牌。最大大小： 2048 字节。</td></tr><tr><td><strong>token_type</strong></td><td>返回的令牌类型。必须是 <em>bearer</em>。</td></tr><tr><td><strong>expires_in</strong></td><td>LWA 访问令牌失效之前的秒数。</td></tr><tr><td><strong>refresh_token</strong></td><td>您在请求中提交的 LWA 访问令牌。最大大小： 2048 字节。</td></tr></tbody></table><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">HTTP/l.l 200 OK<br>Content-Type: application/json;charset UTF-8<br>Cache-Control: no-store<br>Pragma:no-cache<br>&#123;<br>  <span class="hljs-attr">&quot;access_token&quot;</span>:<span class="hljs-string">&quot;Atza|IQEBLjAsAhRmHjNgHpi0U-Dme37rR6CuUpSREXAMPLE&quot;</span>,<br>  <span class="hljs-attr">&quot;token_type&quot;</span>:<span class="hljs-string">&quot;bearer&quot;</span>,<br>  <span class="hljs-attr">&quot;expires_in&quot;</span>:<span class="hljs-number">3600</span>,<br>  <span class="hljs-attr">&quot;refresh_token&quot;</span>:<span class="hljs-string">&quot;Atzr|IQEBLzAtAhRPpMJxdwVz2Nn6f2y-tpJX2DeXEXAMPLE&quot;</span><br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>有关更多信息，请访问《使用亚马逊账户登录》文档中的<a href="https://developer.amazon.com/docs/login-with-amazon/authorization-code-grant.html">授权代码授权</a>页面</p></blockquote><h2 id="构造销售伙伴API-URL☟"><a href="#构造销售伙伴API-URL☟" class="headerlink" title="构造销售伙伴API URL☟"></a><font color="#008080">构造销售伙伴API URL☟</font></h2><p><code>以下为 销售伙伴api URL的参数</code></p><table><thead><tr><th><strong>名称</strong></th><th><strong>描述</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td>HTTP 方法</td><td><a href="https://github.com/amzn/selling-partner-api-docs/blob/main/guides/developer-guide/SellingPartnerApiDeveloperGuide(%E4%B8%AD%E6%96%87).md#selling-partner-api-http-methods">销售伙伴 API HTTP 方法</a>之一。</td><td><code>GET</code></td></tr><tr><td>端点</td><td><a href="https://github.com/amzn/selling-partner-api-docs/blob/main/guides/developer-guide/SellingPartnerApiDeveloperGuide(%E4%B8%AD%E6%96%87).md#Selling_Partner_API_endpoints">销售伙伴 API 端点</a>。</td><td><code>https://sellingpartnerapi-na.amazon.com</code></td></tr><tr><td>路径</td><td>销售伙伴 API 部分/该部分的版本号/资源。</td><td><code>/fba/inbound/v0/shipments/&#123;shipmentId&#125;/preorder/confirm</code></td></tr><tr><td>查询字符串</td><td>查询参数。</td><td><code>?marketplace=ATVPDKIKX0DER</code></td></tr><tr><td>路径参数</td><td>路径参数</td><td><code>shipmentId1</code></td></tr></tbody></table><p><code>例如:</code></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">https://sellingpartnerapi-na.amazon.com/orders/v0/orders?MarketplaceIds=ATVPDKIKX0DER&amp;CreatedAfter=2020-06-06<br></code></pre></div></td></tr></table></figure><h2 id="将标头添加到-URL☟"><a href="#将标头添加到-URL☟" class="headerlink" title="将标头添加到 URL☟"></a><font color="#008080">将标头添加到 URL☟</font></h2><p><code>请求的标头</code></p><table><thead><tr><th><strong>名称</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>host</td><td>商城端点。请参阅<a href="https://github.com/amzn/selling-partner-api-docs/blob/main/guides/developer-guide/SellingPartnerApiDeveloperGuide(%E4%B8%AD%E6%96%87).md#selling-partner-api-http-methods">销售伙伴 API HTTP 方法</a>。</td></tr><tr><td>x-amz-access-token</td><td>LWA 访问令牌。请参阅<a href="https://github.com/amzn/selling-partner-api-docs/blob/main/guides/developer-guide/SellingPartnerApiDeveloperGuide(%E4%B8%AD%E6%96%87).md#step-1-request-a-login-with-amazon-access-token">步骤 1：请求“使用亚马逊账户登录”访问令牌</a>。</td></tr><tr><td>x-amz-date</td><td>请求的日期和时间。</td></tr><tr><td>user-agent</td><td>您的应用程序名称和版本号、平台和编程语言。这些内容可帮助亚马逊诊断和修复您可能遇到的服务问题。请参阅<a href="https://github.com/amzn/selling-partner-api-docs/blob/main/guides/developer-guide/SellingPartnerApiDeveloperGuide(%E4%B8%AD%E6%96%87).md#include-a-user-agent-header-in-all-requests">在所有请求中</a><a href="https://github.com/amzn/selling-partner-api-docs/blob/main/guides/developer-guide/SellingPartnerApiDeveloperGuide(%E4%B8%AD%E6%96%87).md#include-a-user-agent-header-in-all-requests">包含 User-Agent 标头</a>。</td></tr></tbody></table><p><code>请求示例:</code></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">host: sellingpartnerapi-na.amazon.com<br>user-agent： My Selling Tool/<span class="hljs-number">2.0</span> (Language=Java/<span class="hljs-number">1.8</span><span class="hljs-number">.0</span><span class="hljs-number">.221</span>;Platform=Windows/<span class="hljs-number">10</span>)<br>x-amz-access-token=Atza|IQEBLjAsAhRmHjNgHpi0U-Dme37rR6CuUpSREXAMPLE<br>x-amz-date: 20201224T123600Z<br></code></pre></div></td></tr></table></figure><p><code>返回值:</code></p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;payload&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;NextToken&quot;</span>: <span class="hljs-string">&quot;MN0DDzXxPWeaJxxx&quot;</span>,<br>        <span class="hljs-attr">&quot;CreatedBefore&quot;</span>: <span class="hljs-string">&quot;2020-12-24T08:09:05Z&quot;</span>,<br>        <span class="hljs-attr">&quot;Orders&quot;</span>: [<br>            &#123;<br>                <span class="hljs-attr">&quot;AmazonOrderId&quot;</span>: <span class="hljs-string">&quot;123-1234567-1234567&quot;</span>,<br>                <span class="hljs-attr">&quot;....&quot;</span><br>            &#125;,<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>SPAPI</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Django-social实现第三方登录</title>
    <link href="/2021/03/09/django-social%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/"/>
    <url>/2021/03/09/django-social%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="使用-django-social-实现第三方登录"><a href="#使用-django-social-实现第三方登录" class="headerlink" title=" 使用 django-social 实现第三方登录 "></a><font color="#008080"> 使用 django-social 实现第三方登录 </font></h2><p><code>前情摘要</code></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx">使用 GitHub登录 -- 因为GitHub认证相对来说 是最简单的...<br>使用 weibo登录 -- 需要认证(吐..)<br>OAuth（开放授权 Open Authorization）是一个开放标准，<br>允许用户授权第三方网站访问他们存储在另外的服务提供者上的信息，<br>而不需要将用户名和密码提供给第三方网站或分享他们数据的所有内容。<br>OAuth1.0版本因为存在数据不安全的情况 已经全面使用OAuth2.0版本 <br>接下来的使用 也是根据OAuth2.0协议进行的<br></code></pre></div></td></tr></table></figure><h3 id="点击跳转-官方文档"><a href="#点击跳转-官方文档" class="headerlink" title="点击跳转 官方文档"></a><font color="#008080">点击跳转 <a href="https://python-social-auth.readthedocs.io/en/latest/configuration/django.html">官方文档</a></font></h3><h2 id="安装模块包"><a href="#安装模块包" class="headerlink" title="安装模块包"></a><font color="#008080">安装模块包</font></h2><p><font color="#4682B4">From <a href="http://pypi.python.org/pypi/social-auth-app-django/">pypi</a> </font></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">pip install social-auth-app-django<br></code></pre></div></td></tr></table></figure><h2 id="安装好之后-在settings里面配置"><a href="#安装好之后-在settings里面配置" class="headerlink" title="安装好之后 在settings里面配置"></a><font color="#008080">安装好之后 在settings里面配置</font></h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">INSTALLED_APPS = (<br>    ...<br>    <span class="hljs-string">&#x27;social_django&#x27;</span>,<br>    ...<br>)<br></code></pre></div></td></tr></table></figure><h2 id="配置一些第三方登录授权"><a href="#配置一些第三方登录授权" class="headerlink" title="配置一些第三方登录授权"></a><font color="#008080">配置一些第三方登录授权</font></h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">AUTHENTICATION_BACKENDS = (<br>    <span class="hljs-string">&#x27;allauth.account.auth_backends.AuthenticationBackend&#x27;</span>,  <span class="hljs-comment"># allauth email登录认证</span><br>    <span class="hljs-string">&#x27;social_core.backends.github.GithubOAuth2&#x27;</span>,  <span class="hljs-comment"># github</span><br>    <span class="hljs-string">&#x27;social_core.backends.weibo.WeiboOAuth2&#x27;</span>,  <span class="hljs-comment"># 微博</span><br>    <span class="hljs-string">&#x27;django.contrib.auth.backends.ModelBackend&#x27;</span>,  <span class="hljs-comment"># 指定使用django的model类</span><br>)<br></code></pre></div></td></tr></table></figure><h2 id="项目setting添加"><a href="#项目setting添加" class="headerlink" title="项目setting添加"></a><font color="#008080">项目setting添加</font></h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 但是源码里面好像已经有判断是否传入social了...</span><br><span class="hljs-comment"># 源码: NAMESPACE = getattr(settings, setting_name(&#x27;URL_NAMESPACE&#x27;), None) or &#x27;social&#x27;</span><br>SOCIAL_AUTH_URL_NAMESPACE = <span class="hljs-string">&#x27;social&#x27;</span><br></code></pre></div></td></tr></table></figure><h2 id="添加github-微博的key-amp-secret"><a href="#添加github-微博的key-amp-secret" class="headerlink" title="添加github 微博的key &amp; secret"></a><font color="#008080">添加github 微博的key &amp; secret</font></h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">SOCIAL_AUTH_GITHUB_KEY = <span class="hljs-string">&#x27;fa***************&#x27;</span><br>SOCIAL_AUTH_GITHUB_SECRET = <span class="hljs-string">&#x27;71**********************************&#x27;</span><br>SOCIAL_AUTH_GITHUB_USE_OPENID_AS_USERNAME = <span class="hljs-literal">True</span><br><br>SOCIAL_AUTH_WEIBO_KEY = <span class="hljs-string">&#x27;8*******&#x27;</span><br>SOCIAL_AUTH_WEIBO_SECRET = <span class="hljs-string">&#x27;9a****************************&#x27;</span><br>SOCIAL_AUTH_WEIBO_USE_OPENID_AS_USERNAME = <span class="hljs-literal">True</span><br></code></pre></div></td></tr></table></figure><h2 id="登录成功后-跳转的路由"><a href="#登录成功后-跳转的路由" class="headerlink" title="登录成功后 跳转的路由"></a><font color="#008080">登录成功后 跳转的路由</font></h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">SOCIAL_AUTH_LOGIN_REDIRECT_URL = <span class="hljs-string">&#x27;/&#x27;</span><br></code></pre></div></td></tr></table></figure><h2 id="在TEMPLATE下新增两个配置"><a href="#在TEMPLATE下新增两个配置" class="headerlink" title="在TEMPLATE下新增两个配置"></a><font color="#008080">在TEMPLATE下新增两个配置</font></h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">TEMPLATES = [<br>    &#123;<br>        <span class="hljs-string">&#x27;BACKEND&#x27;</span>: <span class="hljs-string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,<br>        <span class="hljs-string">&#x27;DIRS&#x27;</span>: [os.path.join(BASE_DIR, <span class="hljs-string">&#x27;templates&#x27;</span>)],<br>        <span class="hljs-string">&#x27;APP_DIRS&#x27;</span>: <span class="hljs-literal">True</span>,<br>        <span class="hljs-string">&#x27;OPTIONS&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;context_processors&#x27;</span>: [<br>                <span class="hljs-string">&#x27;django.template.context_processors.debug&#x27;</span>,<br>                <span class="hljs-string">&#x27;django.template.context_processors.request&#x27;</span>,<br>                <span class="hljs-string">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,<br>                <span class="hljs-string">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,<br>                <span class="hljs-comment"># 模板上下文处理器¶</span><br>                <span class="hljs-string">&#x27;social_django.context_processors.backends&#x27;</span>,<br>                <span class="hljs-string">&#x27;social_django.context_processors.login_redirect&#x27;</span>, <br>            ],<br>        &#125;,<br>    &#125;,<br>]<br></code></pre></div></td></tr></table></figure><h2 id="在跟setting同级目录下-的urls-py文件里面-添加一条URL"><a href="#在跟setting同级目录下-的urls-py文件里面-添加一条URL" class="headerlink" title="在跟setting同级目录下 的urls.py文件里面 添加一条URL"></a><font color="#008080">在跟setting同级目录下 的urls.py文件里面 添加一条URL</font></h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">path(<span class="hljs-string">&#x27;&#x27;</span>, include(<span class="hljs-string">&#x27;social_django.urls&#x27;</span>, namespace=<span class="hljs-string">&#x27;social&#x27;</span>)),<br></code></pre></div></td></tr></table></figure><h2 id="在模板文件里面-添加"><a href="#在模板文件里面-添加" class="headerlink" title="在模板文件里面 添加"></a><font color="#008080">在模板文件里面 添加</font></h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">&lt;a class=&quot;mx-4&quot; href=&quot;&#123;% url &#x27;social:begin&#x27; &#x27;github&#x27; %&#125;&quot; title=&quot;github账号登录&quot;&gt;<br>    &lt;i class=&quot;fa fa-github fa-2x&quot;&gt;&lt;/i&gt;<br>&lt;/a&gt;<br>&lt;a class=&quot;mx-4&quot; href=&quot;&#123;% url &#x27;social:begin&#x27; &#x27;weibo&#x27; %&#125;&quot; title=&quot;微博账号登录&quot;&gt;<br>     &lt;i class=&quot;fa fa-weibo fa-2x&quot;&gt;&lt;/i&gt;<br>&lt;/a&gt;<br><span class="hljs-comment"># 上述就是根据你的命名空间定义 查询的URL地址</span><br></code></pre></div></td></tr></table></figure><h2 id="最后-也是最重要的一步-同步数据库"><a href="#最后-也是最重要的一步-同步数据库" class="headerlink" title="最后 也是最重要的一步 同步数据库"></a><font color="#008080">最后 也是最重要的一步 同步数据库</font></h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">python manage.py migrate<br></code></pre></div></td></tr></table></figure><blockquote><p>会有一些 social对应的数据表创建 例如 social_auth_usersocialauth 该表储存的就是你授权的认证表</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>技术杂谈</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Django Uwsgi Nginx 部署项目</title>
    <link href="/2021/03/09/django+uwsgi+nginx%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/"/>
    <url>/2021/03/09/django+uwsgi+nginx%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Django-Nginx-Uwsgi部署项目"><a href="#Django-Nginx-Uwsgi部署项目" class="headerlink" title="Django + Nginx + Uwsgi部署项目"></a><font color="#008080">Django + Nginx + Uwsgi部署项目</font></h2><h5 id="前情提要☟"><a href="#前情提要☟" class="headerlink" title="前情提要☟"></a><strong><code>前情提要</code><a href="#">☟</a></strong></h5><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">项目使用Ubuntu 18.04.1 LTS，django2.0，Python3.6.8、nginx、uWSGI，Ubuntu 部署<br></code></pre></div></td></tr></table></figure><h2 id="安装uwsgi"><a href="#安装uwsgi" class="headerlink" title="安装uwsgi"></a><font color=" #00DD00">安装uwsgi</font></h2><h5 id="注意权限问题"><a href="#注意权限问题" class="headerlink" title="注意权限问题"></a><strong><code>注意权限问题</code></strong></h5><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo pip3 install uwsgi<br>关于pip镜像加速源 可以使用国内的<br>sudo pip3 install uwsgi -i https://pypi.douban.com/simple/<br></code></pre></div></td></tr></table></figure><h5 id="根据官方文档说明-uWSGI支持通过简单磁盘文件以外的几种方法来加载配置文件："><a href="#根据官方文档说明-uWSGI支持通过简单磁盘文件以外的几种方法来加载配置文件：" class="headerlink" title="根据官方文档说明 uWSGI支持通过简单磁盘文件以外的几种方法来加载配置文件："></a><strong><code>根据官方文档说明 uWSGI支持通过简单磁盘文件以外的几种方法来加载配置文件：</code></strong></h5><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">uwsgi --ini http://uwsgi.it/configs/myapp.ini # HTTP<br>uwsgi --xml - # standard input<br>uwsgi --yaml fd://0 # file descriptor<br>uwsgi --json &#x27;exec://nc 192.168.11.2:33000&#x27; # arbitrary executable<br></code></pre></div></td></tr></table></figure><h5 id="安装后-进入项目目录-新建xxx-xml文件-并输入以下代码"><a href="#安装后-进入项目目录-新建xxx-xml文件-并输入以下代码" class="headerlink" title="安装后,进入项目目录 新建xxx.xml文件 并输入以下代码:"></a><strong><code>安装后,进入项目目录 新建xxx.xml文件 并输入以下代码:</code></strong></h5><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">&lt;uwsgi&gt;    <br>   &lt;socket&gt;127.0.0.1:8000&lt;/socket&gt;&lt;!-- 内部端口，自定义 --&gt; <br>   &lt;chdir&gt;/home/ubuntu/project/xxx/&lt;/chdir&gt;&lt;!-- 项目路径 --&gt;            <br>   &lt;module&gt;xxx.wsgi&lt;/module&gt; <br>   &lt;processes&gt;4&lt;/processes&gt; &lt;!-- 进程数 --&gt;     <br>   &lt;daemonize&gt;uwsgi.log&lt;/daemonize&gt;&lt;!-- 日志文件 --&gt;<br>&lt;/uwsgi&gt;<br></code></pre></div></td></tr></table></figure><h5 id="开启命令"><a href="#开启命令" class="headerlink" title="开启命令"></a><strong><code>开启命令</code></strong></h5><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 启动uwsgl</span><br>uwsgi -x mysite.xml<br><br><span class="hljs-meta">#</span><span class="bash"> 查看uwsgi是否开启成功</span><br>ps -ef|grep uwsgi<br><span class="hljs-meta">#</span><span class="bash"> 删除进程 如果想重启uwsgi, 先删除进程 后重启uwsgi</span><br>killall -9 uwsgi<br></code></pre></div></td></tr></table></figure><h5 id="上述是第一种方式-还可以使用-ini文件方式-设置uwsgi属性"><a href="#上述是第一种方式-还可以使用-ini文件方式-设置uwsgi属性" class="headerlink" title="上述是第一种方式 还可以使用 .ini文件方式 设置uwsgi属性"></a><strong><code>上述是第一种方式 还可以使用 .ini文件方式 设置uwsgi属性</code></strong></h5><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[uwsgi]<br><span class="hljs-meta">#</span><span class="bash">配置和nginx连接的socket连接</span><br>socket=127.0.0.1:8000<br><span class="hljs-meta">#</span><span class="bash">配置项目路径，项目的所在目录</span><br>chdir=/home/ubuntu/project/xxx/<br><span class="hljs-meta">#</span><span class="bash">配置wsgi接口模块文件路径,也就是wsgi.py这个文件所在的目录名</span><br>wsgi-file=xxx/wsgi.py<br><span class="hljs-meta">#</span><span class="bash">配置启动的进程数</span><br>processes=4<br><span class="hljs-meta">#</span><span class="bash">配置每个进程的线程数</span><br>threads=2<br><span class="hljs-meta">#</span><span class="bash">配置启动管理主进程</span><br>master=True<br><span class="hljs-meta">#</span><span class="bash">配置存放主进程的进程号文件</span><br>pidfile=uwsgi.pid<br><span class="hljs-meta">#</span><span class="bash">配置dump日志记录</span><br>daemonize=uwsgi.log<br><span class="hljs-meta">#</span><span class="bash">更新代码后自动重启</span><br>py-autoreload=1<br><span class="hljs-meta">#</span><span class="bash">开启内存使用情况报告</span><br>memory-report=true<br><span class="hljs-meta">#</span><span class="bash">不记录request日志，只记录错误日志</span><br>disable-logging=true<br><span class="hljs-meta">#</span><span class="bash">优雅重启</span><br>lazy-apps=true<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-built_in">log</span>日志</span><br>log-maxsize = 50000000<br></code></pre></div></td></tr></table></figure><h5 id="uwsgi开启·重启·停止命令"><a href="#uwsgi开启·重启·停止命令" class="headerlink" title="uwsgi开启·重启·停止命令"></a><strong><code>uwsgi开启·重启·停止命令</code></strong></h5><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 开启</span><br>uwsgi --ini uwsgi.ini<br>效果:<br>[uWSGI] getting INI configuration from uwsgi.ini<br><br><span class="hljs-meta">#</span><span class="bash"> 停止运行uwsgi，通过包含主进程编号的文件设置停止项目</span><br>uwsgi --stop uwsgi.pid<br><br><span class="hljs-meta">#</span><span class="bash"> 重启uwsgi</span><br>uwsgi --reload uwsgi.pid<br></code></pre></div></td></tr></table></figure><h4 id="Uwsgi官方文档"><a href="#Uwsgi官方文档" class="headerlink" title="Uwsgi官方文档"></a><strong><a href="https://uwsgi-docs.readthedocs.io/en/latest/Configuration.html">Uwsgi官方文档</a></strong></h4><h2 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a><font color="#00DD00">安装nginx</font></h2><h5 id="安装nginx-有很多方式-网上也可以找到n-1种方式-在这里选用在线安装"><a href="#安装nginx-有很多方式-网上也可以找到n-1种方式-在这里选用在线安装" class="headerlink" title="安装nginx 有很多方式 网上也可以找到n+1种方式 在这里选用在线安装"></a><strong><code>安装nginx 有很多方式 网上也可以找到n+1种方式 在这里选用在线安装</code></strong></h5><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">apt-get install nginx<br></code></pre></div></td></tr></table></figure><h5 id="在线安装说明"><a href="#在线安装说明" class="headerlink" title="在线安装说明:"></a><strong><code>在线安装说明:</code></strong></h5><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">启动nginx的程序文件 /usr/sbin/nginx<br>日志放在了/var/log/nginx中，分别是access.log和error.log<br>并已经在/etc/init.d/下创建了启动脚本nginx<br></code></pre></div></td></tr></table></figure><h5 id="在线启动-重启"><a href="#在线启动-重启" class="headerlink" title="在线启动-重启"></a><strong><code>在线启动-重启</code></strong></h5><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> start</span><br>/etc/init.d/nginx start<br><br><span class="hljs-meta">#</span><span class="bash"> restart</span><br>/etc/init.d/nginx restart<br></code></pre></div></td></tr></table></figure><h5 id="Nginx官方中文手册"><a href="#Nginx官方中文手册" class="headerlink" title="Nginx官方中文手册"></a><strong><a href="https://www.nginx.cn/nginx-how-to">Nginx官方中文手册</a></strong></h5><h5 id="接下来-配置nginx-首先备份一下nginx-conf文件-以防出现问题"><a href="#接下来-配置nginx-首先备份一下nginx-conf文件-以防出现问题" class="headerlink" title="接下来 配置nginx 首先备份一下nginx.conf文件 以防出现问题"></a><strong><code>接下来 配置nginx 首先备份一下nginx.conf文件 以防出现问题</code></strong></h5><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.bak<br></code></pre></div></td></tr></table></figure><h5 id="然后重新将nginx-conf文件内容删除-重新搭配一份"><a href="#然后重新将nginx-conf文件内容删除-重新搭配一份" class="headerlink" title="然后重新将nginx.conf文件内容删除 重新搭配一份"></a><strong><code>然后重新将nginx.conf文件内容删除 重新搭配一份</code></strong></h5><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-section">events</span> &#123;<br><span class="hljs-attribute">worker_connections</span>  <span class="hljs-number">1024</span>;<br>&#125;<br><span class="hljs-section">http</span> &#123;<br>    <span class="hljs-attribute">include</span>       mime.types;<br>    <span class="hljs-attribute">default_type</span>  application/octet-stream;<br>    <span class="hljs-attribute">sendfile</span>        <span class="hljs-literal">on</span>;<br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>        <span class="hljs-attribute">server_name</span>  域名/公网ip;<br>        <span class="hljs-attribute">charset</span> utf-<span class="hljs-number">8</span>;<br>        <span class="hljs-attribute">location</span> / &#123;<br>           <span class="hljs-attribute">include</span> uwsgi_params;<br>           <span class="hljs-attribute">uwsgi_pass</span> <span class="hljs-number">127.0.0.1:8000</span>; <span class="hljs-comment"># 端口需要跟uwsgi.ini/uwsgi.xml文件里面的配置一样</span><br>           <span class="hljs-attribute">uwsgi_param</span> UWSGI_SCRIPT xxx.wsgi;<br>           <span class="hljs-attribute">uwsgi_param</span> UWSGI_CHDIR /home/ubuntu/project/xxx/; <span class="hljs-comment"># 项目路径</span><br><br>       <span class="hljs-attribute">location</span> /static/ &#123;<br>        <span class="hljs-attribute">alias</span> /home/ubuntu/project/xxx/static/; <span class="hljs-comment"># 静态资源</span><br>       &#125;<br>        &#125;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="输入命令-查看当前配置是否有问题"><a href="#输入命令-查看当前配置是否有问题" class="headerlink" title="输入命令 查看当前配置是否有问题"></a><strong><code>输入命令 查看当前配置是否有问题</code></strong></h5><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">uuu@VM-8-16-ubuntu:/etc/nginx$ sudo nginx -t<br><span class="hljs-meta">#</span><span class="bash"> 效果如下:</span><br>nginx: the configuration file /etc/nginx/nginx.conf syntax is ok<br>nginx: configuration file /etc/nginx/nginx.conf test is successful<br><br></code></pre></div></td></tr></table></figure><h5 id="重启Nginx"><a href="#重启Nginx" class="headerlink" title="重启Nginx"></a><strong><code>重启Nginx</code></strong></h5><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">uuu@VM-8-16-ubuntu:~$ sudo /etc/init.d/nginx restart<br><span class="hljs-meta">#</span><span class="bash"> 效果如下:</span><br>[ ok ] Restarting nginx (via systemctl): nginx.service.<br></code></pre></div></td></tr></table></figure><h5 id="进入项目-跟uwsgi-ini-uwsgi-xml文件同级下-启动uwsgi-如果之前启动了-可以重启"><a href="#进入项目-跟uwsgi-ini-uwsgi-xml文件同级下-启动uwsgi-如果之前启动了-可以重启" class="headerlink" title="进入项目 跟uwsgi.ini/uwsgi.xml文件同级下 启动uwsgi(如果之前启动了 可以重启)"></a><strong><code>进入项目 跟uwsgi.ini/uwsgi.xml文件同级下 启动uwsgi(如果之前启动了 可以重启)</code></strong></h5><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> xml启动方式</span><br>uwsgi -x xxx.xml<br><span class="hljs-meta">#</span><span class="bash"> ini启动方式</span><br>uwsgi --ini uwsgi.ini<br><br><span class="hljs-meta">#</span><span class="bash"> 上述已经有启动方式</span><br></code></pre></div></td></tr></table></figure><h5 id="上述配置完成后-打开浏览器-发现项目静态文件访问不到-403-或者没有获取到静态资源样式"><a href="#上述配置完成后-打开浏览器-发现项目静态文件访问不到-403-或者没有获取到静态资源样式" class="headerlink" title="上述配置完成后 打开浏览器 发现项目静态文件访问不到 403 或者没有获取到静态资源样式"></a><strong><code>上述配置完成后 打开浏览器 发现项目静态文件访问不到 403 或者没有获取到静态资源样式</code></strong></h5><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 1. 修改nginx的配置文件 在最上面 加上 user root;</span><br>sudo vim /etc/nginx/nginx.conf<br>user root;<br>events &#123;<br>worker_connections  1024;<br>&#125;<br>...<br><br><span class="hljs-meta">#</span><span class="bash"> 收集CSS样式，在终端输入：</span><br>python manage.py collectstatic<br><br><span class="hljs-meta">#</span><span class="bash"> 运行这个命令之后，就会自动把后台CSS样式收集到/static/目录下。刷新页面就能恢复样式！</span><br></code></pre></div></td></tr></table></figure><h5 id="ok-部署完成-后期会带上-https-多站点部署"><a href="#ok-部署完成-后期会带上-https-多站点部署" class="headerlink" title="ok 部署完成 后期会带上 https/多站点部署"></a><strong><code>ok 部署完成 后期会带上 https/多站点部署</code></strong></h5>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>微博授权登录获取ID密钥</title>
    <link href="/2021/03/09/%E5%BE%AE%E5%8D%9A%E7%99%BB%E5%BD%95/"/>
    <url>/2021/03/09/%E5%BE%AE%E5%8D%9A%E7%99%BB%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="题记"><a href="#题记" class="headerlink" title="题记"></a>题记</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">social-auth-app-django模块是专门用于Django的第三方登录OAuth2协议模块<br>目前流行的第三方登录都采用了OAuth2协议<br></code></pre></div></td></tr></table></figure><p><a href="https://open.weibo.com/wiki/%E5%BE%AE%E5%8D%9AAPI#OAuth2">微博API</a></p><h2 id="使用微博的登录-需要获取开发者权限"><a href="#使用微博的登录-需要获取开发者权限" class="headerlink" title="使用微博的登录 需要获取开发者权限"></a>使用微博的登录 需要获取开发者权限</h2><p>1.登录微博开放平台，如果是新用户会审核一些东西，可以略过那些，选择性填写。</p><p><a href="https://open.weibo.com/developers/level">点击跳转微博开放平台</a></p><p>2.登录微博<a href="#">¶</a></p><p><img src="https://s3.ax1x.com/2020/12/04/DbplJH.jpg" alt="点击登录 登录微博"></p><p>3.登陆完成后 我们是要去开放平台的 而不是在<a href="https://weibo.com/">微博</a>首页的</p><p><a href="https://open.weibo.com/developers/level">点击重新进入微博开放平台</a></p><p>4.基本信息认证</p><p><img src="https://s3.ax1x.com/2020/12/04/DbPiFS.jpg" alt="基本信息认证"></p><p>5.身份信息认证</p><p><img src="https://s3.ax1x.com/2020/12/04/DbPAzj.jpg" alt="身份信息认证"></p><blockquote><p>当然 身份认证不着急 </p></blockquote><p>6.接入网页应用</p><p><img src="https://s3.ax1x.com/2020/12/04/DbPeLq.jpg" alt="接入网页应用"></p><p>7.创建应用</p><p><img src="https://s3.ax1x.com/2020/12/04/DbiujA.jpg" alt="创建应用"></p><p>8.查看应用里面的 密钥 key</p><p><img src="https://s3.ax1x.com/2020/12/04/DbiG4S.md.jpg" alt="查看密钥,key"></p><p>9.设置回调地址</p><p><img src="https://s3.ax1x.com/2020/12/04/DbiwBq.jpg" alt="回调地址"></p><p>10.密钥的更改</p><p><img src="https://s3.ax1x.com/2020/12/04/Dbis4U.jpg" alt="密钥更改"></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>技术杂谈</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>GitHub授权登录获取ID密钥</title>
    <link href="/2021/03/09/github%E7%99%BB%E5%BD%95/"/>
    <url>/2021/03/09/github%E7%99%BB%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Github的授权密钥的获取"><a href="#Github的授权密钥的获取" class="headerlink" title="Github的授权密钥的获取"></a><font color="Cyan">Github的授权密钥的获取</font></h2><p><strong><font color="#4682B4">进入github，选择settings=&gt;Developer-settings，然后选择OAuth Apps=&gt;New OAuth App。最终如下图</font></strong></p><p><img src="https://p.pstatp.com/origin/138f500001508602aa3f6" alt="创建应用"></p><p><strong><font color="#4682B4">点击Register application后<a href="#">¶</a></font></strong></p><p><img src="https://p.pstatp.com/origin/1386800012122fa097f44" alt="查看ID密钥"></p><p><strong><font color="#4682B4">注意:密钥只能查看一次 否则需要重新生成/删除</font></strong></p><p><strong><font color="#4682B4">点击跳转 <a href="https://bree.vip/article/d_social/">django使用social实现第三方登录</a></font></strong></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>技术杂谈</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Python Pandas操作Excel</title>
    <link href="/2021/03/09/Excel/"/>
    <url>/2021/03/09/Excel/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Python-Pandas操作Excel"><a href="#Python-Pandas操作Excel" class="headerlink" title="Python Pandas操作Excel"></a><font color="#008080">Python Pandas操作Excel</font></h2><p><code>前情提要</code></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx">本章使用的 Python3.6 Pandas==0.25.3<br>项目中需要用到excel的文件字段太多 考虑到后续字段命名的变动以及中文/英文/日文...等多国语言的校验<br>操作麻烦 后改进的操作方式<br></code></pre></div></td></tr></table></figure><h3 id="测试文件点击下载"><a href="#测试文件点击下载" class="headerlink" title="测试文件点击下载"></a><a href="https://bree.vip/static/ceshi.xlsx">测试文件点击下载</a></h3><h2 id="Pandas中文文档"><a href="#Pandas中文文档" class="headerlink" title="Pandas中文文档"></a><font color="#008080">Pandas中文文档</font></h2><h3 id="Pandas中文文档-1"><a href="#Pandas中文文档-1" class="headerlink" title="Pandas中文文档"></a><a href="https://www.pypandas.cn/">Pandas中文文档</a></h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 安装pandas</span><br><span class="hljs-comment"># -i https://pypi.douban.com/simple/ 国内镜像加速</span><br>pip insatll pandas==<span class="hljs-number">0.25</span><span class="hljs-number">.3</span> -i https://pypi.douban.com/simple/<br><br></code></pre></div></td></tr></table></figure><h2 id="操作Excel文件-获取列数据"><a href="#操作Excel文件-获取列数据" class="headerlink" title="操作Excel文件/获取列数据"></a><font color="#008080">操作Excel文件/获取列数据</font></h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">################ Rudy ################</span><br><span class="hljs-string">############# 2021-01-22 #############</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_excel</span>(<span class="hljs-params">path_load</span>):</span><br>    df1 = pd.read_excel(path_load) <span class="hljs-comment"># 读取excel</span><br>    df2 = df1.dropna(how=<span class="hljs-string">&#x27;all&#x27;</span>)  <span class="hljs-comment"># 数据清洗，为完成需求删去不必要的行</span><br>    df2 = df2.replace(<span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-number">0</span>)  <span class="hljs-comment"># 把‘-’的替换成0便于后面计算</span><br>    df2 = df2.fillna(<span class="hljs-number">0</span>)  <span class="hljs-comment"># 数据清洗，缺失值用0补足</span><br>    df2 = df2.reset_index(drop=<span class="hljs-literal">True</span>)  <span class="hljs-comment"># 重设行索引</span><br>    column_name = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> df1]  <span class="hljs-comment"># 获取所有的列名</span><br>    <span class="hljs-keyword">if</span> df2.empty:  <span class="hljs-comment"># 校验文件是否为空 </span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;文件内容为空,请检查是否有数据&#x27;</span><br>    <span class="hljs-keyword">try</span>:<br>        start_date_time = df2[column_name[<span class="hljs-number">0</span>]].dt.strftime(<span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>)<br>        end_date_time = df2[column_name[<span class="hljs-number">1</span>]].dt.strftime(<span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>)<br>        advertising_mix_name = df2[column_name[<span class="hljs-number">2</span>]]<br>        currency = df2[column_name[<span class="hljs-number">3</span>]]<br>        name_of_advertising_campaign = df2[column_name[<span class="hljs-number">4</span>]]<br>        name_of_advertising_group = df2[column_name[<span class="hljs-number">5</span>]]<br>        launch = df2[column_name[<span class="hljs-number">6</span>]]<br>        matching_type = df2[column_name[<span class="hljs-number">7</span>]].replace(<span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&quot;Automatic&quot;</span>)<br>        customer_search_terms = df2[column_name[<span class="hljs-number">8</span>]]<br>        display_volume = df2[column_name[<span class="hljs-number">9</span>]]<br>        hits = df2[column_name[<span class="hljs-number">10</span>]]<br>        ctr = <span class="hljs-built_in">round</span>(df2[column_name[<span class="hljs-number">11</span>]] * <span class="hljs-number">100</span>, <span class="hljs-number">2</span>)<br>        cpc = <span class="hljs-built_in">round</span>(df2[column_name[<span class="hljs-number">12</span>]], <span class="hljs-number">2</span>)<br>        spend = df2[column_name[<span class="hljs-number">13</span>]]<br>        total_sales = df2[column_name[<span class="hljs-number">14</span>]]<br>        acos = <span class="hljs-built_in">round</span>(df2[column_name[<span class="hljs-number">15</span>]] * <span class="hljs-number">100</span>, <span class="hljs-number">2</span>)<br>        roas = <span class="hljs-built_in">round</span>(df2[column_name[<span class="hljs-number">16</span>]], <span class="hljs-number">2</span>)<br>        total_orders_in_seven_days = df2[column_name[<span class="hljs-number">17</span>]]<br>        total_sales2 = df2[column_name[<span class="hljs-number">18</span>]]<br>        seven_days_conversion_rate = <span class="hljs-built_in">round</span>(df2[column_name[<span class="hljs-number">19</span>]] * <span class="hljs-number">100</span>, <span class="hljs-number">2</span>)<br>        advertising_sku_sales = df2[column_name[<span class="hljs-number">20</span>]]<br>        other_sku_sales = df2[column_name[<span class="hljs-number">21</span>]]<br>        advertising_sku_sales2 = df2[column_name[<span class="hljs-number">22</span>]]<br>        other_sku_sales2 = df2[column_name[<span class="hljs-number">23</span>]]<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        print(e)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;文件上传失败...联系客服解决&#x27;</span><br><br><br>file_path = <span class="hljs-string">&#x27;./ceshi.xlsx&#x27;</span><br>f = get_excel(file_path)<br>print(f)<br><br></code></pre></div></td></tr></table></figure><h2 id="其他操作-某行-某列数据"><a href="#其他操作-某行-某列数据" class="headerlink" title="其他操作/某行/某列数据"></a><font color="#008080">其他操作/某行/某列数据</font></h2><p><strong>获取某一行或者某几行的数据 整行数据</strong></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 获取一行数据</span><br>l1 = df2[<span class="hljs-number">0</span>:<span class="hljs-number">1</span>]<br><span class="hljs-comment"># 获取多行数据 例如获取全部</span><br>l2 = df2[<span class="hljs-number">0</span>:<span class="hljs-built_in">len</span>(df2)]<br></code></pre></div></td></tr></table></figure><p><strong>操作示例</strong></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">################ Rudy ################</span><br><span class="hljs-string">############# 2021-01-22 #############</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_excel</span>(<span class="hljs-params">path_load</span>):</span><br>    df1 = pd.read_excel(path_load)<br>    df2 = df1.dropna(how=<span class="hljs-string">&#x27;all&#x27;</span>)  <span class="hljs-comment"># 数据清洗，为完成需求删去不必要的行</span><br>    df2 = df2.replace(<span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-number">0</span>)  <span class="hljs-comment"># 把‘-’的替换成0便于后面计算</span><br>    df2 = df2.fillna(<span class="hljs-number">0</span>)  <span class="hljs-comment"># 数据清洗，缺失值用0补足</span><br>    df2 = df2.reset_index(drop=<span class="hljs-literal">True</span>)  <span class="hljs-comment"># 重设行索引</span><br>    column_name = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> df1]  <span class="hljs-comment"># 获取所有的列名</span><br>    <span class="hljs-keyword">if</span> df2.empty:  <span class="hljs-comment"># 校验文件是否为空 </span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;文件内容为空,请检查是否有数据&#x27;</span><br>    <span class="hljs-comment"># 获取一行数据</span><br>    l1 = df2[<span class="hljs-number">0</span>:<span class="hljs-number">1</span>]<br>    <span class="hljs-comment"># 获取多行数据 例如获取全部</span><br>    l2 = df2[<span class="hljs-number">0</span>:<span class="hljs-built_in">len</span>(df2)]<br><br><br>file_path = <span class="hljs-string">&#x27;./ceshi.xlsx&#x27;</span><br>f = get_excel(file_path)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">print(l1)</span><br><span class="hljs-string">  Start Date  ... 7 Day Other SKU Sales ($)</span><br><span class="hljs-string">0 2021-01-06  ...                         0</span><br><span class="hljs-string"></span><br><span class="hljs-string">[1 rows x 24 columns]</span><br><span class="hljs-string"></span><br><span class="hljs-string">print(l2)</span><br><span class="hljs-string">   Start Date  ... 7 Day Other SKU Sales ($)</span><br><span class="hljs-string">0  2021-01-06  ...                         0</span><br><span class="hljs-string">1  2021-01-06  ...                         0</span><br><span class="hljs-string">2  2021-01-05  ...                         0</span><br><span class="hljs-string">3  2021-01-05  ...                         0</span><br><span class="hljs-string">..................剩下的忽略..................</span><br><span class="hljs-string"></span><br><span class="hljs-string">[31 rows x 24 columns]</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br></code></pre></div></td></tr></table></figure><p><strong>使用loc获取数据,loc可接受两个参数/一个为行下标/一个为列下标</strong></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 获取某一行数据 如果已知行 可以选择这种方式</span><br>l1 = df2.loc[<span class="hljs-number">0</span>]<br><span class="hljs-comment"># 获取第几行 与 第几行的数据 注意是 与 代表获取的第5与第10行数据</span><br>l2 = df2.loc[[<span class="hljs-number">5</span>, <span class="hljs-number">10</span>]]<br><span class="hljs-comment"># 通过切片方式获取多行数据</span><br>l3 = df2.loc[<span class="hljs-number">0</span>:<span class="hljs-number">10</span>]<br></code></pre></div></td></tr></table></figure><p><strong>操作示例:</strong></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">################ Rudy ################</span><br><span class="hljs-string">############# 2021-01-22 #############</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_excel</span>(<span class="hljs-params">path_load</span>):</span><br>    df1 = pd.read_excel(path_load)<br>    df2 = df1.dropna(how=<span class="hljs-string">&#x27;all&#x27;</span>)  <span class="hljs-comment"># 数据清洗，为完成需求删去不必要的行</span><br>    df2 = df2.replace(<span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-number">0</span>)  <span class="hljs-comment"># 把‘-’的替换成0便于后面计算</span><br>    df2 = df2.fillna(<span class="hljs-number">0</span>)  <span class="hljs-comment"># 数据清洗，缺失值用0补足</span><br>    df2 = df2.reset_index(drop=<span class="hljs-literal">True</span>)  <span class="hljs-comment"># 重设行索引</span><br>    column_name = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> df1]  <span class="hljs-comment"># 获取所有的列名</span><br>    <span class="hljs-keyword">if</span> df2.empty:  <span class="hljs-comment"># 校验文件是否为空 </span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;文件内容为空,请检查是否有数据&#x27;</span><br>    <span class="hljs-comment"># 获取某一行数据 如果已知行 可以选择这种方式</span><br>    l1 = df2.loc[<span class="hljs-number">0</span>]<br>    <span class="hljs-comment"># 获取第几行 与 第几行的数据 注意是 与 代表获取的第5与第10行数据</span><br>    l2 = df2.loc[[<span class="hljs-number">5</span>, <span class="hljs-number">10</span>]]<br>    <span class="hljs-comment"># 通过切片方式获取多行数据</span><br>    l3 = df2.loc[<span class="hljs-number">0</span>:<span class="hljs-number">10</span>]<br><br><br>file_path = <span class="hljs-string">&#x27;./ceshi.xlsx&#x27;</span><br>f = get_excel(file_path)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">print(l1)</span><br><span class="hljs-string">Start Date                            2021-01-06 00:00:00</span><br><span class="hljs-string">End Date                              2021-01-06 00:00:00</span><br><span class="hljs-string">Portfolio name                                Not grouped</span><br><span class="hljs-string">....忽略中间部分....</span><br><span class="hljs-string">7 Day Advertised SKU Units (#)                          0</span><br><span class="hljs-string">7 Day Other SKU Units (#)                               0</span><br><span class="hljs-string">7 Day Advertised SKU Sales ($)                          0</span><br><span class="hljs-string">7 Day Other SKU Sales ($)                               0</span><br><span class="hljs-string">Name: 0, dtype: object</span><br><span class="hljs-string"></span><br><span class="hljs-string">print(l2)</span><br><span class="hljs-string">   Start Date  ... 7 Day Other SKU Sales ($)</span><br><span class="hljs-string">5  2021-01-06  ...                         0</span><br><span class="hljs-string">10 2021-01-09  ...                         0</span><br><span class="hljs-string"></span><br><span class="hljs-string">[2 rows x 24 columns]</span><br><span class="hljs-string"></span><br><span class="hljs-string">print(l3)</span><br><span class="hljs-string">...</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>技术杂谈</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>登录限制IP</title>
    <link href="/2021/03/08/login-IP/"/>
    <url>/2021/03/08/login-IP/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="登录-限制ip☟"><a href="#登录-限制ip☟" class="headerlink" title="登录-限制ip☟"></a><font color="#008080">登录-限制ip☟</font></h2><p><strong><code>前情提要</code> <a href="#">☟</a></strong></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx">用户使用手机号码登录 校验密码输入错误的次数<br>使用MySQL记录密码输入次数 当输入次数达到10次<br>使用redis记录ip地址 将限制该ip禁止访问页面 30min<br>本章使用: python3.6 django MySQL Redis<br></code></pre></div></td></tr></table></figure><p><img src="https://p.pstatp.com/origin/1376e0001f46d7a8f33f4" alt="流程图"></p><h2 id="登录接口–-gt-GET请求☟"><a href="#登录接口–-gt-GET请求☟" class="headerlink" title="登录接口–&gt;GET请求☟"></a><font color="#008080">登录接口–&gt;GET请求☟</font></h2><table><thead><tr><th>参数</th><th>值</th><th>备注</th><th>请求方式</th></tr></thead><tbody><tr><td>参考路由</td><td><a href="http://127.0.0.1:8000/login/">http://127.0.0.1:8000/login/</a></td><td>用户登录接口</td><td>GET</td></tr><tr><td>GET请求</td><td>login.html</td><td>返回登录页面</td><td></td></tr></tbody></table><h2 id="后端代码–-gt-django-urls"><a href="#后端代码–-gt-django-urls" class="headerlink" title="后端代码–&gt;django/urls"></a>后端代码–&gt;django/urls</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> re_path<br><br><span class="hljs-comment"># 新增一个路由</span><br>re_path(<span class="hljs-string">r&#x27;login/$&#x27;</span>, LoginView.as_view(), name=<span class="hljs-string">&quot;login&quot;</span>),  <span class="hljs-comment"># 登录接口</span><br></code></pre></div></td></tr></table></figure><h2 id="后端代码–-gt-django-views"><a href="#后端代码–-gt-django-views" class="headerlink" title="后端代码–&gt;django/views"></a>后端代码–&gt;django/views</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginView</span>(<span class="hljs-params">View</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span>(<span class="hljs-params">self, request</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;返回登录页面&quot;&quot;&quot;</span><br>        ip_lock = get_ip_lock(request)  <span class="hljs-comment"># get_ip_lock()自定义函数 用于获取ip是否被锁定限制</span><br>        <span class="hljs-keyword">if</span> ip_lock:<br>            response = render(request, <span class="hljs-string">&#x27;404.html&#x27;</span>, ip_lock)<br>            <span class="hljs-keyword">return</span> response<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;login.html&#x27;</span>)<br></code></pre></div></td></tr></table></figure><h2 id="后端代码–-gt-django-utils"><a href="#后端代码–-gt-django-utils" class="headerlink" title="后端代码–&gt;django/utils"></a>后端代码–&gt;django/utils</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 自定义工具包 用于获取ip</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_ip_lock</span>(<span class="hljs-params">request</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    get lock ip</span><br><span class="hljs-string">    :param request:</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    x_forwarded_for = request.META.get(<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>)<br>    <span class="hljs-keyword">if</span> x_forwarded_for:<br>        ip = x_forwarded_for.split(<span class="hljs-string">&#x27;,&#x27;</span>)[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">else</span>:<br>        ip = request.META.get(<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        ip_lock_time = <span class="hljs-built_in">eval</span>(redis_conn.get(<span class="hljs-string">&#x27;ip_%s&#x27;</span> % ip).decode())<br>        <span class="hljs-keyword">if</span> ip_lock_time <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">if</span> (datetime.datetime.now() - ip_lock_time.get(<span class="hljs-string">&#x27;time&#x27;</span>)).total_seconds() &lt; <span class="hljs-number">1800</span>:<br>                s = <span class="hljs-built_in">int</span>(<span class="hljs-number">1800</span> - (datetime.datetime.now() - ip_lock_time.get(<span class="hljs-string">&#x27;time&#x27;</span>)).total_seconds())<br>                content = &#123;<span class="hljs-string">&#x27;s_time&#x27;</span>: s&#125;<br>                <span class="hljs-keyword">return</span> content<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">pass</span><br></code></pre></div></td></tr></table></figure><h2 id="登录接口–-gt-POST请求☟"><a href="#登录接口–-gt-POST请求☟" class="headerlink" title="登录接口–&gt;POST请求☟"></a><font color="#008080">登录接口–&gt;POST请求☟</font></h2><table><thead><tr><th>参数</th><th>值</th><th>备注</th><th>请求方式</th></tr></thead><tbody><tr><td>username/mobile</td><td>kiki/13412345678</td><td>用户名/手机号</td><td>POST</td></tr><tr><td>password</td><td>kiokiokiokio</td><td>密码</td><td></td></tr></tbody></table><h2 id="后端代码–-gt-django-views-1"><a href="#后端代码–-gt-django-views-1" class="headerlink" title="后端代码–&gt;django/views"></a>后端代码–&gt;django/views</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">post</span>(<span class="hljs-params">self, request</span>):</span><br>    username = <span class="hljs-built_in">str</span>(request.POST.get(<span class="hljs-string">&#x27;username&#x27;</span>)).strip()<br>    password = <span class="hljs-built_in">str</span>(request.POST.get(<span class="hljs-string">&#x27;password&#x27;</span>)).strip()<br>    remembered = request.POST.get(<span class="hljs-string">&#x27;remembered&#x27;</span>)<br>    x_forwarded_for = request.META.get(<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>)<br>    <span class="hljs-keyword">if</span> x_forwarded_for:<br>        ip = x_forwarded_for.split(<span class="hljs-string">&#x27;,&#x27;</span>)[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">else</span>:<br>        ip = request.META.get(<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">all</span>([username, password]):<br>       <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;login.html&#x27;</span>, &#123;<span class="hljs-string">&#x27;account_errmsg&#x27;</span>: <span class="hljs-string">&#x27;缺少参数,请检查&#x27;</span>&#125;)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> re.match(<span class="hljs-string">r&#x27;^[0-9a-zA-Z]&#123;8,20&#125;$&#x27;</span>, password):<br>       <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;login.html&#x27;</span>, &#123;<span class="hljs-string">&#x27;account_errmsg&#x27;</span>: <span class="hljs-string">&#x27;密码长度8-20之间的英文与数字&#x27;</span>&#125;)<br>    user = auth.authenticate(username=username, password=password)<br>    <span class="hljs-keyword">if</span> user <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">try</span>:<br>            user = User.objects.get(Q(username=username) | Q(email=username) | Q(mobile=username))<br>            get_lock_user(user, ip)  <span class="hljs-comment"># 获取账号输入的密码错误次数记录与ip记录</span><br>            <span class="hljs-keyword">if</span> user.pass_error &gt;= <span class="hljs-number">10</span>:<br>                <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;login.html&#x27;</span>, &#123;<span class="hljs-string">&#x27;account_errmsg&#x27;</span>: <span class="hljs-string">&#x27;密码错误超过10次，用户锁定半小时&#x27;</span>&#125;)<br>            <span class="hljs-keyword">elif</span> <span class="hljs-number">5</span> &lt;= user.pass_error &lt;= <span class="hljs-number">9</span>:<br>                <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;login.html&#x27;</span>, &#123;<span class="hljs-string">&#x27;account_errmsg&#x27;</span>: <span class="hljs-string">&#x27;密码错误超过5次，用户锁定十分钟&#x27;</span>&#125;)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;login.html&#x27;</span>, &#123;<span class="hljs-string">&#x27;account_errmsg&#x27;</span>: <span class="hljs-string">&#x27;暂无该账户,请先注册&#x27;</span>&#125;)<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;login.html&#x27;</span>, &#123;<span class="hljs-string">&#x27;account_errmsg&#x27;</span>: <span class="hljs-string">&#x27;账号或密码输入有误,请检查&#x27;</span>&#125;)<br>    <span class="hljs-keyword">if</span> user.is_login:<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;login.html&#x27;</span>, &#123;<span class="hljs-string">&#x27;account_errmsg&#x27;</span>: <span class="hljs-string">&#x27;该账号已登录&#x27;</span>&#125;)<br>    <span class="hljs-keyword">if</span> <span class="hljs-number">5</span> &lt;= user.pass_error &lt; <span class="hljs-number">10</span>:<br>        <span class="hljs-keyword">if</span> (datetime.datetime.now() - user.login_lock).total_seconds() &lt; <span class="hljs-number">600</span>:<br>            <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;login.html&#x27;</span>, &#123;<span class="hljs-string">&#x27;account_errmsg&#x27;</span>: <span class="hljs-string">&#x27;账号锁定十分钟内不能登陆成功!&#x27;</span>&#125;)<br>    login(request, user)<br>    <span class="hljs-keyword">if</span> remembered != <span class="hljs-string">&#x27;on&#x27;</span>:<br>        request.session.set_expiry(<span class="hljs-number">7</span> * <span class="hljs-number">24</span> * <span class="hljs-number">3600</span>)<br>    <span class="hljs-keyword">else</span>:<br>        request.session.set_expiry(<span class="hljs-number">7</span> * <span class="hljs-number">24</span> * <span class="hljs-number">3600</span>)<br>    <span class="hljs-built_in">next</span> = request.GET.get(<span class="hljs-string">&#x27;next&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">next</span>:<br>        response = redirect(<span class="hljs-built_in">next</span>)<br>    <span class="hljs-keyword">else</span>:<br>        response = redirect(reverse(<span class="hljs-string">&#x27;alex_index:index&#x27;</span>))<br>    get_login_user(user)  <span class="hljs-comment"># 用户登录成功 则将记录清除为0</span><br>    response.set_cookie(<span class="hljs-string">&#x27;username&#x27;</span>, user.username, max_age=<span class="hljs-number">7</span> * <span class="hljs-number">24</span> * <span class="hljs-number">3600</span>)<br>    <span class="hljs-keyword">return</span> response<br></code></pre></div></td></tr></table></figure><h2 id="后端代码–-gt-django-utils-1"><a href="#后端代码–-gt-django-utils-1" class="headerlink" title="后端代码–&gt;django/utils"></a>后端代码–&gt;django/utils</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_lock_user</span>(<span class="hljs-params">user, ip</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    get lock user</span><br><span class="hljs-string">    :param user:</span><br><span class="hljs-string">    :param ip:</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> user.ip <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> user.ip != ip:<br>        user.ip = ip<br>    user.login_lock = datetime.datetime.now()<br>    user.pass_error += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> user.pass_error &gt;= <span class="hljs-number">10</span>:  <span class="hljs-comment"># if pass_error &gt; 10 lockIP 当密码错误记录到10</span><br>        lock_ip_time = &#123;<span class="hljs-string">&quot;time&quot;</span>: datetime.datetime.now(), <span class="hljs-string">&#x27;ip&#x27;</span>: ip&#125;  <span class="hljs-comment"># 记录当前时间与ip</span><br>        redis_conn.setex(<span class="hljs-string">&#x27;ip_%s&#x27;</span> % ip, constants.IP_LOCK_TIME, <span class="hljs-built_in">str</span>(lock_ip_time))  <span class="hljs-comment"># redis记录ip</span><br>    user.save()<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>技术杂谈</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>微信登录-扫码绑定用户 二)</title>
    <link href="/2021/03/08/%E5%BE%AE%E4%BF%A1%E7%99%BB%E5%BD%95-3/"/>
    <url>/2021/03/08/%E5%BE%AE%E4%BF%A1%E7%99%BB%E5%BD%95-3/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="在微信扫码登录的时候-限定绑定手机号☟"><a href="#在微信扫码登录的时候-限定绑定手机号☟" class="headerlink" title="在微信扫码登录的时候 限定绑定手机号☟"></a><font color="#008080">在微信扫码登录的时候 限定绑定手机号☟</font></h2><p><strong><code>前情提要</code> <a href="#">☟</a></strong></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">用户使用手机号码登录后 校验是否已经绑定微信号<br>微信扫码登录的用户 校验是否已经绑定手机号码<br>本章使用: python3.6 django MySQL<br>在微信扫码的登陆的时候 校验没有绑定手机号的话 就跳转绑定手机号<br></code></pre></div></td></tr></table></figure><p><img src="https://p.pstatp.com/origin/138390002aa0dc5ee88b7" alt="流程图"></p><h2 id="校验第一次微信扫码☟"><a href="#校验第一次微信扫码☟" class="headerlink" title="校验第一次微信扫码☟"></a><font color="#008080">校验第一次微信扫码☟</font></h2><table><thead><tr><th>参数</th><th>值</th><th>备注</th><th>请求方式</th></tr></thead><tbody><tr><td>参考路由</td><td><a href="http://127.0.0.1:8000/Wxbinduser/">http://127.0.0.1:8000/Wxbinduser/</a></td><td>校验第一次扫码微信</td><td>GET</td></tr><tr><td>code</td><td>071xnUkl2wUPo64to1ol2MhKFY1xnUkZ</td><td>用户扫码后的code值</td><td></td></tr><tr><td>state</td><td>STATE</td><td>默认值</td><td></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WeXinLogin</span>(<span class="hljs-params">APIView</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span>(<span class="hljs-params">self, request</span>):</span><br>        code = request.GET.get(<span class="hljs-string">&#x27;code&#x27;</span>)<br>        state = request.GET.get(<span class="hljs-string">&quot;state&quot;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">all</span>([code, state]):<br>            <span class="hljs-keyword">return</span> Response(&#123;<span class="hljs-string">&#x27;code&#x27;</span>: RET.DBERR, <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;缺少code数据&#x27;</span>&#125;)<br>        useropenid, usernickname, userheadimgurl, userunionid = get_wechat_user(code)<br>        <span class="hljs-keyword">try</span>:<br>            user = User.objects.get(useropenid=useropenid)<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">return</span> Response(&#123;<span class="hljs-string">&#x27;code&#x27;</span>: RET.USERERR, <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;请先注册一个手机号&#x27;</span>&#125;)<br>        <span class="hljs-keyword">return</span> Response(&#123;<span class="hljs-string">&#x27;code&#x27;</span>: RET.OK, <span class="hljs-string">&#x27;token&#x27;</span>: user.jwt_token, <span class="hljs-string">&#x27;mobile&#x27;</span>: user.mobile&#125;)<br></code></pre></div></td></tr></table></figure><h2 id="校验是否已经绑定过微信☟"><a href="#校验是否已经绑定过微信☟" class="headerlink" title="校验是否已经绑定过微信☟"></a><font color="#008080">校验是否已经绑定过微信☟</font></h2><table><thead><tr><th>参数</th><th>值</th><th>备注</th><th>请求方式</th></tr></thead><tbody><tr><td>参考路由</td><td><a href="http://127.0.0.1:8000/checkWx/">http://127.0.0.1:8000/checkWx/</a></td><td>校验该手机用户是否绑定了微信</td><td>GET</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WeXinBindView</span>(<span class="hljs-params">APIView</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;校验是否已经绑定过微信&quot;&quot;&quot;</span><br>    authentication_classes = [MyBaseAuthentication, ]<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span>(<span class="hljs-params">self, request</span>):</span><br>        user = is_master(request.user)<br>        <span class="hljs-keyword">if</span> user.useropenid <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> Response(&#123;<span class="hljs-string">&#x27;code&#x27;</span>: RET.DBERR, <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;您的账号尚未绑定微信,请先绑定微信&#x27;</span>&#125;)<br>        <span class="hljs-keyword">return</span> Response(&#123;<span class="hljs-string">&#x27;code&#x27;</span>: RET.OK&#125;)<br></code></pre></div></td></tr></table></figure><h2 id="校验第二次微信扫码☟"><a href="#校验第二次微信扫码☟" class="headerlink" title="校验第二次微信扫码☟"></a><font color="#008080">校验第二次微信扫码☟</font></h2><table><thead><tr><th>参数</th><th>值</th><th>备注</th><th>请求方式</th></tr></thead><tbody><tr><td>参考路由</td><td><a href="http://127.0.0.1:8000/UW/">http://127.0.0.1:8000/UW/</a></td><td>用户登录成功/第二次扫码-绑定微信</td><td>GET</td></tr><tr><td>code</td><td>071xnUkl2wUPo64to1ol2MhKFY1xnUkZ</td><td>code值</td><td></td></tr><tr><td>state</td><td>STATE</td><td>默认值</td><td></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MobileBindWeChatView</span>(<span class="hljs-params">APIView</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;手机号码登录成功--绑定微信号&quot;&quot;&quot;</span><br>    authentication_classes = [MyBaseAuthentication, ]<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span>(<span class="hljs-params">self, request</span>):</span><br>        code = request.GET.get(<span class="hljs-string">&#x27;code&#x27;</span>)<br>        state = request.GET.get(<span class="hljs-string">&quot;state&quot;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">all</span>([code, state]):<br>            <span class="hljs-keyword">return</span> Response(&#123;<span class="hljs-string">&#x27;code&#x27;</span>: RET.DBERR, <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;缺少code数据&#x27;</span>&#125;)<br>        user = is_master(request.user)<br>        useropenid, usernickname, userheadimgurl, userunionid = get_wechat_user(code)<br>        user.useropenid = useropenid<br>        user.usernickname = usernickname<br>        user.userheadimgurl = userheadimgurl<br>        user.userunionid = userunionid<br>        user.state = state<br>        user.save()<br>        <span class="hljs-keyword">return</span> Response(&#123;<span class="hljs-string">&#x27;code&#x27;</span>: RET.OK, <span class="hljs-string">&#x27;token&#x27;</span>: user.jwt_token, <span class="hljs-string">&#x27;mobile&#x27;</span>: user.mobile&#125;)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>WeChat</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>微信登录-扫码绑定用户 一)</title>
    <link href="/2021/03/08/%E5%BE%AE%E4%BF%A1%E7%99%BB%E5%BD%95-2/"/>
    <url>/2021/03/08/%E5%BE%AE%E4%BF%A1%E7%99%BB%E5%BD%95-2/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="微信登录与绑定用户☟"><a href="#微信登录与绑定用户☟" class="headerlink" title="微信登录与绑定用户☟"></a><font color="#008080">微信登录与绑定用户☟</font></h2><p><strong><code>前情提要</code> <a href="#">☟</a></strong></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">用户使用手机号码登录后 校验是否已经绑定微信号<br>微信扫码登录的用户 校验是否已经绑定手机号码<br>本章使用: python3.6 django MySQL<br>微信扫码登陆 校验是否已经绑定微信/手机号码<br></code></pre></div></td></tr></table></figure><p><img src="https://p.pstatp.com/origin/137340002b9a1dcb33085" alt="流程图"></p><h2 id="校验是否已经绑定过手机号码-微信☟"><a href="#校验是否已经绑定过手机号码-微信☟" class="headerlink" title="校验是否已经绑定过手机号码/微信☟"></a><font color="#008080">校验是否已经绑定过手机号码/微信☟</font></h2><table><thead><tr><th>参数</th><th>值</th><th>备注</th><th>请求方式</th></tr></thead><tbody><tr><td>参考路由</td><td><a href="http://127.0.0.1:8000/WxOrUser/">http://127.0.0.1:8000/WxOrUser/</a></td><td>校验是否已经绑定过手机号码或微信</td><td>GET</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WeXinBindView</span>(<span class="hljs-params">APIView</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;校验是否已经绑定过微信--手机号&quot;&quot;&quot;</span><br>    authentication_classes = [MyBaseAuthentication, ]  <span class="hljs-comment"># jwt_token认证用户</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span>(<span class="hljs-params">self, request</span>):</span><br>        user = is_master(request.user)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> re.match(<span class="hljs-string">r&#x27;^1[3-9]\d&#123;9&#125;$&#x27;</span>, user.mobile):<br>            <span class="hljs-keyword">return</span> Response(&#123;<span class="hljs-string">&#x27;code&#x27;</span>: RET.DBERR, <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;您的账号尚未绑定手机号,请先绑定手机号&#x27;</span>&#125;)<br>        <span class="hljs-keyword">elif</span> user.useropenid <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> Response(&#123;<span class="hljs-string">&#x27;code&#x27;</span>: RET.DBERR, <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;您的账号尚未绑定微信,请先绑定微信&#x27;</span>&#125;)<br>        <span class="hljs-keyword">return</span> Response(&#123;<span class="hljs-string">&#x27;code&#x27;</span>: RET.OK&#125;)<br></code></pre></div></td></tr></table></figure><h2 id="微信登录成功–绑定手机号码☟"><a href="#微信登录成功–绑定手机号码☟" class="headerlink" title="微信登录成功–绑定手机号码☟"></a><font color="#008080">微信登录成功–绑定手机号码☟</font></h2><table><thead><tr><th>参数</th><th>值</th><th>备注</th><th>请求方式</th></tr></thead><tbody><tr><td>参考路由</td><td><a href="http://127.0.0.1:8000/wx_mobile/">http://127.0.0.1:8000/wx_mobile/</a></td><td>微信登录的用户-绑定手机号码</td><td>POST</td></tr><tr><td>mobile</td><td>13456789011</td><td>手机号码</td><td></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WeChatBindMobileView</span>(<span class="hljs-params">APIView</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;微信登录成功--绑定手机号码&quot;&quot;&quot;</span><br>    authentication_classes = [MyBaseAuthentication, ]  <span class="hljs-comment"># jwt_token认证用户</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">post</span>(<span class="hljs-params">self, request</span>):</span><br>        user = is_master(request.user)<br>        mobile = request.POST.get(<span class="hljs-string">&#x27;mobile&#x27;</span>)<br>        password = request.POST.get(<span class="hljs-string">&#x27;password&#x27;</span>)  <span class="hljs-comment"># 改密码将在用户手机号登录的时候使用</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">all</span>([mobile, password]):<br>            <span class="hljs-keyword">return</span> Response(&#123;<span class="hljs-string">&#x27;code&#x27;</span>: RET.PARAMERR, <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;缺少手机号或密码&#x27;</span>&#125;)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> re.match(<span class="hljs-string">r&#x27;^1[3-9]\d&#123;9&#125;$&#x27;</span>, mobile):<br>            <span class="hljs-keyword">return</span> Response(&#123;<span class="hljs-string">&#x27;code&#x27;</span>: RET.USERERR, <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;请输入正确的手机号码&#x27;</span>&#125;)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> re.match(<span class="hljs-string">r&#x27;^[0-9a-zA-Z]&#123;8,20&#125;$&#x27;</span>, password):<br>            <span class="hljs-keyword">return</span> Response(&#123;<span class="hljs-string">&#x27;code&#x27;</span>: RET.PWDERR, <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;请输入8-20位的数字字母密码&#x27;</span>&#125;)<br>        user.mobile = mobile<br>        user.password = make_password(password, <span class="hljs-string">&#x27;pbkdf2_sha256&#x27;</span>)<br>        user.save()<br>        <span class="hljs-keyword">return</span> Response(&#123;<span class="hljs-string">&#x27;code&#x27;</span>: RET.OK, <span class="hljs-string">&#x27;token&#x27;</span>: user.jwt_token, <span class="hljs-string">&#x27;mobile&#x27;</span>: mobile&#125;)<br></code></pre></div></td></tr></table></figure><h2 id="手机号登录成功–绑定微信号☟"><a href="#手机号登录成功–绑定微信号☟" class="headerlink" title="手机号登录成功–绑定微信号☟"></a><font color="#008080">手机号登录成功–绑定微信号☟</font></h2><table><thead><tr><th>参数</th><th>值</th><th>备注</th><th>请求方式</th></tr></thead><tbody><tr><td>参考路由</td><td><a href="http://127.0.0.1:8000/mobile_wx/">http://127.0.0.1:8000/mobile_wx/</a></td><td>手机号登录的用户–绑定微信号</td><td>GET</td></tr><tr><td>code</td><td>071xnUkl2wUPo64to1ol2MhKFY1xnUkZ</td><td>用户扫码后的code值</td><td></td></tr><tr><td>state</td><td>STATE</td><td>默认STATE</td><td></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MobileBindWeChatView</span>(<span class="hljs-params">APIView</span>):</span><br>    authentication_classes = [MyBaseAuthentication, ]  <span class="hljs-comment"># jwt_token认证用户</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span>(<span class="hljs-params">self, request</span>):</span><br>        code = request.GET.get(<span class="hljs-string">&#x27;code&#x27;</span>)  <span class="hljs-comment"># 获取code值</span><br>        state = request.GET.get(<span class="hljs-string">&quot;state&quot;</span>)<br>        user = is_master(request.user)<br><br>        myurl = <span class="hljs-string">&quot;https://api.weixin.qq.com/sns/oauth2/access_token?appid=&quot;</span> \<br>        + AppID + <span class="hljs-string">&quot;&amp;secret=&quot;</span> + AppSecret + <span class="hljs-string">&quot;&amp;code=&quot;</span> + code + <span class="hljs-string">&quot;&amp;grant_type=authorization_code&quot;</span><br><br>        request = Request(myurl)<br>        html = urlopen(request)<br>        <span class="hljs-comment"># 获取数据</span><br>        data = html.read()<br>        strs = json.loads(data.decode())<br>        mytoken = strs[<span class="hljs-string">&quot;access_token&quot;</span>]<br>        myrhtoken = strs[<span class="hljs-string">&quot;refresh_token&quot;</span>]<br>        myopenid = strs[<span class="hljs-string">&quot;openid&quot;</span>]<br>        myunionid = strs[<span class="hljs-string">&quot;unionid&quot;</span>]<br>        <span class="hljs-comment"># 获取用户信息的api接口</span><br>        mytwourl = <span class="hljs-string">&quot;https://api.weixin.qq.com/sns/userinfo?access_token=&quot;</span> + mytoken + <span class="hljs-string">&quot;&amp;openid=&quot;</span> + myopenid + <span class="hljs-string">&quot;&amp;lang=zh_CN&quot;</span><br>        request2 = Request(mytwourl)<br>        html2 = urlopen(request2)<br>        data2 = html2.read()<br>        strs2 = json.loads(data2.decode())<br>        <span class="hljs-comment"># 下面是获取扫码者微信帐号完整信息</span><br>        useropenid = strs2[<span class="hljs-string">&quot;openid&quot;</span>]<br>        usernickname = strs2[<span class="hljs-string">&quot;nickname&quot;</span>]<br>        userheadimgurl = strs2[<span class="hljs-string">&quot;headimgurl&quot;</span>]<br>        userunionid = strs2[<span class="hljs-string">&quot;unionid&quot;</span>]<br>        user.useropenid = useropenid<br>        user.usernickname = usernickname<br>        user.userheadimgurl = userheadimgurl<br>        user.userunionid = userunionid<br>        user.state = state<br>        user.save()<br><br>        <span class="hljs-keyword">return</span> Response(&#123;<span class="hljs-string">&#x27;code&#x27;</span>: RET.OK, <span class="hljs-string">&#x27;token&#x27;</span>: user.jwt_token, <span class="hljs-string">&#x27;mobile&#x27;</span>: user.mobile&#125;)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>WeChat</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>微信登录-扫码登录</title>
    <link href="/2021/03/08/%E5%BE%AE%E4%BF%A1%E7%99%BB%E5%BD%95-1/"/>
    <url>/2021/03/08/%E5%BE%AE%E4%BF%A1%E7%99%BB%E5%BD%95-1/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="微信登录与绑定用户☟"><a href="#微信登录与绑定用户☟" class="headerlink" title="微信登录与绑定用户☟"></a><font color="#008080">微信登录与绑定用户☟</font></h2><p><strong><code>前情提要</code> <a href="#">☟</a></strong></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">用户使用手机号码登录后 校验是否已经绑定微信号<br>微信扫码登录的用户 校验是否已经绑定手机号码<br>本章使用: python3.6 django MySQL<br>微信扫码登陆流程与后端代码<br></code></pre></div></td></tr></table></figure><h2 id="微信扫码登录流程☟"><a href="#微信扫码登录流程☟" class="headerlink" title="微信扫码登录流程☟"></a><font color="#008080">微信扫码登录流程☟</font></h2><h3 id="☞-微信开放平台"><a href="#☞-微信开放平台" class="headerlink" title="☞ 微信开放平台"></a><a href="https://open.weixin.qq.com/cgi-bin/applist?t=manage/list&page=0&num=20&openapptype=1&lang=zh_CN&token=a40f5be463a14389f1c21ba201b68972d5b44dc6">☞ 微信开放平台</a></h3><h2 id="创建网站应用"><a href="#创建网站应用" class="headerlink" title="创建网站应用"></a><font color=" #66DD00">创建网站应用</font></h2><p><img src="https://p.pstatp.com/origin/ff6b000286106846991d" alt="创建网站应用"></p><h2 id="填写网站应用信息"><a href="#填写网站应用信息" class="headerlink" title="填写网站应用信息"></a><font color=" #66DD00">填写网站应用信息</font></h2><p><img src="https://p.pstatp.com/origin/13783000248ddf4318435" alt="填写网站应用信息"></p><h2 id="查看id与密钥"><a href="#查看id与密钥" class="headerlink" title="查看id与密钥"></a><font color=" #66DD00">查看id与密钥</font></h2><p><img src="https://p.pstatp.com/origin/1386c00040776e81450dd" alt="查看id与密钥"></p><h2 id="设置回调域"><a href="#设置回调域" class="headerlink" title="设置回调域"></a><font color=" #66DD00">设置回调域</font></h2><p><img src="https://p.pstatp.com/origin/1387c0000f4bfa737d7ff" alt="设置回调域"></p><h2 id="微信扫码登录-获取code值☟"><a href="#微信扫码登录-获取code值☟" class="headerlink" title="微信扫码登录-获取code值☟"></a><font color="#008080">微信扫码登录-获取code值☟</font></h2><table><thead><tr><th align="center">路由</th></tr></thead><tbody><tr><td align="center"><a href="https://open.weixin.qq.com/connect/qrconnect?appid=APPID&amp;redirect_uri=%E4%BD%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9F%9F%E5%90%8D&amp;response_type=code&amp;scope=snsapi_login&amp;state=STATE">https://open.weixin.qq.com/connect/qrconnect?appid=APPID&amp;redirect_uri=你自己的域名&amp;response_type=code&amp;scope=snsapi_login&amp;state=STATE</a></td></tr></tbody></table><table><thead><tr><th align="center">上述路由参数</th><th align="center">值</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">APPID</td><td align="center">刚刚获取到的appid</td><td align="center">appid</td></tr><tr><td align="center">redirect_uri</td><td align="center">http:// https://根据你的域名</td><td align="center">例如本地: <a href="http://127.0.0.1:8000/">http://127.0.0.1:8000</a></td></tr><tr><td align="center">response_type</td><td align="center">code</td><td align="center">默认值</td></tr><tr><td align="center">scope</td><td align="center">snsapi_login</td><td align="center">默认值</td></tr><tr><td align="center">state</td><td align="center">STATE</td><td align="center">默认值</td></tr></tbody></table><h2 id="微信扫码登录-获取access-token值☟"><a href="#微信扫码登录-获取access-token值☟" class="headerlink" title="微信扫码登录-获取access_token值☟"></a><font color="#008080">微信扫码登录-获取access_token值☟</font></h2><table><thead><tr><th align="center">路由</th></tr></thead><tbody><tr><td align="center"><a href="https://api.weixin.qq.com/sns/oauth2/access_token?appid=APPID&amp;secret=SECRET&amp;code=CODE&amp;grant_type=authorization_code">https://api.weixin.qq.com/sns/oauth2/access_token?appid=APPID&amp;secret=SECRET&amp;code=CODE&amp;grant_type=authorization_code</a></td></tr></tbody></table><table><thead><tr><th align="center">上述路由参数</th><th align="center">值</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">APPID</td><td align="center">appid</td><td align="center">appid</td></tr><tr><td align="center">SECRET</td><td align="center">密钥 网站应用的密钥</td><td align="center">密钥 网站应用的密钥</td></tr><tr><td align="center">CODE</td><td align="center">返回的code值</td><td align="center">微信扫码登录返回的code值</td></tr><tr><td align="center">grant_type</td><td align="center">authorization_code</td><td align="center">默认值</td></tr></tbody></table><p><strong><font color=" #66DD00">返回值:</font></strong></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;access_token&quot;</span>: <span class="hljs-string">&quot;36_tzQMLluQGxWLvty7ivsqs7xpE3GvUzbgIrYyvldhAB_WDg3c-wB4-N6OP8uc-y************************************&quot;</span>,<br>  <span class="hljs-attr">&quot;expires_in&quot;</span>: <span class="hljs-number">7200</span>,<br>  <span class="hljs-attr">&quot;refresh_token&quot;</span>: <span class="hljs-string">&quot;36_S2uCpIM4dU9Z65uvn__PcD5UYp8_uPii97R04NSMItZs2keyuMp7zTkXzehYQ_tHNIPaE4Bh-oIp6cl********************&quot;</span>,<br>  <span class="hljs-attr">&quot;openid&quot;</span>: <span class="hljs-string">&quot;你的openid&quot;</span>,<br>  <span class="hljs-attr">&quot;scope&quot;</span>: <span class="hljs-string">&quot;snsapi_login&quot;</span>,<br>  <span class="hljs-attr">&quot;unionid&quot;</span>: <span class="hljs-string">&quot;你的unionid&quot;</span><br>&#125;<br><br># 上述返回值解析<br>access_token 包含扫码用户的信息<br>expires_in 超时时间(过期时间)<br>openid 就是确认是你扫码的<br></code></pre></div></td></tr></table></figure><h2 id="微信扫码登录-获取扫码用户的信息☟"><a href="#微信扫码登录-获取扫码用户的信息☟" class="headerlink" title="微信扫码登录-获取扫码用户的信息☟"></a><font color="#008080">微信扫码登录-获取扫码用户的信息☟</font></h2><table><thead><tr><th align="center">路由</th></tr></thead><tbody><tr><td align="center"><a href="https://api.weixin.qq.com/sns/userinfo?access_token=ACCESS_TOKEN&amp;openid=OPENID&amp;lang=zh_CN">https://api.weixin.qq.com/sns/userinfo?access_token=ACCESS_TOKEN&amp;openid=OPENID&amp;lang=zh_CN</a></td></tr></tbody></table><table><thead><tr><th align="center">上述路由参数</th><th align="center">值</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">access_token</td><td align="center">36_tzQMXXXXXXX</td><td align="center">前面获取的access_token</td></tr><tr><td align="center">openid</td><td align="center">openid</td><td align="center">前面获取的openid</td></tr></tbody></table><p><strong><font color=" #66DD00">返回值:</font></strong></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;openid&quot;</span>: <span class="hljs-string">&quot;你的openid&quot;</span>,<br>  <span class="hljs-attr">&quot;nickname&quot;</span>: <span class="hljs-string">&quot;微信名字&quot;</span>,<br>  &quot;sex&quot;: 1, # 男女的意思<br>  &quot;language&quot;: &quot;zh_CN&quot;, # 中文<br>  &quot;city&quot;: &quot;Abiko-shi&quot;, # 城市<br>  &quot;province&quot;: &quot;Chiba-ken&quot;, # 乡镇 <br>  &quot;country&quot;: &quot;JP&quot;, # 日本<br>  &quot;headimgurl&quot;:&quot;http://thirdwx.qlogo.cn/mmopen/vi_32/dpF4rnCxdZ3VFjdnEEZ7J2e3hDJORNGibADyWavEeykwWnRnsGuP7dxkAPG70d8BFiagArJ69xy1wkxTG36m18bw/132&quot;, # 你的头像<br>  &quot;privilege&quot;: [<br><br>  ],<br>  &quot;unionid&quot;: &quot;你的unionid&quot;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="微信扫码登录-后端代码☟"><a href="#微信扫码登录-后端代码☟" class="headerlink" title="微信扫码登录-后端代码☟"></a><font color="#008080">微信扫码登录-后端代码☟</font></h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 路由</span><br>url(<span class="hljs-string">r&#x27;^wx_login/$&#x27;</span>, WeXinLogin.as_view()),  <span class="hljs-comment"># 获取微信登录 code值</span><br><br><span class="hljs-comment"># 对应的视图函数</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WeXinLogin</span>(<span class="hljs-params">APIView</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span>(<span class="hljs-params">self, request</span>):</span><br>        code = request.GET.get(<span class="hljs-string">&#x27;code&#x27;</span>)  <span class="hljs-comment"># 获取code值</span><br>        state = request.GET.get(<span class="hljs-string">&quot;state&quot;</span>)<br><br>        myurl = <span class="hljs-string">&quot;https://api.weixin.qq.com/sns/oauth2/access_token?appid=&quot;</span> + AppID + <span class="hljs-string">&quot;&amp;secret=&quot;</span> + AppSecret + <span class="hljs-string">&quot;&amp;code=&quot;</span> + code + <span class="hljs-string">&quot;&amp;grant_type=authorization_code&quot;</span><br><br>        request = Request(myurl)<br>        html = urlopen(request)<br>        <span class="hljs-comment"># 获取数据</span><br>        data = html.read()<br>        strs = json.loads(data.decode())<br>        mytoken = strs[<span class="hljs-string">&quot;access_token&quot;</span>]<br>        myrhtoken = strs[<span class="hljs-string">&quot;refresh_token&quot;</span>]<br>        myopenid = strs[<span class="hljs-string">&quot;openid&quot;</span>]<br>        myunionid = strs[<span class="hljs-string">&quot;unionid&quot;</span>]<br>        <span class="hljs-comment"># 获取用户信息的api接口</span><br>        mytwourl = <span class="hljs-string">&quot;https://api.weixin.qq.com/sns/userinfo?access_token=&quot;</span> + mytoken + <span class="hljs-string">&quot;&amp;openid=&quot;</span> + myopenid + <span class="hljs-string">&quot;&amp;lang=zh_CN&quot;</span><br>        request2 = Request(mytwourl)<br>        html2 = urlopen(request2)<br>        data2 = html2.read()<br>        strs2 = json.loads(data2.decode())<br>        <span class="hljs-comment"># 下面是获取扫码者微信帐号完整信息</span><br>        useropenid = strs2[<span class="hljs-string">&quot;openid&quot;</span>]<br>        usernickname = strs2[<span class="hljs-string">&quot;nickname&quot;</span>]<br>        userheadimgurl = strs2[<span class="hljs-string">&quot;headimgurl&quot;</span>]<br>        userunionid = strs2[<span class="hljs-string">&quot;unionid&quot;</span>]<br><br>        user = User.objects.<span class="hljs-built_in">filter</span>(useropenid=useropenid)<br>        <span class="hljs-keyword">if</span> user.count() &lt;= <span class="hljs-number">0</span>:<br>            is_login = User.objects.create_user(useropenid=useropenid,<br>                                                usernickname=usernickname,<br>                                                userheadimgurl=userheadimgurl,<br>                                                userunionid=userunionid,<br>                                                username=usernickname,<br>                                                password=userunionid,<br>                                                mobile=usernickname,<br>                                                mystate=state)<br>            jwt_payload_handler = api_settings.JWT_PAYLOAD_HANDLER<br>            jwt_encode_handler = api_settings.JWT_ENCODE_HANDLER<br>            payload = jwt_payload_handler(is_login)<br>            token = jwt_encode_handler(payload)<br>            User.objects.<span class="hljs-built_in">filter</span>(username=is_login).update(jwt_token=token)<br>            <span class="hljs-keyword">return</span> Response(&#123;<span class="hljs-string">&#x27;code&#x27;</span>: RET.OK, <span class="hljs-string">&#x27;mobile&#x27;</span>: usernickname, <span class="hljs-string">&#x27;token&#x27;</span>: token&#125;)<br>        is_login = User.objects.get(useropenid=useropenid)<br>        jwt_payload_handler = api_settings.JWT_PAYLOAD_HANDLER<br>        jwt_encode_handler = api_settings.JWT_ENCODE_HANDLER<br>        payload = jwt_payload_handler(is_login)<br>        token = jwt_encode_handler(payload)<br>        User.objects.<span class="hljs-built_in">filter</span>(useropenid=useropenid).update(jwt_token=token)<br>        <span class="hljs-keyword">return</span> Response(&#123;<span class="hljs-string">&#x27;code&#x27;</span>: RET.OK, <span class="hljs-string">&quot;token&quot;</span>: token, <span class="hljs-string">&#x27;mobile&#x27;</span>: is_login.username&#125;)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>WeChat</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>微信支付-后端VIEW</title>
    <link href="/2021/03/08/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98-3/"/>
    <url>/2021/03/08/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98-3/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="WeChat-Pay"><a href="#WeChat-Pay" class="headerlink" title="WeChat Pay"></a><font color=" DeepSkyBlue ">WeChat Pay</font></h2><p><font color="  LimeGreen "><a href="https://pay.weixin.qq.com/wiki/doc/api/index.html">微信开发文档</a></font></p><h2 id="配置路由与文件路径"><a href="#配置路由与文件路径" class="headerlink" title="配置路由与文件路径"></a><font color=" DeepSkyBlue ">配置路由与文件路径</font></h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;wechatPay URL Configuration</span><br><span class="hljs-string"></span><br><span class="hljs-string">The `urlpatterns` list routes URLs to views. For more information please see:</span><br><span class="hljs-string">    https://docs.djangoproject.com/en/1.11/topics/http/urls/</span><br><span class="hljs-string">Examples:</span><br><span class="hljs-string">Function views</span><br><span class="hljs-string">    1. Add an import:  from my_app import views</span><br><span class="hljs-string">    2. Add a URL to urlpatterns:  url(r&#x27;^$&#x27;, views.home, name=&#x27;home&#x27;)</span><br><span class="hljs-string">Class-based views</span><br><span class="hljs-string">    1. Add an import:  from other_app.views import Home</span><br><span class="hljs-string">    2. Add a URL to urlpatterns:  url(r&#x27;^$&#x27;, Home.as_view(), name=&#x27;home&#x27;)</span><br><span class="hljs-string">Including another URLconf</span><br><span class="hljs-string">    1. Import the include() function: from django.conf.urls import url, include</span><br><span class="hljs-string">    2. Add a URL to urlpatterns:  url(r&#x27;^blog/&#x27;, include(&#x27;blog.urls&#x27;))</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url, include<br><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&#x27;^admin/&#x27;</span>, admin.site.urls),<br>    url(<span class="hljs-string">r&#x27;^&#x27;</span>, include(<span class="hljs-string">&#x27;pay.urls&#x27;</span>))<br>]<br><br></code></pre></div></td></tr></table></figure><p><font color="  LimeGreen ">在子应用当中 新建urls.py</font></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r&#x27;^$&#x27;</span>, views.index), <span class="hljs-comment"># 主页面</span><br>    url(<span class="hljs-string">r&#x27;^pay&#x27;</span>, views.pay), <span class="hljs-comment"># 微信支付的接口</span><br>    url(<span class="hljs-string">r&#x27;^result&#x27;</span>, views.result), <span class="hljs-comment"># 微信支付成功之后 回调函数</span><br>    url(<span class="hljs-string">r&#x27;websocketLink/(?P&lt;out_trade_no&gt;\w+)&#x27;</span>, views.websocketLink)  <span class="hljs-comment"># webSocket 链接</span><br>]<br><br></code></pre></div></td></tr></table></figure><p><font color="  LimeGreen ">配置一下模板文件的访问</font></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">TEMPLATES = [<br>    &#123;<br>        <span class="hljs-string">&#x27;BACKEND&#x27;</span>: <span class="hljs-string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,<br>        <span class="hljs-string">&#x27;DIRS&#x27;</span>: [os.path.join(BASE_DIR, <span class="hljs-string">&#x27;templates&#x27;</span>)],<br>        <span class="hljs-string">&#x27;APP_DIRS&#x27;</span>: <span class="hljs-literal">True</span>,<br>        <span class="hljs-string">&#x27;OPTIONS&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;context_processors&#x27;</span>: [<br>                <span class="hljs-string">&#x27;django.template.context_processors.debug&#x27;</span>,<br>                <span class="hljs-string">&#x27;django.template.context_processors.request&#x27;</span>,<br>                <span class="hljs-string">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,<br>                <span class="hljs-string">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,<br>            ],<br>        &#125;,<br>    &#125;,<br>]<br></code></pre></div></td></tr></table></figure><h2 id="返回主页面及settings配置"><a href="#返回主页面及settings配置" class="headerlink" title="返回主页面及settings配置"></a><font color=" DeepSkyBlue ">返回主页面及settings配置</font></h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>(<span class="hljs-params">request</span>):</span><br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;index.html&#x27;</span>)<br></code></pre></div></td></tr></table></figure><p><font color="  LimeGreen ">在子应用当中新建pay_setting.py 配置一下微信支付需要的数据</font></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">APP_ID = <span class="hljs-string">&quot;wx**********&quot;</span>  <span class="hljs-comment"># 微信公众号ID</span><br>MCH_ID = <span class="hljs-string">&quot;1*********&quot;</span>  <span class="hljs-comment"># 商户号ID</span><br>API_KEY = <span class="hljs-string">&quot;8**************************c&quot;</span>  <span class="hljs-comment"># APK密钥(在商户平台里--&gt;&gt;API密钥里面设置)(建议 关于密钥都设置成统一的 好记)</span><br>UFDOOER_URL = <span class="hljs-string">&quot;https://api.mch.weixin.qq.com/pay/unifiedorder&quot;</span>  <span class="hljs-comment"># 微信统一下单地址 默认的</span><br><span class="hljs-comment"># 注意 内网穿透的地址是只能维持几个小时的 如果时间到了 请自行重启</span><br>NOTIFY_URL = <span class="hljs-string">&quot;http://t4knvu.natappfree.cc/result&quot;</span>  <span class="hljs-comment"># 回调，可使用内网穿透工具进行测试</span><br>CREATE_IP = <span class="hljs-string">&quot;127.0.0.1&quot;</span>  <span class="hljs-comment"># 服务器的公网IP 测试使用本地</span><br><br></code></pre></div></td></tr></table></figure><h2 id="微信支付-扫码接口与回调函数"><a href="#微信支付-扫码接口与回调函数" class="headerlink" title="微信支付 扫码接口与回调函数"></a><font color=" DeepSkyBlue ">微信支付 扫码接口与回调函数</font></h2><table><thead><tr><th>参数</th><th>值</th><th>备注</th><th>请求方式</th></tr></thead><tbody><tr><td>参考路由</td><td><a href="http://127.0.0.1:8000/pay/">http://127.0.0.1:8000/pay/</a></td><td>微信扫码支付的第一步 扫码</td><td>GET</td></tr><tr><td>body</td><td>xxx微信支付</td><td>商品描述</td><td></td></tr><tr><td>total_fee</td><td>Aswce67249198721</td><td>订单号</td><td></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pay</span>(<span class="hljs-params">request</span>):</span><br>    body = <span class="hljs-string">&#x27;payTest&#x27;</span>  <span class="hljs-comment"># 商品描述</span><br>    total_fee = <span class="hljs-number">1</span>  <span class="hljs-comment"># 付款金额，单位是分，必须是整数</span><br>    out_trade_no = create_orderId(<span class="hljs-number">5</span>) <span class="hljs-comment"># 这是一个自定义的函数 目的是生成订单号</span><br>    data_dict = wxpay(body, total_fee, out_trade_no)  <span class="hljs-comment"># 这是一个自定义的函数</span><br>    <span class="hljs-keyword">if</span> data_dict.get(<span class="hljs-string">&#x27;return_code&#x27;</span>) == <span class="hljs-string">&#x27;SUCCESS&#x27;</span>:<br>        code_url = get_code_url(data_dict) <span class="hljs-comment"># 这是一个自定义函数,目的是获取支付二维码的地址</span><br>        img = create_image(code_url) <span class="hljs-comment"># 创建支付二维码的图片</span><br>        qrcode_name = out_trade_no + <span class="hljs-string">&#x27;wxpay.png&#x27;</span> <span class="hljs-comment"># 订单号加后缀 作为图片</span><br>        img.save(<span class="hljs-string">r&#x27;static&#x27;</span> + <span class="hljs-string">&#x27;/&#x27;</span> + qrcode_name) <span class="hljs-comment"># 保存图片</span><br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;qrcode.html&#x27;</span>, &#123;<span class="hljs-string">&#x27;qrcode_name&#x27;</span>: qrcode_name, <span class="hljs-string">&#x27;out_trade_no&#x27;</span>: out_trade_no&#125;) <span class="hljs-comment"># 前端获取返回的订单号 轮询订单是否支付完成</span><br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;index.html&#x27;</span>, &#123;<span class="hljs-string">&#x27;err_msg&#x27;</span>: <span class="hljs-string">&#x27;获取微信的code_url失败&#x27;</span>&#125;)<br></code></pre></div></td></tr></table></figure><p><font color="  LimeGreen ">上述的视图,如果支付成功 就走支付成功的回调函数</font></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">result</span>(<span class="hljs-params">request</span>):</span><br>    data_dict = trans_xml_to_dict(request.body)  <span class="hljs-comment"># 回调数据转字典</span><br>    <span class="hljs-comment"># print(&#x27;支付回调结果&#x27;, data_dict)</span><br>    sign = data_dict.pop(<span class="hljs-string">&#x27;sign&#x27;</span>)  <span class="hljs-comment"># 取出签名</span><br>    back_sign = get_sign(data_dict, API_KEY)  <span class="hljs-comment"># 计算签名</span><br>    <span class="hljs-comment"># 验证签名是否与回调签名相同</span><br>    <span class="hljs-keyword">if</span> sign == back_sign <span class="hljs-keyword">and</span> data_dict[<span class="hljs-string">&#x27;return_code&#x27;</span>] == <span class="hljs-string">&#x27;SUCCESS&#x27;</span>:<br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        检查对应业务数据的状态，判断该通知是否已经处理过，如果没有处理过再进行处理，如果处理过直接返回结果成功。</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br>        print(<span class="hljs-string">&#x27;微信支付成功会回调！&#x27;</span>)<br>        <span class="hljs-comment"># 处理支付成功逻辑，向前端页面发送实时消息</span><br>        out_trade_no = data_dict[<span class="hljs-string">&#x27;out_trade_no&#x27;</span>]<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        此处可做支付成功后的业务逻辑</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        send(out_trade_no, <span class="hljs-string">&#x27;支付成功&#x27;</span>) <span class="hljs-comment"># 返回前端的消息</span><br>        <span class="hljs-comment"># 返回接收结果给微信，否则微信会每隔8分钟发送post请求</span><br>        <span class="hljs-keyword">return</span> HttpResponse(trans_dict_to_xml(&#123;<span class="hljs-string">&#x27;return_code&#x27;</span>: <span class="hljs-string">&#x27;SUCCESS&#x27;</span>, <span class="hljs-string">&#x27;return_msg&#x27;</span>: <span class="hljs-string">&#x27;OK&#x27;</span>&#125;))<br>    <span class="hljs-keyword">return</span> HttpResponse(trans_dict_to_xml(&#123;<span class="hljs-string">&#x27;return_code&#x27;</span>: <span class="hljs-string">&#x27;FAIL&#x27;</span>, <span class="hljs-string">&#x27;return_msg&#x27;</span>: <span class="hljs-string">&#x27;SIGNERROR&#x27;</span>&#125;))<br></code></pre></div></td></tr></table></figure><h2 id="前端轮询支付状态"><a href="#前端轮询支付状态" class="headerlink" title="前端轮询支付状态"></a><font color=" DeepSkyBlue ">前端轮询支付状态</font></h2><p><font color="  LimeGreen ">返回前端的消息</font></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">clients = &#123;&#125;  <span class="hljs-comment"># 创建一个空字典，用于保存所有接入的用户地址</span><br><br><br><span class="hljs-meta">@accept_websocket</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">websocketLink</span>(<span class="hljs-params">request, out_trade_no</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;连接websocket&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> request.is_websocket:<br>        lock = threading.RLock()  <span class="hljs-comment"># rlock线程锁</span><br>        <span class="hljs-keyword">try</span>:<br>            lock.acquire()  <span class="hljs-comment"># 抢占资源</span><br>            clients[out_trade_no] = request.websocket<br>            <span class="hljs-comment"># 监听接收客户端发送的消息 或者 客户端断开连接</span><br>            <span class="hljs-keyword">for</span> message <span class="hljs-keyword">in</span> request.websocket:<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> message:<br>                    <span class="hljs-keyword">break</span><br>                <span class="hljs-keyword">else</span>:<br>                    request.websocket.send(message)<br>        <span class="hljs-keyword">finally</span>:<br>            <span class="hljs-comment"># 释放锁</span><br>            lock.release()<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">send</span>(<span class="hljs-params">out_trade_no, msg</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;服务端发送消息&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> clients[out_trade_no]:<br>            clients[out_trade_no].send(msg.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>            <span class="hljs-comment"># 支付结果发送给前端页面后，该连接使命就完成了，前端页面会关闭该链接，这里需要当前连接的记录</span><br>            <span class="hljs-keyword">del</span> clients[out_trade_no]<br>    <span class="hljs-keyword">except</span> BaseException:<br>        print(<span class="hljs-string">&#x27;发送消息出错了...&#x27;</span>)<br></code></pre></div></td></tr></table></figure><h2 id="Utils-工具包"><a href="#Utils-工具包" class="headerlink" title="Utils 工具包"></a><font color=" DeepSkyBlue ">Utils 工具包</font></h2><p><font color="  LimeGreen ">上述的视图,内部所需的函数 自定义工具包</font></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> Random<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-keyword">from</span> pay.pay_setting <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> qrcode<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">random_str</span>(<span class="hljs-params">randomlength=<span class="hljs-number">8</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    生成随机字符串</span><br><span class="hljs-string">    :param randomlength: 字符串长度</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;&#x27;</span><br>    chars = <span class="hljs-string">&#x27;AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz0123456789&#x27;</span><br>    length = <span class="hljs-built_in">len</span>(chars) - <span class="hljs-number">1</span><br>    random = Random()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(randomlength):<br>        <span class="hljs-built_in">str</span> += chars[random.randint(<span class="hljs-number">0</span>, length)]<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create_orderId</span>(<span class="hljs-params">length</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    生成扫码订单号</span><br><span class="hljs-string">    :param length: 自定义长度</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    local_time = time.strftime(<span class="hljs-string">&#x27;%Y%m%d%H%M%S&#x27;</span>, time.localtime(time.time()))<br>    out_trade_no = random_str(length) + local_time<br>    <span class="hljs-keyword">return</span> out_trade_no<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_sign</span>(<span class="hljs-params">data_dict, key</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    签名函数</span><br><span class="hljs-string">    :param data_dict: 需要签名的参数，格式为字典</span><br><span class="hljs-string">    :param key: 密钥 ，即上面的API_KEY</span><br><span class="hljs-string">    :return: 字符串</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    params_list = <span class="hljs-built_in">sorted</span>(data_dict.items(), key=<span class="hljs-keyword">lambda</span> e: e[<span class="hljs-number">0</span>], reverse=<span class="hljs-literal">False</span>)  <span class="hljs-comment"># 参数字典倒排序为列表</span><br>    params_str = <span class="hljs-string">&quot;&amp;&quot;</span>.join(<span class="hljs-string">u&quot;&#123;&#125;=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(k, v) <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> params_list) + <span class="hljs-string">&#x27;&amp;key=&#x27;</span> + key<br>    <span class="hljs-comment"># 组织参数字符串并在末尾添加商户交易密钥</span><br>    md5 = hashlib.md5()  <span class="hljs-comment"># 使用MD5加密模式</span><br>    md5.update(params_str.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))  <span class="hljs-comment"># 将参数字符串传入</span><br>    sign = md5.hexdigest().upper()  <span class="hljs-comment"># 完成加密并转为大写</span><br>    <span class="hljs-keyword">return</span> sign<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">trans_dict_to_xml</span>(<span class="hljs-params">data_dict</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    定义字典转XML的函数</span><br><span class="hljs-string">    :param data_dict:</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    data_xml = []<br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">sorted</span>(data_dict.keys()):  <span class="hljs-comment"># 遍历字典排序后的key</span><br>        v = data_dict.get(k)  <span class="hljs-comment"># 取出字典中key对应的value</span><br>        <span class="hljs-keyword">if</span> k == <span class="hljs-string">&#x27;detail&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> v.startswith(<span class="hljs-string">&#x27;&lt;![CDATA[&#x27;</span>):  <span class="hljs-comment"># 添加XML标记</span><br>            v = <span class="hljs-string">&#x27;&lt;![CDATA[&#123;&#125;]]&gt;&#x27;</span>.<span class="hljs-built_in">format</span>(v)<br>        data_xml.append(<span class="hljs-string">&#x27;&lt;&#123;key&#125;&gt;&#123;value&#125;&lt;/&#123;key&#125;&gt;&#x27;</span>.<span class="hljs-built_in">format</span>(key=k, value=v))<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;xml&gt;&#123;&#125;&lt;/xml&gt;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(data_xml))  <span class="hljs-comment"># 返回XML</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">trans_xml_to_dict</span>(<span class="hljs-params">data_xml</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    定义XML转字典的函数</span><br><span class="hljs-string">    :param data_xml:</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    soup = BeautifulSoup(data_xml, features=<span class="hljs-string">&#x27;xml&#x27;</span>)<br>    xml = soup.find(<span class="hljs-string">&#x27;xml&#x27;</span>)  <span class="hljs-comment"># 解析XML</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> xml:<br>        <span class="hljs-keyword">return</span> &#123;&#125;<br>    data_dict = <span class="hljs-built_in">dict</span>([(item.name, item.text) <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> xml.find_all()])<br>    <span class="hljs-keyword">return</span> data_dict<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wxpay</span>(<span class="hljs-params">body, total_fee, out_trade_no</span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    向微信发出请求，并获取返回的xml，将该xml转为字典</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-comment"># random_str自定义的函数</span><br>    nonce_str = random_str(<span class="hljs-number">20</span>)  <span class="hljs-comment"># 拼接出随机的字符串即可，我这里是用  时间+随机数字+5个随机字母</span><br>    params = &#123;<br>        <span class="hljs-string">&#x27;appid&#x27;</span>: APP_ID,  <span class="hljs-comment"># APPID</span><br>        <span class="hljs-string">&#x27;mch_id&#x27;</span>: MCH_ID,  <span class="hljs-comment"># 商户号</span><br>        <span class="hljs-string">&#x27;nonce_str&#x27;</span>: nonce_str,  <span class="hljs-comment"># 随机字符串</span><br>        <span class="hljs-string">&#x27;out_trade_no&#x27;</span>: out_trade_no,  <span class="hljs-comment"># 订单编号，可自定义</span><br>        <span class="hljs-string">&#x27;total_fee&#x27;</span>: total_fee,  <span class="hljs-comment"># 订单总金额</span><br>        <span class="hljs-string">&#x27;spbill_create_ip&#x27;</span>: CREATE_IP,  <span class="hljs-comment"># 自己服务器的IP地址</span><br>        <span class="hljs-string">&#x27;notify_url&#x27;</span>: NOTIFY_URL,  <span class="hljs-comment"># 回调地址，微信支付成功后会回调这个url，告知商户支付结果</span><br>        <span class="hljs-string">&#x27;body&#x27;</span>: body,  <span class="hljs-comment"># 商品描述</span><br>        <span class="hljs-string">&#x27;trade_type&#x27;</span>: <span class="hljs-string">&#x27;NATIVE&#x27;</span>,  <span class="hljs-comment"># 扫码支付类型</span><br>    &#125;<br>    sign = get_sign(params, API_KEY)  <span class="hljs-comment"># 获取签名</span><br>    params[<span class="hljs-string">&#x27;sign&#x27;</span>] = sign  <span class="hljs-comment"># 添加签名到参数字典</span><br>    xml = trans_dict_to_xml(params)  <span class="hljs-comment"># 转换字典为XML</span><br>    <span class="hljs-comment"># 以POST方式向微信公众平台服务器发起请求</span><br>    response = requests.request(<span class="hljs-string">&#x27;post&#x27;</span>, <span class="hljs-string">&#x27;https://api.mch.weixin.qq.com/pay/unifiedorder&#x27;</span>, data=xml)<br>    data_dict = trans_xml_to_dict(response.content)  <span class="hljs-comment"># 将请求返回的数据转为字典</span><br>    <span class="hljs-keyword">return</span> data_dict<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_code_url</span>(<span class="hljs-params">data_dict</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    从微信返回的数据中提取出二维码字符串</span><br><span class="hljs-string">    :param data_dict: 字典数据</span><br><span class="hljs-string">    :return: 二维码链接</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    code_url = data_dict.get(<span class="hljs-string">&#x27;code_url&#x27;</span>)<br>    <span class="hljs-keyword">return</span> code_url<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create_image</span>(<span class="hljs-params">code_url</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    将传进来的二维码链接转换为二维码图片</span><br><span class="hljs-string">    :param code_url: 二维码链接</span><br><span class="hljs-string">    :return: 二维码图片</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    img = qrcode.make(code_url)<br>    <span class="hljs-keyword">return</span> img<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>WeChat</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>微信支付-前端HTML</title>
    <link href="/2021/03/08/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98-2/"/>
    <url>/2021/03/08/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98-2/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="WeChatPay☟"><a href="#WeChatPay☟" class="headerlink" title=" WeChatPay☟"></a><font color=" DeepSkyBlue "> WeChatPay☟</font></h2><p><strong><code>前情提要</code> <a href="#">☟</a></strong></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx">本章使用: Python3.6 django MySQL<br>项目使用微信支付 购买会员 django+pc端<br></code></pre></div></td></tr></table></figure><h2 id="使用django创建项目"><a href="#使用django创建项目" class="headerlink" title="使用django创建项目"></a><font color=" DeepSkyBlue ">使用django创建项目</font></h2><p><strong>Django 安装</strong></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">pip install django==<span class="hljs-number">1.11</span><span class="hljs-number">.11</span><br></code></pre></div></td></tr></table></figure><p><strong>Django 创建项目</strong></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">django-admin startproject WeChatPay<br></code></pre></div></td></tr></table></figure><p><strong>Django 创建好项目后 新建一个子应用</strong></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">python manage.py startapp pay<br></code></pre></div></td></tr></table></figure><p><strong>项目目录结构</strong></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">├── WeChatPay<br>│├── pay        <span class="hljs-comment"># 子应用(包)</span><br>││├── __init__.py<br>││├── models.py  <span class="hljs-comment"># 模型类</span><br>││├── test.py<br>││├── views.py <span class="hljs-comment"># 视图函数</span><br>│├── templates  <span class="hljs-comment"># 模板文件的文件夹 html</span><br>│├── static     <span class="hljs-comment"># 静态资源文件夹 例如js css等</span><br>│├── WeChatPay  <span class="hljs-comment"># 跟项目同名的文件夹</span><br>││   ├── __init__.py<br>││   ├── settings <span class="hljs-comment"># 配置文件的位置</span><br>││   ├── urls.py  <span class="hljs-comment"># 全局路由</span><br>││   └── wsgi.py<br>│├── manage.py<br></code></pre></div></td></tr></table></figure><p><strong>在跟项目同名下的 settings.py文件里面 配置子应用</strong></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">INSTALLED_APPS = [<br>    <span class="hljs-string">&#x27;...&#x27;</span>,<br>    <span class="hljs-string">&#x27;pay&#x27;</span>,  <span class="hljs-comment"># 微信支付</span><br>    <span class="hljs-string">&#x27;...&#x27;</span><br>]<br><br>MIDDLEWARE = [<br>    <span class="hljs-string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,<br>    <span class="hljs-comment">#&#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;,</span><br>    <span class="hljs-string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,<br>]<br><br><span class="hljs-comment"># 配置静态资源的请求</span><br>STATIC_URL = <span class="hljs-string">&#x27;/static/&#x27;</span><br>STATICFILES_DIRS = (<br>    os.path.join(os.path.join(BASE_DIR, <span class="hljs-string">&#x27;static&#x27;</span>)),<br>)<br></code></pre></div></td></tr></table></figure><h2 id="配置前端文件"><a href="#配置前端文件" class="headerlink" title="配置前端文件"></a><font color=" DeepSkyBlue ">配置前端文件</font></h2><p><strong>在templates里面新建index.html</strong></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;title&gt;微信支付&lt;/title&gt;<br>    &lt;style&gt;<br><br>        .main_div&#123;<br>            width: 320px;<br>            height: 150px;<br>            text-align: center;<br>            margin:<span class="hljs-number">0</span> auto;<br>            margin-top: 100px;<br>            border: aquamarine 2px solid;<br>            border-radius: 5px;<br>        &#125;<br>    &lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>    &lt;div class=&quot;main_div&quot;&gt;<br>        &lt;br&gt;<br>        &lt;h1&gt;进行微信支付测试？&lt;/h1&gt;<br>        &lt;a href=&quot;pay&quot;&gt;确定&lt;/a&gt;<br>    &lt;/div&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><p><strong>在templates里面新建qrcode.html</strong></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;<br><br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;title&gt;扫码支付&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;style&gt;<br>    .box &#123;<br>        position: absolute;<br>        left: <span class="hljs-number">50</span>%;<br>        top: <span class="hljs-number">10</span>%;<br>        transform: translate(-<span class="hljs-number">50</span>%);<br>        text-align: center;<br>    &#125;<br>    .conten &#123;<br>        width: <span class="hljs-number">100</span>%;<br>    &#125;<br>    body &#123;<br>        background: <span class="hljs-comment">#ccc;</span><br>    &#125;<br>&lt;/style&gt;<br>&lt;body&gt;<br>    &#123;% load staticfiles %&#125;<br>    &lt;div class=&quot;box&quot;&gt;<br>        &lt;h2 class=&quot;content&quot;&gt;&lt;span&gt;扫码支付&lt;/span&gt;&lt;/h2&gt;<br>        &lt;h5&gt;订单号：&lt;span id=&quot;out_trade_no&quot;&gt;&#123;&#123; out_trade_no &#125;&#125;&lt;/span&gt;&lt;/h5&gt;<br>        &lt;!--&lt;h2&gt;扫码支付&lt;/h2&gt;--&gt;<br>        &lt;img src=&quot;&#123;% static qrcode_name %&#125;&quot;/&gt;&lt;!--显示支付二维码--&gt;<br>        &lt;br&gt;<br>        &lt;span id=&quot;message&quot;&gt;&lt;/span&gt;<br>    &lt;/div&gt;<br><br>&lt;/body&gt;<br><br>&lt;script <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>var websocket = null;//websocket 的变量<br>function load() &#123;//初始化 websocket<br>//获取订单号<br>var out_trade_no = <span class="hljs-string">&quot;&#123;&#123; out_trade_no &#125;&#125;&quot;</span>;<br>//建立连接<br><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;WebSocket&#x27;</span> <span class="hljs-keyword">in</span> window) &#123;//支持 websocket<br>            // 此处为获取支付是否成功<br>websocket = new WebSocket(<span class="hljs-string">&quot;ws://localhost:80/websocketLink/&quot;</span> + out_trade_no);<br>websocket.onopen = function() &#123;<br>fillData(<span class="hljs-string">&quot;请在两小时内完成支付&quot;</span>)<br>&#125;<br>websocket.onclose = function() &#123;<br>fillData(<span class="hljs-string">&quot;连接关闭了&quot;</span>)<br>&#125;<br>websocket.onerror = function() &#123;<br>fillData(<span class="hljs-string">&quot;出现错误了&quot;</span>)<br>&#125;<br>websocket.onmessage = function(event) &#123;<br>fillData(event.data);<br>alert(<span class="hljs-string">&quot;支付成功！！！&quot;</span>);<br><span class="hljs-keyword">if</span> (window.s) &#123;<br>                    window.s.close();//关闭websocket<br>                    console.log(<span class="hljs-string">&#x27;websocket已关闭&#x27;</span>);<br>                &#125;<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>alert(<span class="hljs-string">&quot;浏览器不支持 websocket&quot;</span>)<br>&#125;<br>//设置监听,当有消息来的时候的监听<br>&#125;<br>function fillData(data) &#123;<br>document.getElementById(<span class="hljs-string">&quot;message&quot;</span>).innerHTML = data;<br>&#125;<br>window.onload=load();//页面加载完成后执行 load 方法<br>&lt;/script&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>WeChat</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>微信支付获取开发者id 密钥</title>
    <link href="/2021/03/08/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98-1/"/>
    <url>/2021/03/08/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98-1/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="WeChatPay"><a href="#WeChatPay" class="headerlink" title=" WeChatPay"></a><font color=" DeepSkyBlue "> WeChatPay</font></h2><p><font color="  LimeGreen ">TIP: 微信支付所需 接口</font></p><h2 id="微信公众号平台"><a href="#微信公众号平台" class="headerlink" title="微信公众号平台"></a><font color=" DeepSkyBlue ">微信公众号平台</font></h2><p><font color="  LimeGreen "><a href="https://mp.weixin.qq.com/cgi-bin/loginpage">点击跳转</a></font></p><p><img src="https://external-30160.picsz.qpic.cn/bd4cb6e93c877366ff14e87d6054c18d" alt="微信公众号链接"></p><p>首先在右上角那里 交300认证一下–&gt;认证完成后–&gt;在左边基本配置那里</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">公众号开发信息<br>开发者ID(AppID) wxxxxxxx58<br><br>开发者ID是公众号开发识别码，配合开发者密码可调用公众号的接口能力。<br><br>开发者密码(AppSecret)重置 <br>开发者密码是校验公众号开发者身份的密码，具有极高的安全性。切记勿把密码直接交给第三方开发者或直接存储在代码中。如需第三方代开发公众号，请使用授权方式接入。<br><br>IP白名单查看<br>通过开发者ID及密码调用获取access_token接口时，需要设置访问来源IP为白名单。了解更多。<br></code></pre></div></td></tr></table></figure><p><font color="  LimeGreen ">TIP: 获取开发者ID(AppID)</font></p><p><font color="  LimeGreen ">TIP: 获取开发者密码(AppSecret)</font></p><p><font color="  LimeGreen ">TIP: 设置IP白名单 注意我们是需要access_token的 多看看介绍</font></p><h2 id="微信商户平台"><a href="#微信商户平台" class="headerlink" title="微信商户平台"></a><font color=" DeepSkyBlue ">微信商户平台</font></h2><p><font color="  LimeGreen "><a href="https://pay.weixin.qq.com/index.php/core/home/login?return_url=/">点击跳转</a></font></p><p><img src="https://external-30160.picsz.qpic.cn/a8db422486a3587709896a5b9a52c7d4" alt="微信支付平台"></p><p>商户号: 16xxxxxx</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">个人信息<br>账号信息<br>登录账号:    注意这就是你的商户号<br><br>账号角色:    超级管理员<br>创建时间:    2020年8月5日 17:23:43<br>绑定微信号:  f**********25更换绑定<br>基本信息修改<br>姓      名:  xxx<br>联系手机:     188**********<br>联系邮箱:     19*******@qq.com<br><br>安全信息<br>操作密码:     修改<br>预留信息:     未设置修改<br>预留信息是由你自己设置的一段文字，用来鉴定网站身份，防止假冒网站造成损失。<br><br>配置后将在首页及充值页面显示。若未看到预留信息，表明当前访问的网站存在风险，请终止操作，并修改密码。<br><br>未安装操作证书时预留信息将被部分掩码。<br></code></pre></div></td></tr></table></figure><p><font color="  LimeGreen ">基本都是一些配置 例如:在API安全里面配置密钥那些</font></p><p><img src="https://external-30160.picsz.qpic.cn/6dc041cfda52a130cf4708ec6874fc74" alt="API安全配置密钥"></p><p><font color="  LimeGreen ">然后在产品中心 获取你所需要的产品</font></p><p><img src="https://external-30160.picsz.qpic.cn/837b4a928d0af1243603eb249342a58c"></p><p><font color="  LimeGreen ">上述红框 都是一些微信支付的接口 仔细看一下内部的文档</font></p><p><font color="  LimeGreen ">最后就是 如果自己就是超级管理员(申请账号的人的微信 扫码登录)</font></p><p><img src="https://external-30160.picsz.qpic.cn/e75176c01f2c104dc41a185be966a28f"></p><p><font color="  LimeGreen ">上述就是 配置支付的关联 微信的指引已经写的很明白了</font></p>]]></content>
    
    
    <categories>
      
      <category>WeChat</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Jwt_token的认证与生成</title>
    <link href="/2021/03/08/Jwt_token/"/>
    <url>/2021/03/08/Jwt_token/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="JWT的简单使用"><a href="#JWT的简单使用" class="headerlink" title="JWT的简单使用"></a><font color="#00ffff">JWT的简单使用</font></h2><h2 id="TIP-安装模块-jwt是一个第三方模块"><a href="#TIP-安装模块-jwt是一个第三方模块" class="headerlink" title="TIP:安装模块 jwt是一个第三方模块"></a><font color=" LimeGreen ">TIP:安装模块 jwt是一个第三方模块</font></h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">pip install djangorestframework-jwt -i https://pypi.douban.com/simple/<br></code></pre></div></td></tr></table></figure><h2 id="TIP-JWT的使用-一-自定义返回的"><a href="#TIP-JWT的使用-一-自定义返回的" class="headerlink" title="TIP:JWT的使用 (一) 自定义返回的"></a><font color=" LimeGreen ">TIP:JWT的使用 (一) 自定义返回的</font></h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># settings.py 里面配置一下</span><br><br>REST_FRAMEWORK = &#123;<br>    <span class="hljs-comment"># 引入JWT认证机制，当客户端将jwt token传递给服务器之后</span><br>    <span class="hljs-comment"># 此认证机制会自动校验jwt token的有效性，无效会直接返回401(未认证错误)</span><br>    <span class="hljs-string">&#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;</span>: (<br>        <span class="hljs-string">&#x27;rest_framework_jwt.authentication.JSONWebTokenAuthentication&#x27;</span>,<br>        <span class="hljs-string">&#x27;rest_framework.authentication.SessionAuthentication&#x27;</span>,<br>        <span class="hljs-string">&#x27;rest_framework.authentication.BasicAuthentication&#x27;</span>,<br>    ),<br>    <span class="hljs-string">&#x27;PAGE_SIZE&#x27;</span>: <span class="hljs-number">100</span>,  <span class="hljs-comment"># 显示多少数据</span><br>    <span class="hljs-string">&#x27;DEFAULT_PAGINATION_CLASS&#x27;</span>: <span class="hljs-string">&#x27;rest_framework.pagination.PageNumberPagination&#x27;</span>,  <span class="hljs-comment"># 防止跳出 警告</span><br>&#125;<br><br><span class="hljs-comment"># JWT扩展配置</span><br>JWT_AUTH = &#123;<br>    <span class="hljs-comment"># 重新定义jwt认证成功后返回的数据 days(天) hours(时) minutes(分)</span><br>    <span class="hljs-string">&#x27;JWT_EXPIRATION_DELTA&#x27;</span>: datetime.timedelta(days=<span class="hljs-number">1</span>),  <span class="hljs-comment"># 定义token过期时间1天</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="TIP-手动生成-JWT-token"><a href="#TIP-手动生成-JWT-token" class="headerlink" title="TIP: 手动生成 JWT token"></a><font color=" LimeGreen ">TIP: 手动生成 JWT token</font></h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 该方法 在后面会用!!!</span><br><br><span class="hljs-keyword">from</span> rest_framework_jwt.settings <span class="hljs-keyword">import</span> api_settings<br><br>jwt_payload_handler = api_settings.JWT_PAYLOAD_HANDLER<br>jwt_encode_handler = api_settings.JWT_ENCODE_HANDLER<br><br>payload = jwt_payload_handler(user)<br>token = jwt_encode_handler(payload)<br></code></pre></div></td></tr></table></figure><h2 id="TIP-子应用—模型类—views-py"><a href="#TIP-子应用—模型类—views-py" class="headerlink" title="TIP: 子应用—模型类—views.py"></a><font color=" LimeGreen ">TIP: 子应用—模型类—views.py</font></h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># models.py</span><br><br><span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> AbstractUser<br><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span>(<span class="hljs-params">AbstractUser</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;自定义用户模型类&quot;&quot;&quot;</span><br>    mobile = models.CharField(max_length=<span class="hljs-number">11</span>, unique=<span class="hljs-literal">True</span>, verbose_name=<span class="hljs-string">&#x27;Mobile&#x27;</span>)<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span><br>        db_table = <span class="hljs-string">&#x27;tb_users&#x27;</span><br>        verbose_name = <span class="hljs-string">&#x27;用户&#x27;</span><br>        verbose_name_plural = verbose_name<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self.username<br><br></code></pre></div></td></tr></table></figure><h2 id="TIP-子应用里的-urls-py"><a href="#TIP-子应用里的-urls-py" class="headerlink" title="TIP: 子应用里的 urls.py"></a><font color=" LimeGreen ">TIP: 子应用里的 urls.py</font></h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><br><span class="hljs-comment"># coding:utf-8</span><br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><br><span class="hljs-keyword">from</span> apps.user.views <span class="hljs-keyword">import</span> *<br><br>app_name = <span class="hljs-string">&#x27;user&#x27;</span><br>urlpatterns = [<br>    url(<span class="hljs-string">r&#x27;^register/$&#x27;</span>, RegisterView.as_view()),  <span class="hljs-comment"># 用户注册接口</span><br>    url(<span class="hljs-string">r&#x27;^mobiles/$&#x27;</span>, MobileCountView.as_view()),  <span class="hljs-comment"># 校验手机号码是否注册过</span><br>    url(<span class="hljs-string">r&#x27;^login/$&#x27;</span>, AdminAuthorizeView.as_view()),  <span class="hljs-comment"># 用户jwt认证接口</span><br>]<br></code></pre></div></td></tr></table></figure><h2 id="TIP-views-py"><a href="#TIP-views-py" class="headerlink" title="TIP: views.py "></a><font color=" LimeGreen ">TIP: views.py </font></h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># coding:utf-8</span><br><span class="hljs-keyword">import</span> re<br><br><span class="hljs-keyword">from</span> django <span class="hljs-keyword">import</span> http<br><span class="hljs-keyword">from</span> django.contrib.auth <span class="hljs-keyword">import</span> authenticate, login<br><span class="hljs-keyword">from</span> django.views <span class="hljs-keyword">import</span> View<br><span class="hljs-keyword">from</span> django_redis <span class="hljs-keyword">import</span> get_redis_connection<br><span class="hljs-keyword">from</span> pymysql <span class="hljs-keyword">import</span> DatabaseError<br><span class="hljs-keyword">from</span> rest_framework.response <span class="hljs-keyword">import</span> Response<br><span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> APIView<br><span class="hljs-keyword">from</span> rest_framework_jwt.settings <span class="hljs-keyword">import</span> api_settings<br><br><span class="hljs-keyword">from</span> apps.user.models <span class="hljs-keyword">import</span> User<br><span class="hljs-keyword">from</span> utils.response_code <span class="hljs-keyword">import</span> RET<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AdminAuthorizeView</span>(<span class="hljs-params">APIView</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">post</span>(<span class="hljs-params">self, request</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        登录</span><br><span class="hljs-string">        :param request:</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        username = request.POST.get(<span class="hljs-string">&#x27;username&#x27;</span>)<br>        password = request.POST.get(<span class="hljs-string">&#x27;password&#x27;</span>)<br><br>        <span class="hljs-keyword">if</span> username <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> password <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> Response(&#123;<span class="hljs-string">&#x27;code&#x27;</span>: <span class="hljs-number">500</span>, <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;请求参数错误&#x27;</span>&#125;)<br><br>        is_login = authenticate(request, username=username, password=password)<br>        <span class="hljs-keyword">if</span> is_login <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> Response(&#123;<span class="hljs-string">&#x27;code&#x27;</span>: <span class="hljs-number">500</span>, <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;账号或密码错误&#x27;</span>&#125;)<br><br>        login(request, is_login) <span class="hljs-comment"># 保存登录状态 但没必要 因为已经是 jwt认证了</span><br><span class="hljs-comment">### 此处为生成 token 的地方 ###</span><br>        jwt_payload_handler = api_settings.JWT_PAYLOAD_HANDLER<br>        jwt_encode_handler = api_settings.JWT_ENCODE_HANDLER<br>        payload = jwt_payload_handler(is_login)<br>        token = jwt_encode_handler(payload)<br>        <span class="hljs-keyword">return</span> Response(&#123;<span class="hljs-string">&#x27;code&#x27;</span>: RET.OK, <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&quot;登录成功&quot;</span>, <span class="hljs-string">&quot;token&quot;</span>: token&#125;)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RegisterView</span>(<span class="hljs-params">APIView</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">post</span>(<span class="hljs-params">self, request</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        注册</span><br><span class="hljs-string">        :param request:</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        password = request.POST.get(<span class="hljs-string">&#x27;password&#x27;</span>)<br>        mobile = request.POST.get(<span class="hljs-string">&#x27;mobile&#x27;</span>)<br>        <span class="hljs-comment"># 短信验证码</span><br>        <span class="hljs-comment"># sms_code = request.POST.get(&#x27;sms_code&#x27;)</span><br><br>        <span class="hljs-comment"># 判断参数是否齐全</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">all</span>([password, mobile]):<br>            <span class="hljs-keyword">return</span> http.HttpResponseBadRequest(<span class="hljs-string">&#x27;缺少必传参数&#x27;</span>)<br>        <span class="hljs-comment"># 判断密码是否是8-20个数字</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> re.match(<span class="hljs-string">r&#x27;^[0-9A-Za-z]&#123;8,20&#125;$&#x27;</span>, password):<br>            <span class="hljs-keyword">return</span> http.HttpResponseBadRequest(<span class="hljs-string">&#x27;请输入8-20位的密码&#x27;</span>)<br>        <span class="hljs-comment"># 判断手机号是否合法</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> re.match(<span class="hljs-string">r&#x27;^1[3-9]\d&#123;9&#125;$&#x27;</span>, mobile):<br>            <span class="hljs-keyword">return</span> http.HttpResponseBadRequest(<span class="hljs-string">&#x27;请输入正确的手机号码&#x27;</span>)<br><br>        <span class="hljs-comment"># redis_conn = get_redis_connection(&#x27;code&#x27;)</span><br>        <span class="hljs-comment"># sms_code_saved = redis_conn.get(&#x27;sms_%s&#x27; % mobile)</span><br>        <span class="hljs-comment"># if sms_code_saved is None:</span><br>        <span class="hljs-comment">#    return Response(&#123;&#x27;code&#x27;: RET.NODATA, &#x27;errmsg&#x27;: &#x27;无效的验证码&#x27;&#125;)</span><br>        <span class="hljs-comment"># if sms_code != sms_code_saved.decode():</span><br>        <span class="hljs-comment">#    return Response(&#123;&#x27;code&#x27;: RET.DATAERR, &#x27;errmsg&#x27;: &#x27;验证码输入错误&#x27;&#125;)</span><br><br>        <span class="hljs-keyword">try</span>:<br>            User.objects.create_user(username=mobile, password=password, mobile=mobile)<br>        <span class="hljs-keyword">except</span> DatabaseError:<br>            <span class="hljs-keyword">return</span> Response(&#123;<span class="hljs-string">&#x27;code&#x27;</span>: RET.DBERR, <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;注册失败&#x27;</span>&#125;)<br><br>        <span class="hljs-keyword">return</span> Response(&#123;<span class="hljs-string">&#x27;code&#x27;</span>: RET.OK, <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&quot;完成注册&quot;</span>&#125;)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MobileCountView</span>(<span class="hljs-params">View</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span>(<span class="hljs-params">self, request</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        校验手机号码是否重复注册</span><br><span class="hljs-string">        :param request:</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        mobile = request.GET.get(<span class="hljs-string">&#x27;mobile&#x27;</span>)<br>        count = User.objects.<span class="hljs-built_in">filter</span>(mobile=mobile).count()<br>        <span class="hljs-keyword">return</span> http.JsonResponse(&#123;<span class="hljs-string">&#x27;code&#x27;</span>: RET.OK, <span class="hljs-string">&#x27;count&#x27;</span>: count&#125;)<br><br></code></pre></div></td></tr></table></figure><h2 id="前端返回token后-后端校验token"><a href="#前端返回token后-后端校验token" class="headerlink" title="前端返回token后,后端校验token"></a><font color="#00ffff">前端返回token后,后端校验token</font></h2><h2 id="TIP-安装cors"><a href="#TIP-安装cors" class="headerlink" title="TIP:安装cors"></a><font color=" LimeGreen ">TIP:安装cors</font></h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">pip install django-cors-headers<br></code></pre></div></td></tr></table></figure><h2 id="TIP-前后端分离-会有跨域的问题-并且-没有使用到-COOKIES-SESSIONS"><a href="#TIP-前后端分离-会有跨域的问题-并且-没有使用到-COOKIES-SESSIONS" class="headerlink" title="TIP: 前后端分离 会有跨域的问题 并且 没有使用到 COOKIES SESSIONS"></a><font color=" LimeGreen ">TIP: 前后端分离 会有跨域的问题 并且 没有使用到 COOKIES SESSIONS</font></h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># settings.py</span><br>INSTALLED_APPS = [<br>    <span class="hljs-string">&#x27;django.contrib.admin&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.auth&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.contenttypes&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.sessions&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.messages&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.staticfiles&#x27;</span>,<br>    <span class="hljs-string">&#x27;rest_framework&#x27;</span>,<br>    <span class="hljs-string">&#x27;apps.user&#x27;</span>,  <span class="hljs-comment"># user</span><br>    <span class="hljs-string">&#x27;corsheaders&#x27;</span>,  <span class="hljs-comment"># 跨域</span><br>]<br><br>MIDDLEWARE = [<br>    <span class="hljs-string">&#x27;corsheaders.middleware.CorsMiddleware&#x27;</span>,  <span class="hljs-comment"># 跨域</span><br>    <span class="hljs-string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,<br>]<br><br><span class="hljs-comment"># 跨域增加忽略</span><br>CORS_ALLOW_CREDENTIALS = <span class="hljs-literal">True</span>  <span class="hljs-comment"># 允许携带cookie</span><br>CORS_ORIGIN_ALLOW_ALL = <span class="hljs-literal">True</span><br><span class="hljs-comment"># 设置允许的请求</span><br>CORS_ALLOW_METHODS = (<br>    <span class="hljs-string">&#x27;DELETE&#x27;</span>,<br>    <span class="hljs-string">&#x27;GET&#x27;</span>,<br>    <span class="hljs-string">&#x27;OPTIONS&#x27;</span>,<br>    <span class="hljs-string">&#x27;PATCH&#x27;</span>,<br>    <span class="hljs-string">&#x27;POST&#x27;</span>,<br>    <span class="hljs-string">&#x27;PUT&#x27;</span>,<br>    <span class="hljs-string">&#x27;VIEW&#x27;</span>,<br>)<br><span class="hljs-comment"># 设置允许的header</span><br>CORS_ALLOW_HEADERS = (<br>    <span class="hljs-string">&#x27;XMLHttpRequest&#x27;</span>,<br>    <span class="hljs-string">&#x27;X_FILENAME&#x27;</span>,<br>    <span class="hljs-string">&#x27;accept-encoding&#x27;</span>,<br>    <span class="hljs-string">&#x27;authorization&#x27;</span>,<br>    <span class="hljs-string">&#x27;content-type&#x27;</span>,<br>    <span class="hljs-string">&#x27;dnt&#x27;</span>,<br>    <span class="hljs-string">&#x27;origin&#x27;</span>,<br>    <span class="hljs-string">&#x27;user-agent&#x27;</span>,<br>    <span class="hljs-string">&#x27;x-csrftoken&#x27;</span>,<br>    <span class="hljs-string">&#x27;x-requested-with&#x27;</span>,<br>    <span class="hljs-string">&#x27;Pragma&#x27;</span>,<br>)<br><br></code></pre></div></td></tr></table></figure><h2 id="TIP-自定义基于jwt的权限类-第一种方法"><a href="#TIP-自定义基于jwt的权限类-第一种方法" class="headerlink" title=" TIP: 自定义基于jwt的权限类 (第一种方法)"></a><font color=" LimeGreen "> TIP: 自定义基于jwt的权限类 (第一种方法)</font></h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 新建一个auth.py 用于认证用户是否登录 在一些需要登录后才能访问的视图做校验</span><br><br><span class="hljs-keyword">from</span> rest_framework.authentication <span class="hljs-keyword">import</span> BaseAuthentication<br><span class="hljs-keyword">from</span> rest_framework_jwt.authentication <span class="hljs-keyword">import</span> jwt_decode_handler<br><span class="hljs-keyword">from</span> rest_framework.exceptions <span class="hljs-keyword">import</span> AuthenticationFailed<br><span class="hljs-keyword">import</span> jwt<br><span class="hljs-keyword">from</span> apps.user.models <span class="hljs-keyword">import</span> User<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBaseAuthentication</span>(<span class="hljs-params">BaseAuthentication</span>):</span><br>    <span class="hljs-comment"># 重写authenticate</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">authenticate</span>(<span class="hljs-params">self, request</span>):</span><br>        <span class="hljs-comment"># 获取token的第二部分</span><br>        jwt_value = request.META.get(<span class="hljs-string">&#x27;HTTP_AUTHORIZATION&#x27;</span>)<br>        <span class="hljs-comment"># 注意此处为 postman 的时候请求 会带有 Bearer 所以使用了切割字符串</span><br>        jwt_value = jwt_value.split()[<span class="hljs-number">1</span>]  <span class="hljs-comment"># 浏览器请求头上传的时候 可以将此句注释掉</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> jwt_value:<br>            <span class="hljs-comment"># 如果没有就抛异常</span><br>            <span class="hljs-keyword">raise</span> AuthenticationFailed(<span class="hljs-string">&#x27;您没有携带认证信息&#x27;</span>)<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># 将token反解成用户信息字典</span><br>            payload = jwt_decode_handler(jwt_value)<br>        <span class="hljs-keyword">except</span> jwt.ExpiredSignature:<br>            <span class="hljs-keyword">raise</span> AuthenticationFailed(<span class="hljs-string">&#x27;认证超时&#x27;</span>)<br>        <span class="hljs-keyword">except</span> jwt.InvalidTokenError:<br>            <span class="hljs-keyword">raise</span> AuthenticationFailed(<span class="hljs-string">&#x27;非法用户&#x27;</span>)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">raise</span> AuthenticationFailed(<span class="hljs-built_in">str</span>(e))<br>        <span class="hljs-comment"># 直接返回对象 不查库，速度快些（只能获取传入的参数的值）</span><br>        <span class="hljs-comment"># user = User(id=payload.get(&#x27;user_id&#x27;), username=payload.get(&#x27;username&#x27;))</span><br>        <span class="hljs-comment"># 去数据库中查找获取user对象（能获取的字段更多）</span><br>        user = User.objects.<span class="hljs-built_in">filter</span>(pk=payload.get(<span class="hljs-string">&#x27;user_id&#x27;</span>)).first()<br>        <span class="hljs-keyword">return</span> user, jwt_value<br></code></pre></div></td></tr></table></figure><h2 id="TIP-自定义基于jwt的权限类-第二种方法"><a href="#TIP-自定义基于jwt的权限类-第二种方法" class="headerlink" title="TIP: 自定义基于jwt的权限类 (第二种方法) "></a><font color=" LimeGreen ">TIP: 自定义基于jwt的权限类 (第二种方法) </font></h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework.authentication <span class="hljs-keyword">import</span> BaseAuthentication<br><span class="hljs-keyword">from</span> rest_framework_jwt.authentication <span class="hljs-keyword">import</span> BaseJSONWebTokenAuthentication<br><span class="hljs-keyword">from</span> rest_framework_jwt.authentication <span class="hljs-keyword">import</span> jwt_decode_handler<br><span class="hljs-keyword">from</span> rest_framework.exceptions <span class="hljs-keyword">import</span> AuthenticationFailed<br><span class="hljs-keyword">import</span> jwt<br><br><span class="hljs-comment"># 继承BaseJSONWebTokenAuthentication，重写父类的authenticate方法</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyToken</span>(<span class="hljs-params">BaseJSONWebTokenAuthentication</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">authenticate</span>(<span class="hljs-params">self, request</span>):</span><br>        <span class="hljs-comment"># 获取token的第二部分</span><br>        jwt_value = request.META.get(<span class="hljs-string">&#x27;HTTP_AUTHORIZATION&#x27;</span>)<br>        print(jwt_value)<br>        <span class="hljs-comment"># 判断get请求头中是否携带token，如果没有就是游客模式，直接返回None</span><br><br>        <span class="hljs-keyword">if</span> jwt_value <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># 将token数据进行decode解码后得到payload（用户信息字典），如果token超时或者错误，就会抛出异常</span><br>            payload = jwt_decode_handler(jwt_value)<br>            <span class="hljs-comment"># token = jwt_encode_handler(payload) 获取token</span><br>        <span class="hljs-keyword">except</span> jwt.ExpiredSignature:<br>            <span class="hljs-keyword">raise</span> AuthenticationFailed(<span class="hljs-string">&#x27;认证超时&#x27;</span>)<br>        <span class="hljs-keyword">except</span> jwt.InvalidTokenError:<br>            <span class="hljs-keyword">raise</span> AuthenticationFailed(<span class="hljs-string">&#x27;非法用户&#x27;</span>)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">raise</span> AuthenticationFailed(<span class="hljs-built_in">str</span>(e))<br>        <span class="hljs-comment"># 将用户信息字典传入，内部会查询数据库返回user对象</span><br>        user = self.authenticate_credentials(payload)<br>        <span class="hljs-comment"># 最后返回两个参数，一个是user对象，另一个是token（也可以是其他数据看你自己要返回啥）</span><br>        <span class="hljs-keyword">return</span> user, jwt_value<br></code></pre></div></td></tr></table></figure><h2 id="TIP-使用POSTman-测试"><a href="#TIP-使用POSTman-测试" class="headerlink" title="TIP: 使用POSTman 测试"></a><font color=" LimeGreen ">TIP: 使用POSTman 测试</font></h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SearchCateGoryView</span>(<span class="hljs-params">APIView</span>):</span><br>    <span class="hljs-comment"># authentication_classes = [MyToken, ]</span><br>    <span class="hljs-comment">### 自定义认证 JWT 方法</span><br>    authentication_classes = [MyBaseAuthentication, ]<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span>(<span class="hljs-params">self,request</span>):</span><br>        data = <span class="hljs-string">&#x27;get方法&#x27;</span><br>        <span class="hljs-keyword">return</span> Response(&#123;<span class="hljs-string">&quot;code&quot;</span>:<span class="hljs-string">&quot;OK&quot;</span>,<span class="hljs-string">&#x27;message&#x27;</span>:data&#125;)<br></code></pre></div></td></tr></table></figure><p><font color=" LimeGreen ">TIP: 当然 还有序列化器实现的</font></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>技术杂谈</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
