<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Jwt_token的认证与生成</title>
    <link href="/2021/03/08/Jwt_token/"/>
    <url>/2021/03/08/Jwt_token/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="JWT的简单使用"><a href="#JWT的简单使用" class="headerlink" title="JWT的简单使用"></a><font color="#00ffff">JWT的简单使用</font></h2><h2 id="TIP-安装模块-jwt是一个第三方模块"><a href="#TIP-安装模块-jwt是一个第三方模块" class="headerlink" title="TIP:安装模块 jwt是一个第三方模块"></a><font color=" LimeGreen ">TIP:安装模块 jwt是一个第三方模块</font></h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">pip install djangorestframework-jwt -i https://pypi.douban.com/simple/<br></code></pre></div></td></tr></table></figure><h2 id="TIP-JWT的使用-一-自定义返回的"><a href="#TIP-JWT的使用-一-自定义返回的" class="headerlink" title="TIP:JWT的使用 (一) 自定义返回的"></a><font color=" LimeGreen ">TIP:JWT的使用 (一) 自定义返回的</font></h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># settings.py 里面配置一下</span><br><br>REST_FRAMEWORK = &#123;<br>    <span class="hljs-comment"># 引入JWT认证机制，当客户端将jwt token传递给服务器之后</span><br>    <span class="hljs-comment"># 此认证机制会自动校验jwt token的有效性，无效会直接返回401(未认证错误)</span><br>    <span class="hljs-string">&#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;</span>: (<br>        <span class="hljs-string">&#x27;rest_framework_jwt.authentication.JSONWebTokenAuthentication&#x27;</span>,<br>        <span class="hljs-string">&#x27;rest_framework.authentication.SessionAuthentication&#x27;</span>,<br>        <span class="hljs-string">&#x27;rest_framework.authentication.BasicAuthentication&#x27;</span>,<br>    ),<br>    <span class="hljs-string">&#x27;PAGE_SIZE&#x27;</span>: <span class="hljs-number">100</span>,  <span class="hljs-comment"># 显示多少数据</span><br>    <span class="hljs-string">&#x27;DEFAULT_PAGINATION_CLASS&#x27;</span>: <span class="hljs-string">&#x27;rest_framework.pagination.PageNumberPagination&#x27;</span>,  <span class="hljs-comment"># 防止跳出 警告</span><br>&#125;<br><br><span class="hljs-comment"># JWT扩展配置</span><br>JWT_AUTH = &#123;<br>    <span class="hljs-comment"># 重新定义jwt认证成功后返回的数据 days(天) hours(时) minutes(分)</span><br>    <span class="hljs-string">&#x27;JWT_EXPIRATION_DELTA&#x27;</span>: datetime.timedelta(days=<span class="hljs-number">1</span>),  <span class="hljs-comment"># 定义token过期时间1天</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="TIP-手动生成-JWT-token"><a href="#TIP-手动生成-JWT-token" class="headerlink" title="TIP: 手动生成 JWT token"></a><font color=" LimeGreen ">TIP: 手动生成 JWT token</font></h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 该方法 在后面会用!!!</span><br><br><span class="hljs-keyword">from</span> rest_framework_jwt.settings <span class="hljs-keyword">import</span> api_settings<br><br>jwt_payload_handler = api_settings.JWT_PAYLOAD_HANDLER<br>jwt_encode_handler = api_settings.JWT_ENCODE_HANDLER<br><br>payload = jwt_payload_handler(user)<br>token = jwt_encode_handler(payload)<br></code></pre></div></td></tr></table></figure><h2 id="TIP-子应用—模型类—views-py"><a href="#TIP-子应用—模型类—views-py" class="headerlink" title="TIP: 子应用—模型类—views.py"></a><font color=" LimeGreen ">TIP: 子应用—模型类—views.py</font></h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># models.py</span><br><br><span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> AbstractUser<br><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span>(<span class="hljs-params">AbstractUser</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;自定义用户模型类&quot;&quot;&quot;</span><br>    mobile = models.CharField(max_length=<span class="hljs-number">11</span>, unique=<span class="hljs-literal">True</span>, verbose_name=<span class="hljs-string">&#x27;Mobile&#x27;</span>)<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span><br>        db_table = <span class="hljs-string">&#x27;tb_users&#x27;</span><br>        verbose_name = <span class="hljs-string">&#x27;用户&#x27;</span><br>        verbose_name_plural = verbose_name<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self.username<br><br></code></pre></div></td></tr></table></figure><h2 id="TIP-子应用里的-urls-py"><a href="#TIP-子应用里的-urls-py" class="headerlink" title="TIP: 子应用里的 urls.py"></a><font color=" LimeGreen ">TIP: 子应用里的 urls.py</font></h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># urls.py</span><br><br><span class="hljs-comment"># coding:utf-8</span><br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><br><span class="hljs-keyword">from</span> apps.user.views <span class="hljs-keyword">import</span> *<br><br>app_name = <span class="hljs-string">&#x27;user&#x27;</span><br>urlpatterns = [<br>    url(<span class="hljs-string">r&#x27;^register/$&#x27;</span>, RegisterView.as_view()),  <span class="hljs-comment"># 用户注册接口</span><br>    url(<span class="hljs-string">r&#x27;^mobiles/$&#x27;</span>, MobileCountView.as_view()),  <span class="hljs-comment"># 校验手机号码是否注册过</span><br>    url(<span class="hljs-string">r&#x27;^login/$&#x27;</span>, AdminAuthorizeView.as_view()),  <span class="hljs-comment"># 用户jwt认证接口</span><br>]<br></code></pre></div></td></tr></table></figure><h2 id="TIP-views-py"><a href="#TIP-views-py" class="headerlink" title="TIP: views.py "></a><font color=" LimeGreen ">TIP: views.py </font></h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># coding:utf-8</span><br><span class="hljs-keyword">import</span> re<br><br><span class="hljs-keyword">from</span> django <span class="hljs-keyword">import</span> http<br><span class="hljs-keyword">from</span> django.contrib.auth <span class="hljs-keyword">import</span> authenticate, login<br><span class="hljs-keyword">from</span> django.views <span class="hljs-keyword">import</span> View<br><span class="hljs-keyword">from</span> django_redis <span class="hljs-keyword">import</span> get_redis_connection<br><span class="hljs-keyword">from</span> pymysql <span class="hljs-keyword">import</span> DatabaseError<br><span class="hljs-keyword">from</span> rest_framework.response <span class="hljs-keyword">import</span> Response<br><span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> APIView<br><span class="hljs-keyword">from</span> rest_framework_jwt.settings <span class="hljs-keyword">import</span> api_settings<br><br><span class="hljs-keyword">from</span> apps.user.models <span class="hljs-keyword">import</span> User<br><span class="hljs-keyword">from</span> utils.response_code <span class="hljs-keyword">import</span> RET<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AdminAuthorizeView</span>(<span class="hljs-params">APIView</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">post</span>(<span class="hljs-params">self, request</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        登录</span><br><span class="hljs-string">        :param request:</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        username = request.POST.get(<span class="hljs-string">&#x27;username&#x27;</span>)<br>        password = request.POST.get(<span class="hljs-string">&#x27;password&#x27;</span>)<br><br>        <span class="hljs-keyword">if</span> username <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> password <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> Response(&#123;<span class="hljs-string">&#x27;code&#x27;</span>: <span class="hljs-number">500</span>, <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;请求参数错误&#x27;</span>&#125;)<br><br>        is_login = authenticate(request, username=username, password=password)<br>        <span class="hljs-keyword">if</span> is_login <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> Response(&#123;<span class="hljs-string">&#x27;code&#x27;</span>: <span class="hljs-number">500</span>, <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;账号或密码错误&#x27;</span>&#125;)<br><br>        login(request, is_login) <span class="hljs-comment"># 保存登录状态 但没必要 因为已经是 jwt认证了</span><br><span class="hljs-comment">### 此处为生成 token 的地方 ###</span><br>        jwt_payload_handler = api_settings.JWT_PAYLOAD_HANDLER<br>        jwt_encode_handler = api_settings.JWT_ENCODE_HANDLER<br>        payload = jwt_payload_handler(is_login)<br>        token = jwt_encode_handler(payload)<br>        <span class="hljs-keyword">return</span> Response(&#123;<span class="hljs-string">&#x27;code&#x27;</span>: RET.OK, <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&quot;登录成功&quot;</span>, <span class="hljs-string">&quot;token&quot;</span>: token&#125;)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RegisterView</span>(<span class="hljs-params">APIView</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">post</span>(<span class="hljs-params">self, request</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        注册</span><br><span class="hljs-string">        :param request:</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        password = request.POST.get(<span class="hljs-string">&#x27;password&#x27;</span>)<br>        mobile = request.POST.get(<span class="hljs-string">&#x27;mobile&#x27;</span>)<br>        <span class="hljs-comment"># 短信验证码</span><br>        <span class="hljs-comment"># sms_code = request.POST.get(&#x27;sms_code&#x27;)</span><br><br>        <span class="hljs-comment"># 判断参数是否齐全</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">all</span>([password, mobile]):<br>            <span class="hljs-keyword">return</span> http.HttpResponseBadRequest(<span class="hljs-string">&#x27;缺少必传参数&#x27;</span>)<br>        <span class="hljs-comment"># 判断密码是否是8-20个数字</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> re.match(<span class="hljs-string">r&#x27;^[0-9A-Za-z]&#123;8,20&#125;$&#x27;</span>, password):<br>            <span class="hljs-keyword">return</span> http.HttpResponseBadRequest(<span class="hljs-string">&#x27;请输入8-20位的密码&#x27;</span>)<br>        <span class="hljs-comment"># 判断手机号是否合法</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> re.match(<span class="hljs-string">r&#x27;^1[3-9]\d&#123;9&#125;$&#x27;</span>, mobile):<br>            <span class="hljs-keyword">return</span> http.HttpResponseBadRequest(<span class="hljs-string">&#x27;请输入正确的手机号码&#x27;</span>)<br><br>        <span class="hljs-comment"># redis_conn = get_redis_connection(&#x27;code&#x27;)</span><br>        <span class="hljs-comment"># sms_code_saved = redis_conn.get(&#x27;sms_%s&#x27; % mobile)</span><br>        <span class="hljs-comment"># if sms_code_saved is None:</span><br>        <span class="hljs-comment">#    return Response(&#123;&#x27;code&#x27;: RET.NODATA, &#x27;errmsg&#x27;: &#x27;无效的验证码&#x27;&#125;)</span><br>        <span class="hljs-comment"># if sms_code != sms_code_saved.decode():</span><br>        <span class="hljs-comment">#    return Response(&#123;&#x27;code&#x27;: RET.DATAERR, &#x27;errmsg&#x27;: &#x27;验证码输入错误&#x27;&#125;)</span><br><br>        <span class="hljs-keyword">try</span>:<br>            User.objects.create_user(username=mobile, password=password, mobile=mobile)<br>        <span class="hljs-keyword">except</span> DatabaseError:<br>            <span class="hljs-keyword">return</span> Response(&#123;<span class="hljs-string">&#x27;code&#x27;</span>: RET.DBERR, <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;注册失败&#x27;</span>&#125;)<br><br>        <span class="hljs-keyword">return</span> Response(&#123;<span class="hljs-string">&#x27;code&#x27;</span>: RET.OK, <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&quot;完成注册&quot;</span>&#125;)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MobileCountView</span>(<span class="hljs-params">View</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span>(<span class="hljs-params">self, request</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        校验手机号码是否重复注册</span><br><span class="hljs-string">        :param request:</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        mobile = request.GET.get(<span class="hljs-string">&#x27;mobile&#x27;</span>)<br>        count = User.objects.<span class="hljs-built_in">filter</span>(mobile=mobile).count()<br>        <span class="hljs-keyword">return</span> http.JsonResponse(&#123;<span class="hljs-string">&#x27;code&#x27;</span>: RET.OK, <span class="hljs-string">&#x27;count&#x27;</span>: count&#125;)<br><br></code></pre></div></td></tr></table></figure><h2 id="前端返回token后-后端校验token"><a href="#前端返回token后-后端校验token" class="headerlink" title="前端返回token后,后端校验token"></a><font color="#00ffff">前端返回token后,后端校验token</font></h2><h2 id="TIP-安装cors"><a href="#TIP-安装cors" class="headerlink" title="TIP:安装cors"></a><font color=" LimeGreen ">TIP:安装cors</font></h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">pip install django-cors-headers<br></code></pre></div></td></tr></table></figure><h2 id="TIP-前后端分离-会有跨域的问题-并且-没有使用到-COOKIES-SESSIONS"><a href="#TIP-前后端分离-会有跨域的问题-并且-没有使用到-COOKIES-SESSIONS" class="headerlink" title="TIP: 前后端分离 会有跨域的问题 并且 没有使用到 COOKIES SESSIONS"></a><font color=" LimeGreen ">TIP: 前后端分离 会有跨域的问题 并且 没有使用到 COOKIES SESSIONS</font></h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># settings.py</span><br>INSTALLED_APPS = [<br>    <span class="hljs-string">&#x27;django.contrib.admin&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.auth&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.contenttypes&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.sessions&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.messages&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.staticfiles&#x27;</span>,<br>    <span class="hljs-string">&#x27;rest_framework&#x27;</span>,<br>    <span class="hljs-string">&#x27;apps.user&#x27;</span>,  <span class="hljs-comment"># user</span><br>    <span class="hljs-string">&#x27;corsheaders&#x27;</span>,  <span class="hljs-comment"># 跨域</span><br>]<br><br>MIDDLEWARE = [<br>    <span class="hljs-string">&#x27;corsheaders.middleware.CorsMiddleware&#x27;</span>,  <span class="hljs-comment"># 跨域</span><br>    <span class="hljs-string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,<br>]<br><br><span class="hljs-comment"># 跨域增加忽略</span><br>CORS_ALLOW_CREDENTIALS = <span class="hljs-literal">True</span>  <span class="hljs-comment"># 允许携带cookie</span><br>CORS_ORIGIN_ALLOW_ALL = <span class="hljs-literal">True</span><br><span class="hljs-comment"># 设置允许的请求</span><br>CORS_ALLOW_METHODS = (<br>    <span class="hljs-string">&#x27;DELETE&#x27;</span>,<br>    <span class="hljs-string">&#x27;GET&#x27;</span>,<br>    <span class="hljs-string">&#x27;OPTIONS&#x27;</span>,<br>    <span class="hljs-string">&#x27;PATCH&#x27;</span>,<br>    <span class="hljs-string">&#x27;POST&#x27;</span>,<br>    <span class="hljs-string">&#x27;PUT&#x27;</span>,<br>    <span class="hljs-string">&#x27;VIEW&#x27;</span>,<br>)<br><span class="hljs-comment"># 设置允许的header</span><br>CORS_ALLOW_HEADERS = (<br>    <span class="hljs-string">&#x27;XMLHttpRequest&#x27;</span>,<br>    <span class="hljs-string">&#x27;X_FILENAME&#x27;</span>,<br>    <span class="hljs-string">&#x27;accept-encoding&#x27;</span>,<br>    <span class="hljs-string">&#x27;authorization&#x27;</span>,<br>    <span class="hljs-string">&#x27;content-type&#x27;</span>,<br>    <span class="hljs-string">&#x27;dnt&#x27;</span>,<br>    <span class="hljs-string">&#x27;origin&#x27;</span>,<br>    <span class="hljs-string">&#x27;user-agent&#x27;</span>,<br>    <span class="hljs-string">&#x27;x-csrftoken&#x27;</span>,<br>    <span class="hljs-string">&#x27;x-requested-with&#x27;</span>,<br>    <span class="hljs-string">&#x27;Pragma&#x27;</span>,<br>)<br><br></code></pre></div></td></tr></table></figure><h2 id="TIP-自定义基于jwt的权限类-第一种方法"><a href="#TIP-自定义基于jwt的权限类-第一种方法" class="headerlink" title=" TIP: 自定义基于jwt的权限类 (第一种方法)"></a><font color=" LimeGreen "> TIP: 自定义基于jwt的权限类 (第一种方法)</font></h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 新建一个auth.py 用于认证用户是否登录 在一些需要登录后才能访问的视图做校验</span><br><br><span class="hljs-keyword">from</span> rest_framework.authentication <span class="hljs-keyword">import</span> BaseAuthentication<br><span class="hljs-keyword">from</span> rest_framework_jwt.authentication <span class="hljs-keyword">import</span> jwt_decode_handler<br><span class="hljs-keyword">from</span> rest_framework.exceptions <span class="hljs-keyword">import</span> AuthenticationFailed<br><span class="hljs-keyword">import</span> jwt<br><span class="hljs-keyword">from</span> apps.user.models <span class="hljs-keyword">import</span> User<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBaseAuthentication</span>(<span class="hljs-params">BaseAuthentication</span>):</span><br>    <span class="hljs-comment"># 重写authenticate</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">authenticate</span>(<span class="hljs-params">self, request</span>):</span><br>        <span class="hljs-comment"># 获取token的第二部分</span><br>        jwt_value = request.META.get(<span class="hljs-string">&#x27;HTTP_AUTHORIZATION&#x27;</span>)<br>        <span class="hljs-comment"># 注意此处为 postman 的时候请求 会带有 Bearer 所以使用了切割字符串</span><br>        jwt_value = jwt_value.split()[<span class="hljs-number">1</span>]  <span class="hljs-comment"># 浏览器请求头上传的时候 可以将此句注释掉</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> jwt_value:<br>            <span class="hljs-comment"># 如果没有就抛异常</span><br>            <span class="hljs-keyword">raise</span> AuthenticationFailed(<span class="hljs-string">&#x27;您没有携带认证信息&#x27;</span>)<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># 将token反解成用户信息字典</span><br>            payload = jwt_decode_handler(jwt_value)<br>        <span class="hljs-keyword">except</span> jwt.ExpiredSignature:<br>            <span class="hljs-keyword">raise</span> AuthenticationFailed(<span class="hljs-string">&#x27;认证超时&#x27;</span>)<br>        <span class="hljs-keyword">except</span> jwt.InvalidTokenError:<br>            <span class="hljs-keyword">raise</span> AuthenticationFailed(<span class="hljs-string">&#x27;非法用户&#x27;</span>)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">raise</span> AuthenticationFailed(<span class="hljs-built_in">str</span>(e))<br>        <span class="hljs-comment"># 直接返回对象 不查库，速度快些（只能获取传入的参数的值）</span><br>        <span class="hljs-comment"># user = User(id=payload.get(&#x27;user_id&#x27;), username=payload.get(&#x27;username&#x27;))</span><br>        <span class="hljs-comment"># 去数据库中查找获取user对象（能获取的字段更多）</span><br>        user = User.objects.<span class="hljs-built_in">filter</span>(pk=payload.get(<span class="hljs-string">&#x27;user_id&#x27;</span>)).first()<br>        <span class="hljs-keyword">return</span> user, jwt_value<br></code></pre></div></td></tr></table></figure><h2 id="TIP-自定义基于jwt的权限类-第二种方法"><a href="#TIP-自定义基于jwt的权限类-第二种方法" class="headerlink" title="TIP: 自定义基于jwt的权限类 (第二种方法) "></a><font color=" LimeGreen ">TIP: 自定义基于jwt的权限类 (第二种方法) </font></h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework.authentication <span class="hljs-keyword">import</span> BaseAuthentication<br><span class="hljs-keyword">from</span> rest_framework_jwt.authentication <span class="hljs-keyword">import</span> BaseJSONWebTokenAuthentication<br><span class="hljs-keyword">from</span> rest_framework_jwt.authentication <span class="hljs-keyword">import</span> jwt_decode_handler<br><span class="hljs-keyword">from</span> rest_framework.exceptions <span class="hljs-keyword">import</span> AuthenticationFailed<br><span class="hljs-keyword">import</span> jwt<br><br><span class="hljs-comment"># 继承BaseJSONWebTokenAuthentication，重写父类的authenticate方法</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyToken</span>(<span class="hljs-params">BaseJSONWebTokenAuthentication</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">authenticate</span>(<span class="hljs-params">self, request</span>):</span><br>        <span class="hljs-comment"># 获取token的第二部分</span><br>        jwt_value = request.META.get(<span class="hljs-string">&#x27;HTTP_AUTHORIZATION&#x27;</span>)<br>        print(jwt_value)<br>        <span class="hljs-comment"># 判断get请求头中是否携带token，如果没有就是游客模式，直接返回None</span><br><br>        <span class="hljs-keyword">if</span> jwt_value <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># 将token数据进行decode解码后得到payload（用户信息字典），如果token超时或者错误，就会抛出异常</span><br>            payload = jwt_decode_handler(jwt_value)<br>            <span class="hljs-comment"># token = jwt_encode_handler(payload) 获取token</span><br>        <span class="hljs-keyword">except</span> jwt.ExpiredSignature:<br>            <span class="hljs-keyword">raise</span> AuthenticationFailed(<span class="hljs-string">&#x27;认证超时&#x27;</span>)<br>        <span class="hljs-keyword">except</span> jwt.InvalidTokenError:<br>            <span class="hljs-keyword">raise</span> AuthenticationFailed(<span class="hljs-string">&#x27;非法用户&#x27;</span>)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">raise</span> AuthenticationFailed(<span class="hljs-built_in">str</span>(e))<br>        <span class="hljs-comment"># 将用户信息字典传入，内部会查询数据库返回user对象</span><br>        user = self.authenticate_credentials(payload)<br>        <span class="hljs-comment"># 最后返回两个参数，一个是user对象，另一个是token（也可以是其他数据看你自己要返回啥）</span><br>        <span class="hljs-keyword">return</span> user, jwt_value<br></code></pre></div></td></tr></table></figure><h2 id="TIP-使用POSTman-测试"><a href="#TIP-使用POSTman-测试" class="headerlink" title="TIP: 使用POSTman 测试"></a><font color=" LimeGreen ">TIP: 使用POSTman 测试</font></h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SearchCateGoryView</span>(<span class="hljs-params">APIView</span>):</span><br>    <span class="hljs-comment"># authentication_classes = [MyToken, ]</span><br>    <span class="hljs-comment">### 自定义认证 JWT 方法</span><br>    authentication_classes = [MyBaseAuthentication, ]<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span>(<span class="hljs-params">self,request</span>):</span><br>        data = <span class="hljs-string">&#x27;get方法&#x27;</span><br>        <span class="hljs-keyword">return</span> Response(&#123;<span class="hljs-string">&quot;code&quot;</span>:<span class="hljs-string">&quot;OK&quot;</span>,<span class="hljs-string">&#x27;message&#x27;</span>:data&#125;)<br></code></pre></div></td></tr></table></figure><p><font color=" LimeGreen ">TIP: 当然 还有序列化器实现的</font></p>]]></content>
    
    
    <categories>
      
      <category>技术杂谈</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
